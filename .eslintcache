[{"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\index.js":"1","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\App.js":"2","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\routes\\routes.js":"3","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\layouts\\Auth.js":"4","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\layouts\\Admin.js":"5","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\index.js":"6","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\auth.js":"7","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\plans.js":"8","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\users.js":"9","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\chargebacks.js":"10","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\getnet.js":"11","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\routes.js":"12","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\services\\api.js":"13","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Navbars\\AuthNavbar.js":"14","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Navbars\\AdminNavbar.js":"15","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Footers\\AuthFooter.js":"16","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Footers\\AdminFooter.js":"17","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Sidebar\\Sidebar.js":"18","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\Index.js":"19","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\ClientProfile.js":"20","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\Clients.js":"21","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\ClientRegister.js":"22","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\Plans.js":"23","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\PlanRegister.js":"24","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\PlanSettings.js":"25","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\chargebacks\\ChargebackSettings.js":"26","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\chargebacks\\Chargebacks.js":"27","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\GroupsCreate.js":"28","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Users.js":"29","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\GroupsUpdate.js":"30","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\UserCreate.js":"31","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Login.js":"32","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\ResetPassword.js":"33","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Register.js":"34","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\RePassword.js":"35","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\format.js":"36","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\FormateUtils.js":"37","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Headers\\Header.js":"38","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\Alert.js":"39","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\variables\\charts.js":"40","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Plans\\EditTable.js":"41","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\masks.js":"42","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\billings.js":"43","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\statements\\Statement.js":"44","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Headers\\HeaderClear.js":"45","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Statements\\TableTransactions.js":"46","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Statements\\TableRefuseds.js":"47","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\CodeBlock.js":"48"},{"size":322,"mtime":1606419844122,"results":"49","hashOfConfig":"50"},{"size":845,"mtime":1602761723850,"results":"51","hashOfConfig":"50"},{"size":753,"mtime":1608816363746,"results":"52","hashOfConfig":"50"},{"size":3211,"mtime":1602761724039,"results":"53","hashOfConfig":"50"},{"size":2067,"mtime":1608116877161,"results":"54","hashOfConfig":"50"},{"size":601,"mtime":1606414632931,"results":"55","hashOfConfig":"50"},{"size":3354,"mtime":1613667222432,"results":"56","hashOfConfig":"50"},{"size":2587,"mtime":1608755007973,"results":"57","hashOfConfig":"50"},{"size":2413,"mtime":1616424305402,"results":"58","hashOfConfig":"50"},{"size":1131,"mtime":1602761724035,"results":"59","hashOfConfig":"50"},{"size":3458,"mtime":1606432790674,"results":"60","hashOfConfig":"50"},{"size":4637,"mtime":1614170250325,"results":"61","hashOfConfig":"50"},{"size":125,"mtime":1611840767008,"results":"62","hashOfConfig":"50"},{"size":3915,"mtime":1608116315431,"results":"63","hashOfConfig":"50"},{"size":2301,"mtime":1608672830676,"results":"64","hashOfConfig":"50"},{"size":2976,"mtime":1602761724028,"results":"65","hashOfConfig":"50"},{"size":777,"mtime":1608748551983,"results":"66","hashOfConfig":"50"},{"size":8099,"mtime":1608748675657,"results":"67","hashOfConfig":"50"},{"size":4708,"mtime":1612989159703,"results":"68","hashOfConfig":"50"},{"size":32389,"mtime":1613757384096,"results":"69","hashOfConfig":"50"},{"size":7799,"mtime":1608673598641,"results":"70","hashOfConfig":"50"},{"size":27553,"mtime":1616447677540,"results":"71","hashOfConfig":"50"},{"size":6858,"mtime":1608740443438,"results":"72","hashOfConfig":"50"},{"size":5333,"mtime":1608754610022,"results":"73","hashOfConfig":"50"},{"size":16195,"mtime":1614119819087,"results":"74","hashOfConfig":"50"},{"size":9381,"mtime":1608152936301,"results":"75","hashOfConfig":"50"},{"size":13448,"mtime":1608152803367,"results":"76","hashOfConfig":"50"},{"size":9397,"mtime":1608153456879,"results":"77","hashOfConfig":"50"},{"size":9818,"mtime":1608757187116,"results":"78","hashOfConfig":"50"},{"size":9932,"mtime":1608153483280,"results":"79","hashOfConfig":"50"},{"size":5358,"mtime":1608153505681,"results":"80","hashOfConfig":"50"},{"size":2843,"mtime":1608671989404,"results":"81","hashOfConfig":"50"},{"size":5777,"mtime":1608748288774,"results":"82","hashOfConfig":"50"},{"size":6884,"mtime":1609194873542,"results":"83","hashOfConfig":"50"},{"size":5586,"mtime":1608748247611,"results":"84","hashOfConfig":"50"},{"size":151,"mtime":1602761724042,"results":"85","hashOfConfig":"50"},{"size":1948,"mtime":1614268036914,"results":"86","hashOfConfig":"50"},{"size":5972,"mtime":1614170707642,"results":"87","hashOfConfig":"50"},{"size":552,"mtime":1606305225958,"results":"88","hashOfConfig":"50"},{"size":10324,"mtime":1608153533813,"results":"89","hashOfConfig":"50"},{"size":1327,"mtime":1607986950715,"results":"90","hashOfConfig":"50"},{"size":1727,"mtime":1606991667204,"results":"91","hashOfConfig":"50"},{"size":668,"mtime":1617733656573,"results":"92","hashOfConfig":"50"},{"size":6166,"mtime":1617736267271,"results":"93","hashOfConfig":"50"},{"size":368,"mtime":1614170594443,"results":"94","hashOfConfig":"50"},{"size":9797,"mtime":1617734336704,"results":"95","hashOfConfig":"50"},{"size":7687,"mtime":1617745742967,"results":"96","hashOfConfig":"50"},{"size":311,"mtime":1617744604225,"results":"97","hashOfConfig":"50"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},"3letd6",{"filePath":"101","messages":"102","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"103","messages":"104","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"107","usedDeprecatedRules":"100"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"112","messages":"113","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"116","usedDeprecatedRules":"100"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"121","usedDeprecatedRules":"100"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"124","usedDeprecatedRules":"100"},{"filePath":"125","messages":"126","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"131","messages":"132","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"100"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"144","usedDeprecatedRules":"100"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"100"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"100"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"157","messages":"158","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"159","usedDeprecatedRules":"100"},{"filePath":"160","messages":"161","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"100"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"167","usedDeprecatedRules":"100"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"100"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"173","usedDeprecatedRules":"100"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"100"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"100"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"100"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"187","messages":"188","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"189","usedDeprecatedRules":"100"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"100"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"195","messages":"196","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"100"},{"filePath":"203","messages":"204","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"100"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"100"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"211","usedDeprecatedRules":"100"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"214","messages":"215","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\index.js",[],["216","217"],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\App.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\routes\\routes.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\layouts\\Auth.js",["218","219","220"],"/*!\r\n\r\n=========================================================\r\n* Argon Dashboard React - v1.1.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n// reactstrap components\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\n// core components\r\nimport AuthNavbar from \"components/Navbars/AuthNavbar.js\";\r\nimport AuthFooter from \"components/Footers/AuthFooter.js\";\r\n\r\nimport routes from \"routes.js\";\r\n\r\nclass Auth extends React.Component {\r\n  componentDidMount() {\r\n    document.body.classList.add(\"bg-default\");\r\n  }\r\n  componentWillUnmount() {\r\n    document.body.classList.remove(\"bg-default\");\r\n  }\r\n  getRoutes = routes => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.layout === \"/auth\") {\r\n        return (\r\n          <Route\r\n            path={prop.layout + prop.path}\r\n            component={prop.component}\r\n            key={key}\r\n          />\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"main-content\">\r\n          {/* <AuthNavbar /> */}\r\n          <div className=\"header bg-gradient-info py-7 py-lg-8\">\r\n            {/* <Container>\r\n              <div className=\"header-body text-center mb-7\">\r\n                <Row className=\"justify-content-center\">\r\n                  <Col lg=\"5\" md=\"6\">\r\n                    <h1 className=\"text-white\">Welcome!</h1>\r\n                    <p className=\"text-lead text-light\">\r\n                      Use these awesome forms to login or create new account in\r\n                      your project for free.\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n            </Container> */}\r\n            <div className=\"separator separator-bottom separator-skew zindex-100\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                preserveAspectRatio=\"none\"\r\n                version=\"1.1\"\r\n                viewBox=\"0 0 2560 100\"\r\n                x=\"0\"\r\n                y=\"0\"\r\n              >\r\n                <polygon\r\n                  className=\"fill-default\"\r\n                  points=\"2560 0 2560 100 0 100\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          {/* Page content */}\r\n          <Container className=\"mt--8 pb-5\">\r\n            <Row className=\"justify-content-center\">\r\n              <Switch>\r\n                {this.getRoutes(routes)}\r\n                <Redirect from=\"*\" to=\"/auth/login\" />\r\n              </Switch>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n        {/* <AuthFooter /> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Auth;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\layouts\\Admin.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\index.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\auth.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\plans.js",["221","222"],"import React, {useState, useContext, createContext, useCallback} from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport api from '../services/api';\r\n\r\nconst PlansContext = createContext();\r\n\r\nfunction PlansProvider({ children }) {\r\n\r\n  const history = useHistory();\r\n\r\n  const [plans, setPlans] = useState([]);\r\n  const [planSettingsId, setPlanSettingsId] = useState(() => {\r\n    const selectedId = localStorage.getItem('@Monetiz-dashboard:plan-selected');\r\n\r\n    return selectedId;\r\n  });\r\n  const handleSetPlanDetailsId = useCallback((id) => {\r\n    setPlanSettingsId(id);\r\n    localStorage.setItem('@Monetiz-dashboard:plan-selected', id);\r\n  },[])\r\n\r\n  const getPlans = useCallback(async () => {\r\n    const response = await api.get('/plans/list');\r\n    setPlans(response.data);\r\n    return response.data;\r\n\r\n  },[])\r\n\r\n  const getPlan = useCallback(async (id) => {\r\n    const response =  await api.get(`plans/show/${id}`);\r\n    return response.data\r\n  },[])\r\n\r\n  const savePlans = useCallback(async (data) => {\r\n    try {\r\n      const response = await api.post('/plans/add', data)\r\n      setPlans(state => [...state, response.data]);\r\n      toast.success(\"Plano cadastrado !\");\r\n      handleSetPlanDetailsId(response.data.id);\r\n      history.push('/admin/plan-settings')\r\n    } catch (err){\r\n      console.log(err);\r\n      toast.error(\"Tente novamente !\");\r\n    }\r\n  },[history])\r\n\r\n  const updatePlan = useCallback(async(data) => {\r\n    try {\r\n      const response = await api.put(`/plans/update/${data.id}`, data);\r\n      toast.success(\"Plano atualizado !\");\r\n    } catch(err){\r\n      console.log(err);\r\n      toast.error(\"Tente novamente !\");\r\n    }\r\n  },[]);\r\n\r\n  const deletePlan = useCallback(async(id) => {\r\n    try {\r\n      await api.delete(`/plans/delete/${id}`);\r\n      toast.success(\"Plano deletado !\");\r\n      history.push('/admin/plans/')\r\n      \r\n    } catch(err){\r\n      console.log(err)\r\n      toast.error(\"Tente novamente !\");\r\n    }\r\n  },[history])\r\n\r\n  \r\n\r\n\r\n  \r\n\r\n  const handleGetPlanDetailsId = useCallback(() => {\r\n    return planSettingsId;\r\n  },[planSettingsId])\r\n\r\n  return (\r\n    <PlansContext.Provider value={{plans, getPlans, getPlan, savePlans, updatePlan, deletePlan, handleSetPlanDetailsId, handleGetPlanDetailsId}}>\r\n      {children}\r\n    </PlansContext.Provider>\r\n  )\r\n}\r\n\r\nfunction usePlans(){\r\n  const context = useContext(PlansContext);\r\n\r\n  if(!context){\r\n    throw new Error('usePlans must be used within an PlansProvider.')\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { PlansProvider, usePlans }","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\users.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\chargebacks.js",["223"],"import React, { useContext, createContext, useCallback , useState} from 'react';\r\nimport api from 'services/api';\r\n\r\nconst ChargebacksContext = createContext();\r\n\r\nfunction ChargebacksProvider({ children }){\r\n\r\n  const [selectedChargebackId, setSelectedChargebackId] = useState(() => {\r\n    const selectedId = localStorage.getItem('@Monetiz-dashboard:chargeback-selected');\r\n    \r\n    return selectedId;\r\n  });\r\n\r\n  const saveSelectedChargeback = useCallback((id) => {\r\n    setSelectedChargebackId(id);\r\n    localStorage.setItem('@Monetiz-dashboard:chargeback-selected', id);\r\n  },[])\r\n\r\n  const getSelectedChargeback = useCallback(() => {\r\n    return selectedChargebackId\r\n  },[selectedChargebackId])\r\n\r\n  return (\r\n    <ChargebacksContext.Provider value={{ saveSelectedChargeback, getSelectedChargeback }}>\r\n      {children}\r\n    </ChargebacksContext.Provider>\r\n  )\r\n}\r\n\r\nfunction useChargebacks(){\r\n  const context = useContext(ChargebacksContext);\r\n\r\n  if(!context){\r\n    throw new Error('useChargebacks must be used within an ChargebacksProvider')\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { ChargebacksProvider, useChargebacks};","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\getnet.js",["224","225"],"import React, { useContext, createContext, useCallback, useState } from 'react';\r\nimport api from 'services/api';\r\nimport {useAuth} from 'hooks/auth'\r\n\r\n\r\nconst GatewayContext = createContext();\r\n\r\nfunction GatewayProvider({ children }){\r\n\r\n  const auth = useAuth()\r\n\r\n  const callback = useCallback(async (document, type) => {\r\n    return api.get(`/gateway/callback?document=${document}&type=${type}`)\r\n    .then((result) => {\r\n      return ({status:true, data:result.data})\r\n      \r\n    }).catch((err) => {\r\n      console.log(err)\r\n    });\r\n  },[]);\r\n\r\n  const handlePreRegisterCpf = useCallback(async (data) => {\r\n    const preRegisterData = {\r\n      legal_document_number: data.cpf,\r\n      legal_name: `${data.name} ${data.surname}`,\r\n      birth_date: data.birthdate,\r\n      mothers_name: `${data.motherName} ${data.motherSurname}`,\r\n      occupation: data.occupation,\r\n      business_address: {\r\n        mailing_address_equals: \"N\",\r\n        street: data.businessAddress.street,\r\n        number: data.businessAddress.number,\r\n        district: data.businessAddress.neighborhood,\r\n        city: data.businessAddress.city,\r\n        state: data.businessAddress.state,\r\n        postal_code: data.businessAddress.cep\r\n      },\r\n      mailing_address: {\r\n        street: data.mailingAddress.street,\r\n        number: data.mailingAddress.number,\r\n        district: data.mailingAddress.neighborhood,\r\n        city: data.mailingAddress.city,\r\n        state: data.mailingAddress.state,\r\n        postal_code: data.mailingAddress.cep,\r\n      },\r\n      email: data.email,\r\n      bank_accounts: {\r\n        type_accounts: 'unique',\r\n        ...data.bankAccounts,\r\n      },\r\n      user_id: data.user_id\r\n    }\r\n\r\n    const response = await api.post('gateway/pre-register/pf', preRegisterData)\r\n    \r\n    return response.data;\r\n  \r\n  },[]);\r\n\r\n  const handlePreRegisterCnpj = useCallback(async (data) => {\r\n    const preRegisterData = {\r\n      legal_document_number: data.cnpj,\r\n      legal_name: data.legalName,\r\n      trade_name: data.tradeName,\r\n      state_fiscal_document_number: data.stateFiscalNumber,\r\n      business_address: {\r\n        mailing_address_equals: \"N\",\r\n        street: data.businessAddress.street,\r\n        number: data.businessAddress.number,\r\n        district: data.businessAddress.neighborhood,\r\n        city: data.businessAddress.city,\r\n        state: data.businessAddress.state,\r\n        postal_code: data.businessAddress.cep\r\n      },\r\n      mailing_address: {\r\n        street: data.mailingAddress.street,\r\n        number: data.mailingAddress.number,\r\n        district: data.mailingAddress.neighborhood,\r\n        city: data.mailingAddress.city,\r\n        state: data.mailingAddress.state,\r\n        postal_code: data.mailingAddress.cep,\r\n      },\r\n      email: data.email,\r\n      bank_accounts: {\r\n        type_accounts: 'unique',\r\n        ...data.bankAccounts,\r\n      },\r\n      user_id: data.user_id\r\n    }\r\n\r\n    const response = await api.post('gateway/pre-register/pj', preRegisterData)\r\n    \r\n    return response.data;\r\n  \r\n  },[])\r\n\r\n  return (\r\n    <GatewayContext.Provider value={{callback, handlePreRegisterCpf, handlePreRegisterCnpj}}>\r\n      {children}\r\n    </GatewayContext.Provider>\r\n  )\r\n}\r\n\r\nfunction useGateway(){\r\n  const context = useContext(GatewayContext);\r\n\r\n  if(!context){\r\n    throw new Error('useGateway must be used within an Gateway Provider')\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { GatewayProvider, useGateway };\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\routes.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\services\\api.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Navbars\\AuthNavbar.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Navbars\\AdminNavbar.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Footers\\AuthFooter.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Footers\\AdminFooter.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Sidebar\\Sidebar.js",["226"],"import React from \"react\";\r\nimport { NavLink as NavLinkRRD, Link } from \"react-router-dom\";\r\n// nodejs library to set properties for components\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Collapse,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  Form,\r\n  Input,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  InputGroup,\r\n  Media,\r\n  NavbarBrand,\r\n  Navbar,\r\n  NavItem,\r\n  NavLink,\r\n  Nav,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\nclass Sidebar extends React.Component {\r\n  state = {\r\n    collapseOpen: false\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.activeRoute.bind(this);\r\n  }\r\n  // verifies if routeName is the one active (in browser input)\r\n  activeRoute(routeName) {\r\n    return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\r\n  }\r\n  // toggles collapse between opened and closed (true/false)\r\n  toggleCollapse = () => {\r\n    this.setState({\r\n      collapseOpen: !this.state.collapseOpen\r\n    });\r\n  };\r\n  // closes the collapse\r\n  closeCollapse = () => {\r\n    this.setState({\r\n      collapseOpen: false\r\n    });\r\n  };\r\n  // creates the links that appear in the left menu / Sidebar\r\n  createLinks = routes => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.name) {\r\n        return (\r\n          <NavItem key={key}>\r\n            <NavLink\r\n              to={prop.layout + prop.path}\r\n              tag={NavLinkRRD}\r\n              onClick={this.closeCollapse}\r\n              activeClassName=\"active\"\r\n            >\r\n              <i className={prop.icon} />\r\n              {prop.name}\r\n            </NavLink>\r\n          </NavItem>\r\n        );\r\n      }\r\n    });\r\n  };\r\n  render() {\r\n    const { routes, logo } = this.props;\r\n    let navbarBrandProps;\r\n    if (logo && logo.innerLink) {\r\n      navbarBrandProps = {\r\n        to: logo.innerLink,\r\n        tag: Link\r\n      };\r\n    } else if (logo && logo.outterLink) {\r\n      navbarBrandProps = {\r\n        href: logo.outterLink,\r\n        target: \"_blank\"\r\n      };\r\n    }\r\n    return (\r\n      <Navbar\r\n        className=\"navbar-vertical fixed-left navbar-light bg-white\"\r\n        expand=\"md\"\r\n        id=\"sidenav-main\"\r\n      >\r\n        <Container fluid>\r\n          {/* Toggler */}\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            onClick={this.toggleCollapse}\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          {/* Brand */}\r\n          {logo ? (\r\n            <NavbarBrand className=\"pt-0\" {...navbarBrandProps}>\r\n              <img\r\n                alt={logo.imgAlt}\r\n                className=\"navbar-brand-img\"\r\n                src={logo.imgSrc}\r\n              />\r\n            </NavbarBrand>\r\n          ) : null}\r\n          {/* User */}\r\n          <Nav className=\"align-items-center d-md-none\">\r\n            <UncontrolledDropdown nav>\r\n              <DropdownToggle nav className=\"nav-link-icon\">\r\n                <i className=\"ni ni-bell-55\" />\r\n              </DropdownToggle>\r\n              <DropdownMenu\r\n                aria-labelledby=\"navbar-default_dropdown_1\"\r\n                className=\"dropdown-menu-arrow\"\r\n                right\r\n              >\r\n                <DropdownItem>Action</DropdownItem>\r\n                <DropdownItem>Another action</DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>Something else here</DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n            <UncontrolledDropdown nav>\r\n              <DropdownToggle nav>\r\n                <Media className=\"align-items-center\">\r\n                  <span className=\"avatar avatar-sm rounded-circle\">\r\n                    <img\r\n                      alt=\"...\"\r\n                      src={require(\"assets/img/theme/team-1-800x800.jpg\")}\r\n                    />\r\n                  </span>\r\n                </Media>\r\n              </DropdownToggle>\r\n              <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                <DropdownItem className=\"noti-title\" header tag=\"div\">\r\n                  <h6 className=\"text-overflow m-0\">Welcome!</h6>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-single-02\" />\r\n                  <span>My profile</span>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-settings-gear-65\" />\r\n                  <span>Settings</span>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-calendar-grid-58\" />\r\n                  <span>Activity</span>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-support-16\" />\r\n                  <span>Support</span>\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\r\n                  <i className=\"ni ni-user-run\" />\r\n                  <span>Logout</span>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav>\r\n          {/* Collapse */}\r\n          <Collapse navbar isOpen={this.state.collapseOpen}>\r\n            {/* Collapse header */}\r\n            <div className=\"navbar-collapse-header d-md-none\">\r\n              <Row>\r\n                {logo ? (\r\n                  <Col className=\"collapse-brand\" xs=\"6\">\r\n                    {logo.innerLink ? (\r\n                      <Link to={logo.innerLink}>\r\n                        <img alt={logo.imgAlt} src={logo.imgSrc} />\r\n                      </Link>\r\n                    ) : (\r\n                        <a href={logo.outterLink}>\r\n                          <img alt={logo.imgAlt} src={logo.imgSrc} />\r\n                        </a>\r\n                      )}\r\n                  </Col>\r\n                ) : null}\r\n                <Col className=\"collapse-close\" xs=\"6\">\r\n                  <button\r\n                    className=\"navbar-toggler\"\r\n                    type=\"button\"\r\n                    onClick={this.toggleCollapse}\r\n                  >\r\n                    <span />\r\n                    <span />\r\n                  </button>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            {/* Form */}\r\n            <Form className=\"mt-4 mb-3 d-md-none\">\r\n              <InputGroup className=\"input-group-rounded input-group-merge\">\r\n                <Input\r\n                  aria-label=\"Search\"\r\n                  className=\"form-control-rounded form-control-prepended\"\r\n                  placeholder=\"Search\"\r\n                  type=\"search\"\r\n                />\r\n                <InputGroupAddon addonType=\"prepend\">\r\n                  <InputGroupText>\r\n                    <span className=\"fa fa-search\" />\r\n                  </InputGroupText>\r\n                </InputGroupAddon>\r\n              </InputGroup>\r\n            </Form>\r\n            {/* Navigation */}\r\n            <Nav navbar>{this.createLinks(routes)}</Nav>\r\n            {/* Divider */}\r\n            <hr className=\"my-3\" />\r\n\r\n          </Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nSidebar.defaultProps = {\r\n  routes: [{}]\r\n};\r\n\r\nSidebar.propTypes = {\r\n  // links that will be displayed inside the component\r\n  routes: PropTypes.arrayOf(PropTypes.object),\r\n  logo: PropTypes.shape({\r\n    // innerLink is for links that will direct the user within the app\r\n    // it will be rendered as <Link to=\"...\">...</Link> tag\r\n    innerLink: PropTypes.string,\r\n    // outterLink is for links that will direct the user outside the app\r\n    // it will be rendered as simple <a href=\"...\">...</a> tag\r\n    outterLink: PropTypes.string,\r\n    // the image src of the logo\r\n    imgSrc: PropTypes.string.isRequired,\r\n    // the alt for the img\r\n    imgAlt: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default Sidebar;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\Index.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\ClientProfile.js",["227","228"],"\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Badge,\r\n  Label,\r\n  Alert\r\n} from \"reactstrap\";\r\n\r\nimport { format, parseISO, isAfter } from 'date-fns';\r\nimport { formatPrice } from '../../utils/format';\r\nimport { useUsers } from '../../hooks/users';\r\nimport {usePlans} from '../../hooks/plans'\r\nimport { useForm } from \"react-hook-form\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// core components\r\nimport UserHeader from \"components/Headers/Header\";\r\n\r\nfunction ClientProfile(){\r\n  const { register, handleSubmit } = useForm();\r\n  const {getSelectedUserId, updateUser, getUser } = useUsers();\r\n  const {getPlans} = usePlans();\r\n  const [isCpf, setIsCpf] = useState(false);\r\n  const [client, setClient] = useState({});\r\n  const [address, setAddress] = useState({});\r\n  const [banks, setBanks] = useState({})\r\n  const [sales, setSales] = useState([]);\r\n  const [chargebacks, setChargebacks] = useState([]);\r\n  const [plans, setPlans] = useState([]);\r\n  const user_id = getSelectedUserId();\r\n  useEffect(() => {\r\n    async function loadingData(){\r\n      const response = await getUser(user_id );\r\n      const responsePlans = await getPlans();  \r\n      let user = response.data.user\r\n      user.subsellerId = response.data.user.subseller.subsellerId   \r\n      setClient(user);\r\n      setAddress(response.data.user.addresses[0])\r\n      setBanks(response.data.user.banks[0])\r\n      setSales(response.data.user.store.orders);\r\n      setChargebacks(response.data.user.chargebacks);\r\n      setPlans(responsePlans);\r\n      response.data.user.type === \"pf\"? setIsCpf(true):setIsCpf(false)\r\n    }\r\n    loadingData();\r\n  },[getSelectedUserId, user_id, getUser,getPlans])\r\n\r\n  const onSubmit = (data) => {\r\n    let {legalName, tradeName, document, stateFiscalDocument, phone, mobile, email,planId, number, neighborhood, city, state, postcode, complement, codeBank, agency, account, accountType, accountDigit } = data\r\n    let userData = { id:user_id,legalName, tradeName, document, stateFiscalDocument, phone, mobile, email,planId,type: isCpf ? \"pf\" : \"pj\" }\r\n    \r\n    let addresses = { id:address.id,name: \"Bussines Address\", address:data.address, number, neighborhood, city, state, postcode, complement }\r\n    \r\n    let bankAccounts = {\r\n      type_accounts: \"unique\",\r\n      unique_account: {id:banks.id, codeBank, agency, account, accountType, accountDigit }\r\n    }\r\n    userData.mobile = userData.mobile.replace(/\\D/g, \"\")\r\n    userData.document = client.document\r\n    userData.stateFiscalDocument = client.stateFiscalDocument\r\n    userData.phone = userData.phone.replace(/\\D/g, \"\")\r\n    addresses.postcode = addresses.postcode.replace(/\\D/g, \"\")\r\n    let dataSubmit = {\r\n      user: userData,\r\n      mailingAddressEquals: \"S\",\r\n      addresses: [addresses],\r\n      bankAccounts: bankAccounts,\r\n      subsellerId: client.subsellerId\r\n    }\r\n    updateUser(dataSubmit)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <UserHeader />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <Col className=\"order-xl-1\" xl=\"12\">\r\n            <Card className=\"bg-secondary shadow\">\r\n              <CardHeader className=\"bg-white border-0\">\r\n                <Row className=\"align-items-center\">\r\n                  <Col xs=\"8\">\r\n                    <h3 className=\"mb-0\">Cliente</h3>\r\n                  </Col>\r\n                  \r\n                </Row>\r\n              </CardHeader>\r\n              <CardBody>\r\n                {client && (\r\n                  <Form onSubmit={handleSubmit(onSubmit)}>                  \r\n                  \r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Informações\r\n                  </h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\" for=\"input-name\">{isCpf ? \"Nome\" : \"Razão Social\"}</Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"legalName\"\r\n                            id=\"input-name\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={client.legalName}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\" for='input-email'>Email</Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-email\"\r\n                            placeholder=\"exemplo@monetiz.com.br\"\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={client.email}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\" for=\"input-mobile\">\r\n                            Celular\r\n                                </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-mobile\"\r\n                            name=\"mobile\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={client.mobile}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\" for=\"input-phone\">\r\n                            Telefone Comercial\r\n                                </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-phone\"\r\n                            name=\"phone\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: false })}\r\n                            defaultValue={client.phone}\r\n                          />\r\n                        </FormGroup>\r\n\r\n                      </Col>\r\n                    </Row>\r\n                    {\r\n                      isCpf && (\r\n                        <>\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-cpf\">CPF</Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  id=\"input-cpf\"\r\n                                  name=\"document\"\r\n                                  type=\"text\"\r\n                                  disabled={true}\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={client.document}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-occupation\">\r\n                                  Ocupação/Profissão\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  id=\"input-occupation\"\r\n                                  name=\"occupation\"\r\n                                  type=\"text\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={client.occupation}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-mothername\">\r\n                                  Nome da Mãe\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  name=\"mothername\"\r\n                                  id=\"input-mothersName\"\r\n                                  type=\"text\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={client.motherName}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-birthday\">\r\n                                  Data de nascimento\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  id=\"input-birthday\"\r\n                                  name=\"birthdate\"\r\n                                  type=\"date\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={client.birthdate}\r\n                                />\r\n\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                        </>\r\n                      )\r\n                    }\r\n\r\n                    {\r\n                      !isCpf && (\r\n                        <>\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label\r\n                                  className=\"form-control-Label\"\r\n                                  for=\"input-cnpj\"\r\n                                >\r\n                                  CNPJ\r\n                              </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  name=\"document\"\r\n                                  id=\"input-cnpj\"\r\n                                  type=\"text\"\r\n                                  disabled={true}\r\n                                  defaultValue={client.document}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n\r\n                                <Label\r\n                                  className=\"form-control-Label\"\r\n                                  for=\"input-state-fiscal\"\r\n                                >\r\n                                  Inscrição estadual\r\n                              </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  id=\"input-state-fiscal\"\r\n                                  name=\"stateFiscalDocument\"\r\n                                  type=\"text\"\r\n                                  disabled\r\n                                  defaultValue={client.stateFiscalDocument}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                          <Row>\r\n\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n\r\n                                <Label\r\n                                  className=\"form-control-Label\"\r\n                                  for=\"input-tradename\"\r\n                                >\r\n                                  Nome fantasia\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  id=\"input-tradename\"\r\n                                  name=\"tradeName\"\r\n                                  innerRef={register({ required: true })}\r\n                                  type=\"text\"\r\n                                  defaultValue={client.tradeName}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"6\"></Col>\r\n                          </Row>\r\n                        </>\r\n                      )\r\n                    }\r\n\r\n                  </div>\r\n                  <hr className=\"my-4\" />\r\n                  {/* Address */}\r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Endereço\r\n                  </h6>\r\n\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col md=\"12\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-address\"\r\n                          >\r\n                            Endereço\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"address\"\r\n                            id=\"input-address\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={address.address}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-number\"\r\n                          >\r\n                            Número\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"number\"\r\n                            id=\"input-number\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={address.number}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-neighborhood\"\r\n                          >\r\n                            Bairro\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"neighborhood\"\r\n                            id=\"input-neighborhood\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={address.neighborhood}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-complement\"\r\n                          >\r\n                            Complemento\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-complement\"\r\n                            name=\"complement\"\r\n                            type=\"text\"\r\n                            innerRef={register()}\r\n                            defaultValue={address.complement}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-city\"\r\n                          >\r\n                            Cidade\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"city\"\r\n                            id=\"input-city\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={address.city}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-state\"\r\n                          >\r\n                            Estado\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"state\"\r\n                            id=\"input-state\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={address.state}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-postcode\"\r\n                          >\r\n                            CEP\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-postcode\"\r\n                            name=\"postcode\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={address.postcode}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n\r\n                  <hr className=\"my-4\" />\r\n                  <h6 className=\"heading-small text-muted mb-4\">Conta bancária</h6>\r\n                  <div className=\"pl-lg-4\">\r\n                  <Row>\r\n                      <Col>\r\n                        <Alert color=\"info\">\r\n                          <FontAwesomeIcon icon={faInfoCircle} color=\"info\" /> <strong>Regras Número da Conta</strong><br />\r\n                          <br />\r\n                          Deve conter somente digitos numéricos; Para contas com domicílio na Caixa Econômica Federal, o preenchimento deve seguir o seguinte modelo:<br />\r\n                          <br />\r\n                              São 3 dígitos para o tipo de conta, 8 dígitos para a conta, os tipos de conta são os seguintes:<br />\r\n                              001 – Conta Corrente de Pessoa Física;<br />\r\n                              003 – Conta Corrente de Pessoa Jurídica;<br />\r\n                              013 – Poupança de Pessoa Física;<br />\r\n                              022 – Poupança de Pessoa Jurídica.<br />\r\n                          <br />\r\n                              Exemplo: no campo de conta, será necessário colocar o tipo de conta (sem os zeros à esquerda) e o número da conta: 100000123.<br />\r\n                          <br />\r\n                          <FontAwesomeIcon icon={faInfoCircle} color=\"info\" /> <strong>Regras Dígito da Conta</strong><br />\r\n                          <br />\r\n                          Deve conter 1 digito numérico; Caso o dígito da conta seja X, substitua por 0.\r\n\r\n                        </Alert>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"2\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                          >\r\n                            Código do banco\r\n                                  </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            placeholder=\"Banco\"\r\n                            name=\"codeBank\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={banks.codeBank}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"2\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\">\r\n                            Agência\r\n                                  </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"agency\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={banks.agency}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"3\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                          >\r\n                            Número da conta\r\n                                  </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"account\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={banks.account}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"2\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\">\r\n                            Dígito da Conta\r\n                                  </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative .inputNumber\"\r\n                            name=\"accountDigit\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={banks.accountDigit}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"2\">\r\n\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                          >\r\n                            Tipo da conta\r\n                                  </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"accountType\"\r\n                            type=\"select\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={banks.accountType}\r\n                          >\r\n                            <option value=\"C\"  >Conta Corrente</option>\r\n                            <option value=\"P\" >Conta Poupança</option>\r\n                          </Input>\r\n                        </FormGroup>\r\n\r\n                      </Col>\r\n\r\n                    </Row>\r\n                  </div>\r\n\r\n                  <hr className=\"my-4\" />\r\n                  <h6 className=\"heading-small text-muted mb-4\">Plano</h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <FormGroup>\r\n                      <Label>Plano selecionado</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"planId\"\r\n                        id=\"exampleSelect\"\r\n                        defaultValue={client.planId}\r\n                        innerRef={register({ required: true })}\r\n                      >\r\n                        {plans.map(plan => (\r\n                          <option value={plan.id} key={plan.id}>{plan.name}</option>\r\n                        ))}\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <Col className='d-flex justify-content-center'>\r\n                    <Button color=\"primary\" className='self-align-center' >\r\n                      Confirmar\r\n                    </Button>\r\n                  </Col>\r\n                </Form>\r\n                  \r\n                )}\r\n\r\n              \r\n              </CardBody>\r\n\r\n\r\n              <CardBody>\r\n                Vendas\r\n                \r\n                <Table className=\"align-items-center table-flush\" responsive>\r\n                <thead className=\"thead-light\">\r\n                  <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Valor</th>\r\n                    <th scope=\"col\">Data</th>\r\n                    {/* <th scope=\"col\">Status</th>\r\n                    {/* <th scope=\"col\">Users</th> \r\n                    <th scope=\"col\" /> */}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  \r\n                    \r\n{/* \r\n{sales.map(sale => (\r\n                      <tr key={sale.id}>\r\n                      <th scope=\"row\">\r\n\r\n\r\n                      <td>\r\n                      <span className=\"mb-0 text-sm\">\r\n                              {sale.valueTotal}\r\n                            </span>\r\n                      </td>\r\n     \r\n                      </th>\r\n                      <td>{sale.date}</td>\r\n                      <td>\r\n                        {format(sale.createdAt, 'dd/MM/YYYY')}\r\n                      </td>\r\n                      <td>\r\n                        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n                          <i className={sale.active ? \"bg-success\" : \"bg-warning\"} />\r\n                          {sale.active ? \"Pago\": 'Inadimplente'}\r\n                        </Badge>\r\n                      </td>\r\n  \r\n                      <td className=\"text-right\">\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle\r\n                            className=\"btn-icon-only text-light\"\r\n                            href=\"#pablo\"\r\n                            role=\"button\"\r\n                            size=\"sm\"\r\n                            color=\"\"\r\n                            onClick={e => e.preventDefault()}\r\n                          >\r\n                            <i className=\"fas fa-ellipsis-v\" />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                            <DropdownItem\r\n                              onClick={(e) => e.preventDefault()}\r\n                            >\r\n                              Ver perfil\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              href=\"#pablo\"\r\n                              onClick={e => e.preventDefault()}\r\n                            >\r\n                              Another action\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              href=\"#pablo\"\r\n                              onClick={e => e.preventDefault()}\r\n                            >\r\n                              Something else here\r\n                            </DropdownItem>\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                      </td>\r\n                    </tr>\r\n                    ))} */}\r\n                </tbody>\r\n                </Table> \r\n              </CardBody>\r\n\r\n              <CardBody>\r\n                Chargebacks\r\n                \r\n                <Table className=\"align-items-center table-flush\" responsive>\r\n                <thead className=\"thead-light\">\r\n                  <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Valor</th>\r\n                    <th scope=\"col\">Data de requisição</th>\r\n                    <th scope=\"col\">Data de limite</th>\r\n                    <th scope=\"col\">Status pagamento</th>\r\n                    {/* <th scope=\"col\">Users</th> */}\r\n                    <th scope=\"col\" />\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  \r\n                     {chargebacks.map(chargeback => (\r\n                      <tr key={chargeback.id}>\r\n                     \r\n                      <td>{chargeback.id}</td>\r\n                      <th scope=\"row\">\r\n                        <td>\r\n                        <span className=\"mb-0 text-sm\">\r\n                                {formatPrice(chargeback.value)}\r\n                              </span>\r\n                        </td>\r\n                      </th>\r\n                      <td>{format(parseISO(chargeback.createdAt), 'dd/MM/yyyy')}</td>\r\n                      <td>{format(parseISO(chargeback.due_date), 'dd/MM/yyyy')}</td>\r\n                      <td>\r\n                        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n                          <i className={chargeback.status ? \"bg-success\" : \"bg-warning\"} />\r\n                          {chargeback.status ? \"Pago\": \"Aguardando\"}\r\n                        </Badge>\r\n                      </td>\r\n{/*   \r\n                      <td className=\"text-right\">\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle\r\n                            className=\"btn-icon-only text-light\"\r\n                            href=\"#pablo\"\r\n                            role=\"button\"\r\n                            size=\"sm\"\r\n                            color=\"\"\r\n                            onClick={e => e.preventDefault()}\r\n                          >\r\n                            <i className=\"fas fa-ellipsis-v\" />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                            <DropdownItem\r\n                              onClick={(e) => e.preventDefault()}\r\n                            >\r\n                              Ver perfil\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              href=\"#pablo\"\r\n                              onClick={e => e.preventDefault()}\r\n                            >\r\n                              Another action\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              href=\"#pablo\"\r\n                              onClick={e => e.preventDefault()}\r\n                            >\r\n                              Something else here\r\n                            </DropdownItem>\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                      </td> */}\r\n                    </tr>\r\n                    ))} \r\n                </tbody>\r\n                </Table> \r\n              </CardBody>\r\n\r\n\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default ClientProfile;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\Clients.js",["229"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n// reactstrap components\r\nimport {\r\n  Badge,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardFooter,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  Media,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink,\r\n  Table,\r\n  Container,\r\n  Row,\r\n  CardBody\r\n} from \"reactstrap\";\r\n// core components\r\n\r\nimport { useUsers } from '../../hooks/users'\r\nimport { useGateway } from '../../hooks/getnet'\r\n\r\nimport Header from \"components/Headers/Header.js\";\r\n\r\nimport api from '../../services/api';\r\n\r\nfunction Clients() {\r\n  const gateway = useGateway()\r\n  const history = useHistory();\r\n  const { saveSelectedUserId } = useUsers();\r\n\r\n  const [clients, setClients] = useState([]);\r\n  const [filter, setFilter] = useState(1)\r\n\r\n\r\n  useEffect(() => {\r\n    async function loadingClients() {\r\n      const response = await api.get(`/user?filter=${filter}`);\r\n      setClients(response.data);\r\n    }\r\n    loadingClients();\r\n  }, [filter])\r\n\r\n  const handleProfile = useCallback((client) => {\r\n    saveSelectedUserId(client.id);\r\n    history.push('/admin/client-profile')\r\n  }, [history, saveSelectedUserId])\r\n\r\n  const handleCallback = async (document, type, index) => {\r\n    let { status, data } = await gateway.callback(document, type)\r\n    console.log(status);\r\n    if (status) {\r\n      let newArr = [...clients]\r\n      newArr[index].subseller.enabled = data.enabled\r\n      newArr[index].subseller.status = data.status\r\n      console.log(newArr[index]);\r\n      setClients(newArr)\r\n    }\r\n  }\r\n\r\n  const handleFilter = async (filter) => {\r\n    setFilter(filter)\r\n  }\r\n\r\n  const handleNewClient = useCallback(() => {\r\n    history.push(`/admin/client-register`)\r\n  }, [history])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        {/* Table */}\r\n        <Row>\r\n          <div className=\"col\">\r\n            <Card className=\"shadow\">\r\n              <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                <h3 className=\"mb-0\">Clientes</h3>\r\n                <div>\r\n                  <Button color='primary' onClick={handleNewClient}>Cadastrar</Button>\r\n                </div>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <div className=\"status d-flex \">\r\n                  <a className={`order-status order-status-paid`} href=\"#mon\" onClick={e => { e.preventDefault(); handleFilter(1) }} >\r\n                    <strong>Clientes Ativos</strong>\r\n                  </a>\r\n                  <a className={`order-status order-status-waiting_payment`} href=\"#anc\" onClick={e => { e.preventDefault(); handleFilter(2) }}>\r\n                    <strong>Clientes Aguardando Liberação</strong>\r\n                  </a>\r\n                  <a className={`order-status order-status-cancelled`} href=\"#mon\" onClick={e => { e.preventDefault(); handleFilter(3) }}>\r\n                    <strong>Clientes Cancelados</strong>\r\n                  </a>\r\n                </div>\r\n              </CardBody>\r\n              <Table className=\"align-items-center table-flush\" responsive>\r\n                <thead className=\"thead-light\">\r\n                  <tr>\r\n                    <th scope=\"col\">Empresa</th>\r\n                    <th scope=\"col\">Plano</th>\r\n                    <th scope=\"col\">Pagamento</th>\r\n                    <th scope=\"col\">Status</th>\r\n                    <th scope=\"col\" />\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {clients.map((client, index) => (\r\n                    <tr key={client.id}>\r\n                      <th scope=\"row\">\r\n                        <span className=\"mb-0 text-sm\">\r\n                          {client.name}\r\n                        </span>\r\n                      </th>\r\n                      <td>{client.plan ? client.plan.name : \"Sem Plano\"}</td>\r\n                      <td>\r\n                        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n                          <i className={client.paymentStatus === 'ok' ? \"bg-success\" : \"bg-warning\"} />\r\n                          {client.paymentStatus}\r\n                        </Badge>\r\n                      </td>\r\n\r\n                      <td>\r\n                        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n                          <i className={client.subseller.enabled === \"S\" ? \"bg-success\" : \"bg-warning\"} />\r\n                          {client.subseller.status}\r\n                        </Badge>\r\n                      </td>\r\n\r\n                      <td className=\"text-right\">\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle\r\n                            className=\"btn-icon-only text-light\"\r\n                            role=\"button\"\r\n                            size=\"sm\"\r\n                            color=\"\"\r\n                          >\r\n                            <i className=\"fas fa-ellipsis-v\" />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                            <DropdownItem\r\n                              onClick={() => handleProfile(client)}\r\n                            >\r\n                              Ver perfil\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              onClick={\r\n                                e => {\r\n                                  e.preventDefault()\r\n                                  handleCallback(client.document, client.type, index)\r\n                                }\r\n                              }\r\n                            >\r\n                              Atualizar Situação\r\n                            </DropdownItem>\r\n                            \r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                      </td>\r\n                    </tr>\r\n\r\n                  ))}\r\n\r\n                </tbody>\r\n              </Table>\r\n              <CardFooter className=\"py-4\">\r\n                <nav aria-label=\"...\">\r\n                  <Pagination\r\n                    className=\"pagination justify-content-end mb-0\"\r\n                    listClassName=\"justify-content-end mb-0\"\r\n                  >\r\n                    <PaginationItem className=\"disabled\">\r\n                      <PaginationLink\r\n                        href=\"#\"\r\n                        onClick={e => e.preventDefault()}\r\n                        tabIndex=\"-1\"\r\n                      >\r\n                        <i className=\"fas fa-angle-left\" />\r\n                        <span className=\"sr-only\">Previous</span>\r\n                      </PaginationLink>\r\n                    </PaginationItem>\r\n                    <PaginationItem className=\"active\">\r\n                      <PaginationLink\r\n                        href=\"#\"\r\n                        onClick={e => e.preventDefault()}\r\n                      >\r\n                        1\r\n                      </PaginationLink>\r\n                    </PaginationItem>\r\n                   \r\n                    <PaginationItem>\r\n                      <PaginationLink\r\n                        href=\"#\"\r\n                        onClick={e => e.preventDefault()}\r\n                      >\r\n                        <i className=\"fas fa-angle-right\" />\r\n                        <span className=\"sr-only\">Next</span>\r\n                      </PaginationLink>\r\n                    </PaginationItem>\r\n                  </Pagination>\r\n                </nav>\r\n              </CardFooter>\r\n            </Card>\r\n          </div>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default Clients;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\ClientRegister.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\Plans.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\PlanRegister.js",["230","231","232","233","234","235","236","237","238","239","240","241","242","243","244"],"\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { Button, Card, CardHeader, CardBody, FormGroup, Form, Input, Container, Row, Col, CardFooter, Table, Modal, ModalHeader, ModalBody, ModalFooter, Label, DropdownItem, DropdownMenu, DropdownToggle, UncontrolledDropdown } from \"reactstrap\";\r\n\r\n// core components\r\nimport UserHeader from \"components/Headers/Header\";\r\nimport { usePlans } from '../../hooks/plans'\r\n\r\n\r\nfunction PlanMonetizPaySettings(){\r\n\r\n  const { register, handleSubmit } = useForm()\r\n  const { savePlans } = usePlans();\r\n \r\n  \r\n\r\n  \r\n  const plainSubmit = async (data) => {\r\n    console.log(data);\r\n    await savePlans(data)\r\n  }\r\n\r\n\r\n  \r\n  return (\r\n    <>\r\n      <UserHeader />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <Col>\r\n            <Card className=\"shadow\">\r\n              <CardBody>\r\n                <Row className=\"justify-content-center\">\r\n                  <Col xs=\"12\" md=\"9\">\r\n                    <Card className=\"border-0\">\r\n                     \r\n                      <CardBody>\r\n                        <Row>\r\n                          <Col sm=\"3\">\r\n                            <h2>Planos</h2>\r\n                            <p>\r\n                              Cadastre planos,\r\n                              defina comissões e planos personalizados.\r\n                            </p>\r\n                          </Col>\r\n                          <Col sm=\"9\">\r\n                            <Card className=\"bg-secondary shadow\">                              \r\n                              <CardBody>\r\n                                <Form onSubmit={handleSubmit(plainSubmit)} id='form'>\r\n                                  <Row>\r\n                                    <Col>\r\n                                      <h6 className=\"heading-small text-muted mb-4\">Informações</h6>\r\n                                      <FormGroup>\r\n                                        <label className=\"form-control-label\" htmlFor=\"input-name\">\r\n                                          Nome\r\n                                          </label>\r\n                                        <Input\r\n                                          className=\"form-control-alternative\"\r\n                                          id=\"input-name\"\r\n                                          type=\"text\"\r\n                                          name=\"name\"\r\n                                          innerRef={register}\r\n                                        />\r\n                                      </FormGroup>\r\n                                    </Col>\r\n                                  </Row>\r\n                                  <Row>\r\n                                    <Col md=\"6\">\r\n                                      <label className=\"form-control-label\">\r\n                                        Status\r\n                                      </label>\r\n                                      <div className=\"d-flex mt-3\">\r\n\r\n                                        <FormGroup>\r\n                                          <label className=\"custom-toggle\">\r\n                                            <Input name=\"status\" type=\"checkbox\" innerRef={register} />\r\n                                            <span className=\"custom-toggle-slider rounded-circle\" />\r\n                                          </label>\r\n                                        </FormGroup>\r\n                                        <span className=\"pl-1\">Ativar Plano</span>\r\n                                      </div>\r\n                                    </Col>\r\n                                    <Col md=\"6\">\r\n                                      <label className=\"form-control-label\">\r\n                                        Tipo\r\n                                        </label>\r\n                                      <FormGroup>\r\n                                        <Input type=\"select\" name=\"type\" innerRef={register} >\r\n                                          <option value=\"PUBLIC\">Público</option>\r\n                                          <option value=\"EXCLUSIVE\">Personalizado</option>\r\n                                        </Input>\r\n                                      </FormGroup>\r\n                                    </Col>\r\n                                  </Row>\r\n                                  <Row>\r\n                                    <Col className='d-flex justify-content-center'>\r\n                                      <Button color=\"primary\" className='self-align-center' type='submit' form='form'>\r\n                                        Confirmar\r\n                                      </Button>\r\n                                    </Col>\r\n                                  </Row>\r\n                                </Form>\r\n                              </CardBody>\r\n                            </Card>                            \r\n                          </Col>\r\n                        </Row>\r\n                      </CardBody>\r\n                    </Card>\r\n                  </Col>\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default PlanMonetizPaySettings;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\PlanSettings.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\chargebacks\\ChargebackSettings.js",["245","246","247","248"],"\r\nimport React, { useState, useCallback, useEffect } from \"react\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Container,\r\n  Row,\r\n  Col,\r\n\r\n} from \"reactstrap\";\r\n\r\nimport { format, parseISO } from 'date-fns';\r\nimport { formatPrice } from '../../utils/format';\r\n\r\nimport { useChargebacks } from '../../hooks/chargebacks';\r\n// core components\r\nimport UserHeader from \"components/Headers/Header\";\r\nimport api from \"services/api\";\r\n\r\nfunction ChargebackSettings(){\r\n\r\n  const {getSelectedChargeback  } = useChargebacks();\r\n\r\n\r\n  const [client, setClient] = useState({});\r\n  const [chargeback, setChargeback] = useState({});\r\n\r\n  const [plans, setPlans] = useState([]);\r\n  const [planSelected, setPlanSelected] = useState(null);\r\n  const chargeback_id = getSelectedChargeback();\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    async function loadingData(){\r\n      const response = await api.get(`/chargebacks/show/${chargeback_id}`);\r\n\r\n\r\n    \r\n      setClient(response.data.user);\r\n      setChargeback(response.data);\r\n    }\r\n    loadingData();\r\n  },[chargeback_id])\r\n\r\n  const handleSubmit = useCallback((e) => {\r\n    e.preventDefault();\r\n\r\n    // const data = {\r\n    //   id:client.id,\r\n    //   name,\r\n    //   email,\r\n    //   cpf,\r\n    //   celular,\r\n    //   status,\r\n    //   plan_id: planSelected\r\n    // }\r\n    // updateUser(data)\r\n  },[])\r\n\r\n  return (\r\n    <>\r\n      <UserHeader />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <Col className=\"order-xl-1\" xl=\"12\">\r\n            <Card className=\"bg-secondary shadow\">\r\n              <CardHeader className=\"bg-white border-0\">\r\n                <Row className=\"align-items-center\">\r\n                  <Col xs=\"8\">\r\n                    <h3 className=\"mb-0\">Chargeback</h3>\r\n                  </Col>\r\n                </Row>\r\n              </CardHeader>\r\n              <CardBody>\r\n                {client && (\r\n                  <Form onSubmit={(e) => handleSubmit(e)} id=\"form\">\r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Informações do cliente\r\n                  </h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-username\"\r\n                          >\r\n                            Cliente\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-username\"\r\n                            value={client.name}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-email\"\r\n                          >\r\n                            E-mail\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-email\"\r\n                            value={client.email}\r\n                            type=\"email\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-first-name\"\r\n                          >\r\n                            CPF\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-first-name\"\r\n                            value={client.cpf}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-last-name\"\r\n                          >\r\n                            celular\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-last-name\"\r\n                            value={client.celular}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n\r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Informações do Chargeback\r\n                  </h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-username\"\r\n                          >\r\n                            Valor\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-username\"\r\n                            value={formatPrice(chargeback.value)}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-email\"\r\n                          >\r\n                            Status\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-email\"\r\n                            value={chargeback.status ? \"Pago\" : \"Inadimplente\"}\r\n                            type=\"email\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    { chargeback && chargeback.createdAt && (\r\n                      <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-first-name\"\r\n                          >\r\n                            Data requerido\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-first-name\"\r\n                            value={format(parseISO(chargeback.createdAt), 'dd/MM/yyyy')}\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-last-name\"\r\n                          >\r\n                            Data limite\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-last-name\"\r\n                            value={format(parseISO(chargeback.due_date), 'dd/MM/yyyy')}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    )}\r\n                  </div>\r\n\r\n                \r\n                </Form>\r\n                )}\r\n\r\n              <Col className='d-flex justify-content-center'>\r\n                    {\r\n                      client.status \r\n                      ? (                    \r\n                        <Button color=\"warning\" outline className='self-align-center' type='submit' form='form'>\r\n                          Bloquear Conta\r\n                        </Button>\r\n                      )\r\n                      : (                    \r\n                        <Button color=\"success\" outline className='self-align-center' type='submit' form='form'>\r\n                          Desbloquear Conta\r\n                        </Button>\r\n                      )\r\n                    }\r\n              </Col>\r\n              </CardBody>\r\n\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default ChargebackSettings;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\chargebacks\\Chargebacks.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\GroupsCreate.js",["249","250","251","252"],"import React, { useEffect, useState } from 'react'\r\nimport Header from \"components/Headers/Header.js\";\r\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, CustomInput, Form, FormGroup, Input, Label, Row, Table } from 'reactstrap';\r\nimport api from 'services/api';\r\nimport { useHistory } from 'react-router-dom';\r\nfunction GroupsCreate() {\r\n    const [resources, setResources] = useState([])\r\n    const [select, setSelect] = useState([])\r\n    const [allChecked, setAllChecked] = useState(false)\r\n    const [group, setGroup] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        let fetchResources = async () => {\r\n            api.get(\"/admin/resource\")\r\n                .then(result => {\r\n                    let data = result.data\r\n                    data.map(item => {\r\n                        setSelect(oldArray => [...oldArray, { id: item.id, isChecked: false }])\r\n                    })\r\n                    setResources(result.data)\r\n                })\r\n        }\r\n        fetchResources()\r\n\r\n    }, [])\r\n    \r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n       let data = {group:group, resources:select}\r\n       api.post(\"/admin/groups\",data)\r\n       .then(data=>{\r\n           console.log(data.data.id);\r\n           history.push(`user-group-update/${data.data.id}`)\r\n       })\r\n    }\r\n\r\n    const handleAllChecked = (event) => {\r\n        let allChecked = false\r\n        let array = select.map(item => {\r\n            return { ...item, isChecked: event.target.checked }\r\n        })\r\n        setAllChecked(event.target.checked)\r\n        setSelect(select => array)\r\n    }\r\n\r\n    const handleCheckChieldElement = (event) => {\r\n\r\n        let array = select.map(item => {\r\n            if (item.id === parseInt(event.target.value)) {\r\n                console.log(`item: ${item.id}`);\r\n                return { ...item, isChecked: event.target.checked }\r\n            }\r\n\r\n            return item\r\n        })\r\n        let slt = array.filter(obj => { return obj.isChecked === true })\r\n        if (slt.length === select.length) {\r\n            setAllChecked(true)\r\n        } else {\r\n            setAllChecked(false)\r\n        }\r\n        setSelect(array)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            {/* Page content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xs=\"12\" md=\"9\">\r\n                                        <Card className=\"border-0\">\r\n                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                <h3 className=\"mb-0\">Grupos</h3>\r\n                                            </CardHeader>\r\n                                            <CardBody>\r\n                                                <Row>\r\n                                                    <Col sm=\"4\">\r\n                                                        <h2>Grupos</h2>\r\n                                                        <p>\r\n                                                            Crie grupos de trabalho e gerencie as permissões de acesso de cada grupo.\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                    <Col sm=\"8\">\r\n                                                        <Card className=\"shadow\">\r\n                                                            <Form onSubmit={handleSubmit}>\r\n                                                                <CardBody>\r\n\r\n                                                                    <FormGroup className=\"border-bottom-1\">\r\n                                                                        <Label>Nome<span className=\"text-red\">*</span></Label>\r\n                                                                        <Input name=\"name\" id=\"name\" type=\"text\" required={true}  onChange={e=>setGroup(e.target.value)}/>\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <div className=\"custom-control custom-checkbox mb-3\">\r\n                                                                        <input\r\n                                                                            className=\"custom-control-input\"\r\n                                                                            id=\"checkAll\"\r\n                                                                            name=\"checkAll\"\r\n                                                                            type=\"checkbox\"\r\n                                                                            checked={allChecked}\r\n                                                                            onChange={handleAllChecked}\r\n                                                                        />\r\n                                                                        <label className=\"custom-control-label\" htmlFor=\"checkAll\">\r\n                                                                            Este grupo terá permissão total\r\n                                                                        </label>\r\n                                                                    </div>\r\n\r\n                                                                    <ul style={{ listStyleType: \"none\" }}>\r\n                                                                        {resources?.map(item => {\r\n                                                                            let slt = select.filter(obj => { return obj.id === item.id })\r\n                                                                            let checked = slt[0].isChecked ? \"checked\" : \"\"\r\n                                                                            return (\r\n                                                                                <li key={item.id}>\r\n                                                                                    <div className=\"custom-control custom-checkbox mb-3\">\r\n                                                                                        <input\r\n                                                                                            className=\"custom-control-input\"\r\n                                                                                            id={item.alias}\r\n                                                                                            name={item.name}\r\n                                                                                            type=\"checkbox\"\r\n                                                                                            checked={checked}\r\n                                                                                            onChange={handleCheckChieldElement}\r\n                                                                                            label={item.name}\r\n                                                                                            value={item.id}\r\n                                                                                        />\r\n                                                                                        <label className=\"custom-control-label\" htmlFor={item.alias}>\r\n                                                                                            {item.name}\r\n                                                                                        </label>\r\n                                                                                    </div>\r\n                                                                                </li>\r\n                                                                            )\r\n                                                                        })}\r\n                                                                    </ul>\r\n\r\n                                                                </CardBody>\r\n                                                                <CardFooter>\r\n                                                                <Button  type=\"reset\">Cancelar</Button>\r\n                                                                    <Button color=\"primary\" type=\"submit\">Salvar</Button>\r\n                                                                </CardFooter>\r\n                                                            </Form>\r\n\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </CardBody>\r\n\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default GroupsCreate","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Users.js",["253","254","255","256","257","258","259"],"import React, { useEffect, useState, useCallback } from 'react'\r\nimport Header from \"components/Headers/Header.js\";\r\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, Row, Table } from 'reactstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { Link } from 'react-router-dom';\r\nimport api from 'services/api';\r\n\r\nfunction Users() {\r\n    const [selectGroup, setSelectGroup] = useState([])\r\n    const [deleteGroup, setDeleteGroup] = useState(false)\r\n    const [groups, setGroups] = useState([])\r\n    const [delectedGroup, setDeletedG] = useState(false)\r\n\r\n    const [selectUser, setSelectUser] = useState([])\r\n    const [deleteUser, setDeleteUser] = useState(false)\r\n    const [users, setUsers] = useState([])\r\n\r\n    useEffect(() => {\r\n        if (selectGroup.length > 0) {\r\n            setDeleteGroup(true)\r\n        } else {\r\n            setDeleteGroup(false)\r\n        }\r\n    }, [selectGroup])\r\n    useEffect(() => {\r\n        let fetchGroups = async () => {\r\n            await api.get(\"/admin/groups\")\r\n                .then(result => {\r\n                    let data = result.data\r\n                    console.log(data);\r\n                    setGroups(data)\r\n                })\r\n        }\r\n        let fetchUsers = async () => {\r\n            await api.get(\"/admin/users\")\r\n                .then(result => {\r\n                    let data = result.data\r\n                    \r\n                    setUsers(result.data)\r\n                })\r\n        }\r\n        fetchGroups()\r\n        fetchUsers()\r\n\r\n    }, [delectedGroup])\r\n    const buttonEditGroup = (cell, row) => {\r\n        return (\r\n            <Link to={`user-group-update/${cell}`} className=\"btn btn-sm btn-primary\" color=\"primary\" >Editar</Link>\r\n        )\r\n    }\r\n    const collGroup = useCallback((id) => {\r\n        console.log(id);\r\n        let label = groups?.find(gr=>gr.id === id)\r\n        return (\r\n            label.name\r\n        )\r\n    },[groups])\r\n    const teste = [\"teste\",\"teste2\"]\r\n    const columnsGroups = [\r\n        {\r\n            dataField: 'name',\r\n            text: 'Nome'\r\n        },\r\n        {\r\n            dataField: 'id',\r\n            text: '',\r\n            formatter: buttonEditGroup\r\n        }];\r\n    const columnsUsers = [\r\n        {\r\n            dataField: 'id',\r\n            text: 'Id',\r\n            hidden: true\r\n        },\r\n        {\r\n            dataField: 'email',\r\n            text: 'Email'\r\n        },\r\n        {\r\n            dataField: 'groupId',\r\n            text: 'Grupo',\r\n            formatter: (cell, row) =>collGroup(cell)\r\n        },\r\n        {\r\n            dataField: 'action',\r\n            text: ''\r\n        }];\r\n\r\n    const selectRowGroups = {\r\n        mode: 'checkbox',\r\n        clickToSelect: true,\r\n        bgColor: '#fefce7',\r\n        onSelect: (row, isSelect, rowIndex, e) => {\r\n            if (isSelect) {\r\n                setSelectGroup(old => [...old, row.id])\r\n            } else {\r\n                setSelectGroup(selectGroup.filter(item => item !== row.id))\r\n            }\r\n        },\r\n        onSelectAll: (isSelect, rows, e) => {\r\n            if (isSelect) {\r\n                rows.map(row => {\r\n                    setSelectGroup(old => [...old, row.id])\r\n                })\r\n            } else {\r\n                setSelectGroup([])\r\n            }\r\n        },\r\n    };\r\n    const selectRowUsers = {\r\n        mode: 'checkbox',\r\n        clickToSelect: true,\r\n        bgColor: '#fefce7',\r\n        onSelect: (row, isSelect, rowIndex, e) => {\r\n            if (isSelect) {\r\n                setSelectUser(old => [...old, row.id])\r\n            } else {\r\n                setSelectUser(selectUser.filter(item => item !== row.id))\r\n            }\r\n        },\r\n        onSelectAll: (isSelect, rows, e) => {\r\n            if (isSelect) {\r\n                rows.map(row => {\r\n                    setSelectUser(old => [...old, row.id])\r\n                })\r\n            } else {\r\n                setSelectUser([])\r\n            }\r\n        },\r\n    };\r\n\r\n    const onDeleteGroups = (e) => {\r\n        e.preventDefault()\r\n        api.delete('/admin/group', { data: selectGroup })\r\n            .then((result) => {\r\n                let data = result.data\r\n                setDeletedG(false)\r\n                setSelectGroup(old=>[])\r\n                setDeleteGroup(false)\r\n\r\n            }).catch((err) => {\r\n                \r\n\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            {/* Page content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xs=\"12\" md=\"9\">\r\n                                        <Card className=\"border-0\">\r\n                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                <h3 className=\"mb-0\">Usuários</h3>\r\n                                            </CardHeader>\r\n                                            <CardBody>\r\n                                                <Row>\r\n                                                    <Col sm=\"4\">\r\n                                                        <h2>Grupos</h2>\r\n                                                        <p>\r\n                                                            Crie grupos de trabalho e gerencie as permissões de acesso de cada grupo.\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                    <Col sm=\"8\">\r\n                                                        <Card className=\"shadow\">\r\n                                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                                <p>Você tem {groups.length} grupos</p>\r\n                                                                <Link to=\"user-group\" className=\"btn btn-primary btn-sm\">+Novo grupo</Link>\r\n                                                            </CardHeader>\r\n                                                            <CardBody>\r\n                                                                <BootstrapTable\r\n                                                                    keyField='id'\r\n                                                                    data={[...groups]}\r\n                                                                    columns={columnsGroups}\r\n                                                                    selectRow={selectRowGroups}\r\n                                                                    bootstrap4={true}\r\n                                                                    bordered={false}\r\n                                                                />\r\n                                                            </CardBody>\r\n                                                            <CardFooter>\r\n                                                                <div><Button color=\"danger\" size=\"sm\" disabled={!deleteGroup} onClick={e=>onDeleteGroups(e)}> Excluir Selecionados</Button></div>\r\n                                                            </CardFooter>\r\n                                                        </Card>\r\n                                                        <Card className=\"shadow mt-3\">\r\n                                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                                <p>Você tem {users.length} usuários</p>\r\n                                                                <Link to=\"user-create\" className=\"btn btn-primary btn-sm\">+Novo Usuário</Link>\r\n                                                            </CardHeader>\r\n                                                            <CardBody>\r\n                                                                <BootstrapTable\r\n                                                                    keyField='id'\r\n                                                                    data={users}\r\n                                                                    columns={columnsUsers}\r\n                                                                    selectRow={selectRowUsers}\r\n                                                                    bootstrap4={true}\r\n                                                                    bordered={false}\r\n                                                                />\r\n                                                            </CardBody>\r\n                                                            <CardFooter>\r\n                                                                <div><Button color=\"danger\" size=\"sm\" disabled={!deleteUser} > Excluir Selecionados</Button></div>\r\n                                                            </CardFooter>\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </CardBody>\r\n\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default Users","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\GroupsUpdate.js",["260","261","262","263","264"],"import React, { useEffect, useState } from 'react'\r\nimport Header from \"components/Headers/Header\";\r\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, CustomInput, Form, FormGroup, Input, Label, Row, Table } from 'reactstrap';\r\nimport api from 'services/api';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nfunction GroupsUpdate() {\r\n    const [resources, setResources] = useState([])\r\n    const [select, setSelect] = useState([])\r\n    const [allChecked, setAllChecked] = useState(false)\r\n    const [group, setGroup] = useState(\"\")\r\n    const {id} = useParams()\r\n\r\n    useEffect(() => {\r\n        let groupResources = [] \r\n        let fetchGroup = async () => {\r\n            await api.get(`/admin/group?id=${id}`).then(e=>{\r\n                let data = e.data\r\n                groupResources = data.resources\r\n                setGroup(data.name)\r\n            })\r\n        }\r\n        fetchGroup()        \r\n        let fetchResources = async () => {\r\n            await api.get(\"/admin/resource\")\r\n                .then(result => {\r\n                    let data = result.data                    \r\n                    data.map(item => {\r\n                        let filter = groupResources.filter(obj => {                          \r\n                           return  obj.id === item.id\r\n                        })\r\n                        let checked = filter.length > 0\r\n                        setSelect(oldArray => [...oldArray, { id: item.id, isChecked: checked }])\r\n                    })\r\n                    setResources(result.data)\r\n                })\r\n        }\r\n        fetchResources()\r\n    }, [])\r\n    \r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n       let data = {group:group, resources:select}\r\n       api.post(`/admin/group?id=${id}`,data)\r\n       .then(data=>{\r\n           console.log(data.data);\r\n       })\r\n    }\r\n\r\n    const handleAllChecked = (event) => {\r\n        let allChecked = false\r\n        let array = select.map(item => {\r\n            return { ...item, isChecked: event.target.checked }\r\n        })\r\n        setAllChecked(event.target.checked)\r\n        setSelect(select => array)\r\n    }\r\n\r\n    const handleCheckChieldElement = (event) => {\r\n\r\n        let array = select.map(item => {\r\n            if (item.id === parseInt(event.target.value)) {\r\n                console.log(`item: ${item.id}`);\r\n                return { ...item, isChecked: event.target.checked }\r\n            }\r\n\r\n            return item\r\n        })\r\n        let slt = array.filter(obj => { return obj.isChecked === true })\r\n        if (slt.length === select.length) {\r\n            setAllChecked(true)\r\n        } else {\r\n            setAllChecked(false)\r\n        }\r\n        setSelect(array)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            {/* Page content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xs=\"12\" md=\"9\">\r\n                                        <Card className=\"border-0\">\r\n                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                <h3 className=\"mb-0\">Grupos</h3>\r\n                                            </CardHeader>\r\n                                            <CardBody>\r\n                                                <Row>\r\n                                                    <Col sm=\"4\">\r\n                                                        <h2>Grupos</h2>\r\n                                                        <p>\r\n                                                            Crie grupos de trabalho e gerencie as permissões de acesso de cada grupo.\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                    <Col sm=\"8\">\r\n                                                        <Card className=\"shadow\">\r\n                                                            <Form onSubmit={handleSubmit}>\r\n                                                                <CardBody>\r\n\r\n                                                                    <FormGroup className=\"border-bottom-1\">\r\n                                                                        <Label>Nome<span className=\"text-red\">*</span></Label>\r\n                                                                        <Input name=\"name\" id=\"name\" type=\"text\" defaultValue={group} required={true}  onChange={e=>setGroup(e.target.value)}/>\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <div className=\"custom-control custom-checkbox mb-3\">\r\n                                                                        <input\r\n                                                                            className=\"custom-control-input\"\r\n                                                                            id=\"checkAll\"\r\n                                                                            name=\"checkAll\"\r\n                                                                            type=\"checkbox\"\r\n                                                                            checked={allChecked}\r\n                                                                            onChange={handleAllChecked}\r\n                                                                        />\r\n                                                                        <label className=\"custom-control-label\" htmlFor=\"checkAll\">\r\n                                                                            Este grupo terá permissão total\r\n                                                                        </label>\r\n                                                                    </div>\r\n\r\n                                                                    <ul style={{ listStyleType: \"none\" }}>\r\n                                                                        {resources?.map(item => {\r\n                                                                            let slt = select.filter(obj => { return obj.id === item.id })\r\n                                                                            let checked = slt[0].isChecked ? \"checked\" : \"\"\r\n                                                                            return (\r\n                                                                                <li key={item.id}>\r\n                                                                                    <div className=\"custom-control custom-checkbox mb-3\">\r\n                                                                                        <input\r\n                                                                                            className=\"custom-control-input\"\r\n                                                                                            id={item.alias}\r\n                                                                                            name={item.name}\r\n                                                                                            type=\"checkbox\"\r\n                                                                                            checked={checked}\r\n                                                                                            onChange={handleCheckChieldElement}\r\n                                                                                            label={item.name}\r\n                                                                                            value={item.id}\r\n                                                                                        />\r\n                                                                                        <label className=\"custom-control-label\" htmlFor={item.alias}>\r\n                                                                                            {item.name}\r\n                                                                                        </label>\r\n                                                                                    </div>\r\n                                                                                </li>\r\n                                                                            )\r\n                                                                        })}\r\n                                                                    </ul>\r\n\r\n                                                                </CardBody>\r\n                                                                <CardFooter>\r\n                                                                <Button  type=\"reset\">Cancelar</Button>\r\n                                                                    <Button color=\"primary\" type=\"submit\">Salvar</Button>\r\n                                                                </CardFooter>\r\n                                                            </Form>\r\n\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </CardBody>\r\n\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default GroupsUpdate","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\UserCreate.js",["265","266","267","268","269","270"],"import React, { useEffect, useState } from 'react'\r\nimport Header from \"components/Headers/Header.js\";\r\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, CustomInput, Form, FormFeedback, FormGroup, Input, Label, Row, Table } from 'reactstrap';\r\nimport api from 'services/api';\r\nimport {useForm} from \"react-hook-form\"\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nconst UserCreate = () => {\r\n    const history = useHistory();\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [groups, setGroups] = useState()\r\n    useEffect(() => {\r\n        let fetchGroups = async () => {\r\n            await api.get(\"/admin/groups\")\r\n                .then(result => {\r\n                    let data = result.data\r\n                    setGroups(data)\r\n                })\r\n        }\r\n        fetchGroups()\r\n    }, [])\r\n\r\n    const onSubmit = async data => {\r\n        await api.post(\"/admin/user\",data)\r\n        .then((result) => {\r\n            console.log(result);\r\n            \r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Header />\r\n            {/* Page content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xs=\"12\" md=\"9\">\r\n                                        <Card className=\"border-0\">\r\n                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                <h3 className=\"mb-0\">Usuários</h3>\r\n                                            </CardHeader>\r\n                                            <CardBody>\r\n                                                <Row>\r\n                                                    <Col sm=\"4\">\r\n                                                        <h2>Grupos</h2>\r\n                                                        <p>\r\n                                                            Gerencie os usuários ativos\r\n                                                            e vincule-os em grupos de\r\n                                                            trabalho.\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                    <Col sm=\"8\">\r\n                                                        <Card className=\"shadow\">\r\n                                                            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                                                                <CardBody>                                                                \r\n                                                                    <FormGroup>\r\n                                                                        <Label>Email<span className=\"text-red\">*</span></Label>\r\n                                                                        <Input type=\"email\" name=\"email\" innerRef={register({ required: true })} />                                                                        \r\n                                                                    </FormGroup>\r\n                                                                    <FormGroup>\r\n                                                                        <Label>Grupo<span className=\"text-red\">*</span></Label>\r\n                                                                        <Input type=\"select\" name=\"groupid\" innerRef={register({ required: true })} >\r\n                                                                            {groups?.map(group => {\r\n                                                                                return(<option key={group.id} value={group.id}>{group.name}</option>)\r\n                                                                            })}\r\n                                                                        </Input>                                                                        \r\n                                                                    </FormGroup>\r\n                                                                </CardBody>\r\n                                                                <CardFooter>\r\n                                                                    <Button color=\"primary\" type=\"submit\">Salvar</Button>\r\n                                                                </CardFooter>\r\n                                                            </Form>\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </CardBody>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default UserCreate","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Login.js",["271"],"import React from \"react\";\r\nimport logo from \"assets/img/brand/logo.svg\"\r\nimport { useForm } from \"react-hook-form\"\r\n\r\nimport { useAuth } from \"hooks/auth\"\r\n\r\n\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  InputGroup,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\n\r\nconst Login = () => {\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const auth = useAuth()\r\n\r\n  const onSubmit = async(data) => {\r\n    auth.signIn(data)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Col lg=\"5\" md=\"7\">\r\n        <Card className=\"bg-secondary shadow border-0\">\r\n          <CardHeader className=\"bg-transparent pb-5\">\r\n            <div className=\"text-muted text-center mt-2 mb-3\">\r\n              <small>Login</small>\r\n            </div>\r\n            <div className=\"btn-wrapper text-center\">\r\n              <img className=\"logo\" style={{ maxWidth: \"200px\" }} src={logo} alt=\"Monetiz Pay\" />\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody className=\"px-lg-5 py-lg-5\">\r\n            <div className=\"text-center text-muted mb-4\">\r\n              <small>Digite seu Email e Senha</small>\r\n            </div>\r\n            <Form role=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n              <FormGroup className=\"mb-3\">\r\n                <InputGroup className=\"input-group-alternative\">\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <InputGroupText>\r\n                      <i className=\"ni ni-email-83\" />\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input placeholder=\"Email\" type=\"email\" name=\"email\" innerRef={register} />\r\n                </InputGroup>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <InputGroup className=\"input-group-alternative\">\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <InputGroupText>\r\n                      <i className=\"ni ni-lock-circle-open\" />\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input placeholder=\"Password\" type=\"password\" name=\"password\" innerRef={register} />\r\n                </InputGroup>\r\n              </FormGroup>\r\n              <div className=\"text-center\">\r\n                <Button className=\"my-4\" color=\"primary\" type=\"submit\">\r\n                  Login\r\n                  </Button>\r\n              </div>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n        <Row className=\"mt-3\">\r\n          <Col xs=\"6\">\r\n            <a\r\n              className=\"text-light\"\r\n              href=\"/auth/reset-password\"\r\n            >\r\n              <small>Esqueceu a Senha?</small>\r\n            </a>\r\n          </Col>\r\n\r\n        </Row>\r\n      </Col>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\ResetPassword.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Register.js",["272"],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport api from 'services/api';\r\nimport { useForm } from \"react-hook-form\"\r\nimport { cpf } from \"cpf-cnpj-validator\"\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\n\r\n// reactstrap components\r\nimport { Button, Card, CardHeader, CardBody, FormGroup, Form, Input, InputGroupAddon, InputGroupText, InputGroup, Row, Col, FormFeedback } from \"reactstrap\";\r\n\r\nimport logo from \"assets/img/brand/logo.svg\"\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\nconst schema = Yup.object().shape({\r\n  name: Yup.string().required(\"Nome é um campo obrigatório.\").min(8),\r\n  cpf: Yup.string().test('Valida CPF', 'CPF Inválido', value => cpf.isValid(value)),\r\n  mobile: Yup.string().min(11).required(\"Telefone é um campo obrigatório.\"),\r\n  password: Yup.string().min(8).required('Password é um campo obrigatório'),\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n});\r\nconst Register = () => {\r\n  const { register, handleSubmit, errors } = useForm({ resolver: yupResolver(schema) });\r\n  const history = useHistory()\r\n  const query = useQuery();\r\n  const invitationToken = query.get(\"invitation_token\");\r\n  const [isValid, setIsValid] = useState();\r\n  const [decodeToken, setDecodeToken] = useState()\r\n\r\n  useEffect(() => {\r\n    let validateToken = async () => {\r\n      api.defaults.headers.authorization = `Bearer ${invitationToken}`;\r\n      await api.post(\"/session/validate-invitation\", { token: invitationToken })\r\n        .then(result => {\r\n          let data = result.data\r\n          setIsValid(data.validate)\r\n          setDecodeToken(data.decoded)\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n    validateToken()\r\n  }, [invitationToken])\r\n\r\n  const onSubmit = async (data) => {\r\n    api.defaults.headers.authorization = `Bearer ${invitationToken}`;\r\n    await api.post(\"/session/register\", data)\r\n      .then(result => {\r\n        history.push('/auth/login')\r\n      })\r\n      .catch(err => console.log(err))\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Col lg=\"6\" md=\"8\">\r\n        <Card className=\"bg-secondary shadow border-0\">\r\n          <CardHeader className=\"bg-transparent pb-3\">\r\n            <div className=\"text-center\">\r\n              <img className=\"logo\" style={{ maxWidth: \"200px\" }} src={logo} alt=\"Monetiz Pay\" />\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody className=\"px-lg-5 py-lg-5\">\r\n            <div className=\"text-center text-muted mb-4\">\r\n              <h2>Criar Conta</h2>\r\n            </div>\r\n            {isValid &&\r\n              <Form role=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-email-83\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Email\" type=\"email\" autoComplete=\"new-email\" innerRef={register} defaultValue={decodeToken?.email} disabled={true} name=\"email\" />\r\n                  </InputGroup>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-hat-3\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Nome\" type=\"text\" name=\"name\" innerRef={register} invalid={errors.name ? true : false} />\r\n                    <FormFeedback invalid=\"\" className=\"pl-2\">{errors.name?.message}</FormFeedback>\r\n                  </InputGroup>\r\n\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-paper-diploma\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"CPF\" type=\"text\" name=\"cpf\" innerRef={register} invalid={errors.cpf ? true : false} />\r\n                    <FormFeedback invalid=\"\">{errors.cpf?.message}</FormFeedback>\r\n                  </InputGroup>\r\n\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"fas fa-mobile\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Celular\" type=\"text\" name=\"mobile\" innerRef={register} invalid={errors.mobile ? true : false} />\r\n                    <FormFeedback invalid=\"\">{errors.mobile?.message}</FormFeedback>\r\n                  </InputGroup>\r\n\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-lock-circle-open\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Senha\" type=\"password\" name=\"password\" innerRef={register} invalid={errors.password ? true : false} />\r\n                    <FormFeedback invalid=\"\">{errors.password?.message}</FormFeedback>\r\n                  </InputGroup>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-lock-circle-open\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Repetir Senha\" type=\"password\" name=\"confirmPassword\" invalid={errors.confirmPassword ? true : false} innerRef={register} />\r\n                    <FormFeedback invalid=\"\">{errors.confirmPassword?.message}</FormFeedback>\r\n                  </InputGroup>\r\n\r\n                </FormGroup>\r\n\r\n                <div className=\"text-center\">\r\n                  <Button className=\"mt-4\" color=\"primary\" type=\"submit\">\r\n                    Criar Conta\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            }\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\RePassword.js",["273"],"import React, { useState, useEffect } from \"react\";\nimport Lottie from \"react-lottie\";\nimport * as Loading from \"assets/custom/loading-white.json\"\nimport { useForm } from \"react-hook-form\";\nimport logo from \"assets/img/brand/logo.svg\"\n\n// reactstrap components\nimport {\n    Button,\n    Card,\n    CardBody,\n    FormGroup,\n    Form,\n    Input,\n    Row,\n    Col,\n    FormFeedback\n} from \"reactstrap\";\nimport { useAuth } from \"hooks/auth\"\nimport { Link, Redirect, useLocation } from \"react-router-dom\";\n\n\nconst defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: Loading.default,\n    rendererSettings: {\n        preserveAspectRatio: \"xMidYMid slice\"\n    }\n}\n\nexport default function RePassword() {\n    const auth = useAuth()\n    const { register, handleSubmit, watch, errors } = useForm()\n    const query = new URLSearchParams(useLocation().search);\n    const token = query.get(\"t\")\n    const [isLoading, setIsLoading] = useState(false)\n    const [user, setUser] = useState({})\n    const [toLogin, setToLogin] = useState(false)\n    const [send, setSend] = useState(false)\n\n    useEffect(() => {\n        let fetchData = async () => {            \n            setIsLoading(true)\n            let verify = await auth.verifyToken(token)\n            console.log(verify);\n            if (verify) {\n                setUser(verify)\n                setToLogin(false)\n\n            } else {\n                setToLogin(true)\n            }\n            setIsLoading(false)\n        }\n        fetchData()\n\n    }, [token,auth])\n\n    const onSubmit = async (data) => {\n        data.passwordConfirm = data.passwordconfirm\n        setIsLoading(true)\n        let sendSubmit = await auth.sendNewPassword(token, data)\n        if (sendSubmit) {\n            setSend(true)\n            setIsLoading(false)\n        }\n    }\n\n    if (toLogin) {\n        return <Redirect to=\"/auth/login\" />\n    }\n    if (isLoading) {\n        return <div className=\"loading\"><Lottie options={defaultOptions} height={120} width={120} /> </div>\n    }\n\n    if (send) {\n        return (\n            <Col lg=\"5\" md=\"7\">\n                <Card className=\"bg-secondary shadow border-1\" style={{ minHeight: \"auto\" }}>\n                    <CardBody className=\"px-lg-5 py-lg-5\">\n                        <div className=\"text-center mt-4\">\n                            <h1 className=\"h2\">Perfeito!</h1>\n                            <p className=\"lead\">Você redefiniu sua senha de acesso ao Converte.me. Volte para o Login para acessar sua conta.</p>\n                            <div className=\"text-center mt-3\">\n                                <a href=\"/auth/login\" className=\"btn btn-lg btn-primary\" title=\"Clique aqui para acessar sua conta\">Voltar para o login</a>\n                            </div>\n                        </div>\n                    </CardBody>\n                </Card>\n            </Col>\n        )\n    }\n\n    return (\n        <>\n            <Col lg=\"5\" md=\"7\">\n                <Card className=\"bg-secondary shadow border-1\" style={{ minHeight: \"auto\" }}>\n\n                    <CardBody className=\"px-lg-5 py-lg-5\">\n                        <div className=\"p-2 text-center\">\n                            <img alt=\"...\" src={logo} style={{ maxWidth: '80%' }} />\n                        </div>\n                        <div className=\"text-center h3 mb-4\">\n                            <small>Informe uma nova senha de acesso à sua conta.</small>\n                        </div>\n\n                        <Form role=\"form\" onSubmit={handleSubmit(onSubmit)}>\n                            <FormGroup className=\"mb-3\">\n                                <Input\n                                    placeholder=\"Nova senha\"\n                                    type=\"password\"\n                                    name=\"password\"\n                                    invalid={errors.password ? true : false}\n                                    innerRef={register({ required: \"Senha Requerida\", minLength: { value: 8, message: \"A senha deve ter no mínimo 8 caracteres\" } })}\n                                />\n                                <FormFeedback invalid=\"\">{errors.password?.message}</FormFeedback>\n                            </FormGroup>\n                            <FormGroup className=\"mb-3\">\n                                <Input\n                                    placeholder=\"Repita a nova senha\"\n                                    type=\"password\"\n                                    name=\"passwordconfirm\"\n                                    invalid={errors.passwordconfirm ? true : false}\n                                    innerRef={register({ validate: (value) => value === watch('password') || \"As senhas devem ser iguais\" })}\n                                />\n                                <FormFeedback invalid=\"\">{errors.passwordconfirm?.message}</FormFeedback>\n                            </FormGroup>\n                            <div className=\"text-center\">\n                                <Button block className=\"my-4\" color=\"primary\" type=\"submit\">\n                                    Recuperar\n                                </Button>\n                            </div>\n                        </Form>\n                    </CardBody>\n                </Card>\n                <Row className=\"mt-3\">\n                    <Col xs=\"12\">\n                        <Link className=\"text-light\" to=\"/auth/login\" >\n                            <small>Voltar para o Login</small>\n                        </Link>\n                    </Col>\n\n                </Row>\n            </Col>\n        </>\n    )\n\n\n}\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\format.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\FormateUtils.js",["274","275","276"],"import React from 'react'\r\nimport { func } from 'prop-types';\r\nexport function formatCPF(cpf) {\r\n    cpf = cpf.replace(/[^\\d]/g, \"\");\r\n    return cpf.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\");\r\n}\r\nexport function formatCNPJ(value) {\r\n    let x = value.replace(/[^\\d]/g, \"\").match(/(\\d{0,2})(\\d{0,3})(\\d{0,3})(\\d{0,4})(\\d{0,2})/);\r\n    return !x[2] ? x[1] : x[1] + '.' + x[2] + '.' + x[3] + '/' + x[4] + (x[5] ? '-' + x[5] : '');\r\n}\r\n\r\nexport function formatPhone(v) {\r\n    v = v.replace(/\\D/g, \"\");             //Remove tudo o que não é dígito\r\n    v = v.replace(/^(\\d{2})(\\d)/g, \"($1) $2\"); //Coloca parênteses em volta dos dois primeiros dígitos\r\n    v = v.replace(/(\\d)(\\d{4})$/, \"$1-$2\");    //Coloca hífen entre o quarto e o quinto dígitos\r\n    return v;\r\n}\r\n\r\nexport function formatarCEP(str) {\r\n    var re = /^([\\d]{2})\\.*([\\d]{3})-*([\\d]{3})/;\r\n\r\n    if (re.test(str)) {\r\n        return str.replace(re, \"$1.$2-$3\");\r\n    } else {\r\n        alert(\"CEP inválido!\");\r\n    }\r\n\r\n    return \"\";\r\n}\r\nexport function formatCurrency(value) {\r\n    let formatter = new Intl.NumberFormat('pt-BR', {\r\n        style: 'currency',\r\n        currency: 'BRL'\r\n    });\r\n\r\n    let formatted = formatter.format(value);\r\n    return formatted\r\n}\r\nexport function formatPercentage(value) {\r\n    let v = value / 100\r\n    v = v.toLocaleString('pt-BR', {\r\n        style: 'percent',\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n    })\r\n    \r\n    return v\r\n}\r\n\r\n\r\nexport function formatDate(date) {\r\n    let ds = new Date(date)\r\n    let options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: \"2-digit\", minute: \"2-digit\" };\r\n    let dtFmt = ds.toLocaleString(\"pt-BR\", options)\r\n    return dtFmt\r\n}\r\n\r\nfunction formatReal(int) {\r\n    var tmp = int + '';\r\n    tmp = tmp.replace(/([0-9]{2})$/g, \",$1\");\r\n    if (tmp.length > 6)\r\n        tmp = tmp.replace(/([0-9]{3}),([0-9]{2}$)/g, \".$1,$2\");\r\n\r\n    return tmp;\r\n}","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Headers\\Header.js",["277","278"],"\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// reactstrap components\r\nimport { Card, CardBody, CardTitle, Container, Row, Col } from \"reactstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCreditCard, faBarcode, faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nfunction Header() {\r\n\r\n  const [openChargebacks, setOpenChargebacks] = useState(0);\r\n\r\n  \r\n\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"header bg-gradient-info pb-8 pt-5 pt-md-8\">\r\n        <Container fluid>\r\n          <div className=\"header-body\">\r\n            {/* Card stats */}\r\n            <Row>\r\n              <Col lg=\"6\" xl=\"3\">\r\n                <Card className=\"card-stats mb-4 mb-xl-0\">\r\n                  <CardBody>\r\n                    <Row>\r\n                      <div className=\"col\">\r\n                        <CardTitle\r\n                          tag=\"h5\"\r\n                          className=\"text-uppercase text-muted mb-0\"\r\n                        >\r\n                          Faturamento\r\n                        </CardTitle>\r\n                        <span className=\"h2 font-weight-bold mb-0\">\r\n                          0\r\n                        </span>\r\n                      </div>\r\n                      <Col className=\"col-auto\">\r\n                        <div className=\"icon icon-shape bg-danger text-white rounded-circle shadow\">\r\n                          <i className=\"fas fa-chart-bar\" />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <p className=\"mt-3 mb-0 text-muted text-sm\">\r\n                      <span className=\"text-success mr-2\">\r\n                        <i className=\"fa fa-arrow-up\" /> 0%\r\n                      </span>{\" \"}\r\n                      <span className=\"text-nowrap\">Últimos 30 dias</span>\r\n                    </p>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              <Col lg=\"6\" xl=\"3\">\r\n                <Card className=\"card-stats mb-4 mb-xl-0\">\r\n                  <CardBody>\r\n                    <Row>\r\n                      <div className=\"col\">\r\n                        <CardTitle\r\n                          tag=\"h5\"\r\n                          className=\"text-uppercase text-muted mb-0\"\r\n                        >\r\n                          Boleto\r\n                        </CardTitle>\r\n                        <span className=\"h2 font-weight-bold mb-0\">\r\n                          0\r\n                        </span>\r\n                      </div>\r\n                      <Col className=\"col-auto\">\r\n                        <div className=\"icon icon-shape bg-warning text-white rounded-circle shadow\">\r\n                          <FontAwesomeIcon icon={faBarcode} />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <p className=\"mt-3 mb-0 text-muted text-sm\">\r\n                      <span className=\"text-danger mr-2\">\r\n                        <i className=\"fas fa-arrow-down\" /> 0%\r\n                      </span>{\" \"}\r\n                      <span className=\"text-nowrap\">Últimos 30 dias</span>\r\n                    </p>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              <Col lg=\"6\" xl=\"3\">\r\n                <Card className=\"card-stats mb-4 mb-xl-0\">\r\n                  <CardBody>\r\n                    <Row>\r\n                      <div className=\"col\">\r\n                        <CardTitle\r\n                          tag=\"h5\"\r\n                          className=\"text-uppercase text-muted mb-0\"\r\n                        >\r\n                          C. de Crédito\r\n                        </CardTitle>\r\n                        <span className=\"h2 font-weight-bold mb-0\">0</span>\r\n                      </div>\r\n                      <Col className=\"col-auto\">\r\n                        <div className=\"icon icon-shape bg-yellow text-white rounded-circle shadow\">\r\n                          <FontAwesomeIcon icon={faCreditCard} />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <p className=\"mt-3 mb-0 text-muted text-sm\">\r\n                      <span className=\"text-warning mr-2\">\r\n                        <i className=\"fas fa-arrow-down\" /> 0%\r\n                      </span>{\" \"}\r\n                      <span className=\"text-nowrap\">Últimos 30 dias</span>\r\n                    </p>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              <Col lg=\"6\" xl=\"3\">\r\n                <Card className=\"card-stats mb-4 mb-xl-0\">\r\n                  <CardBody>\r\n                    <Row>\r\n                      <div className=\"col\">\r\n                        <CardTitle\r\n                          tag=\"h5\"\r\n                          className=\"text-uppercase text-muted mb-0\"\r\n                        >\r\n                          Chargeback\r\n                        </CardTitle>\r\n                        <span className=\"h2 font-weight-bold mb-0\">\r\n                          {openChargebacks}\r\n                        </span>\r\n                      </div>\r\n                      <Col className=\"col-auto\">\r\n                        <div className=\"icon icon-shape bg-info text-white rounded-circle shadow\">\r\n                          <FontAwesomeIcon icon={faExchangeAlt} />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    {<p className=\"mt-3 mb-0 text-muted text-sm\">\r\n                      <span className=\"text-success mr-2\">\r\n                        <i className=\"fas fa-arrow-up\" /> 0%\r\n                      </span>{\" \"}\r\n                      <span className=\"text-nowrap\">Últimos 30 dias</span>\r\n                    </p>}\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\Alert.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\variables\\charts.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Plans\\EditTable.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\masks.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\billings.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\statements\\Statement.js",["279"],"import React, { useState, useEffect } from \"react\";\nimport { NavLink, Card, Container, Row, CardBody } from \"reactstrap\";\nimport Header from \"components/Headers/HeaderClear\";\nimport { statement, refused } from \"../../hooks/billings\"\nimport moment from \"moment\"\nimport DatetimeRangePicker from 'react-datetime-range-picker';\n\nimport Col from \"reactstrap/lib/Col\";\nimport Nav from \"reactstrap/lib/Nav\";\nimport NavItem from \"reactstrap/lib/NavItem\";\nimport classnames from 'classnames';\nimport TabContent from \"reactstrap/lib/TabContent\";\nimport TabPane from \"reactstrap/lib/TabPane\";\nimport TableTransactions from \"components/Statements/TableTransactions\"\nimport TableRefuseds from \"components/Statements/TableRefuseds\";\n\n\nconst Statement = () => {\n    const [activeTable, setActiveTable] = useState(1)\n    const [transactions, setTransations] = useState([])\n    const [orders, setOrders] = useState([])\n    const [refuseds, setRefuseds] = useState([])\n    const [comissions, setComissions] = useState([])\n    const [chargebacks, setChargebacks] = useState([])\n    const [init, setInit] = useState(moment().clone().startOf('month').format())\n    const [end, setEnd] = useState(moment().format())\n\n    useEffect(() => {\n        async function loadingData() {\n            let statements = await statement({ init: init, end: end })\n            let refuseds = await refused({ init: init, end: end })\n            setRefuseds(refuseds.orders)\n            setTransations(statements.transactions.list_transactions)\n            setComissions(statements.transactions.commission)\n            setChargebacks(statements.transactions.chargeback)\n            setOrders(statements.orders)\n        }\n        loadingData();\n    }, [init, end])\n    const setRange = (e) => {\n        setInit(moment(e.start).format());\n        setEnd(moment(e.end).format())\n    }\n    return (\n        <>\n            <Header />\n            {/* Page content */}\n            <Container className=\"mt--7\" fluid>\n                <Row className=\"justify-content-md-center pt-8\">\n                    <Col sm=\"11\" className=\"bg-transparent  card p-4\" style={{ border: \"none\" }}>\n                        <Row >\n                            <Col sm=\"12\">\n\n                                <Nav className=\"order-tab\" tabs style={{ borderBottom: 0 }}>\n                                    <NavItem>\n                                        <NavLink\n                                            className={classnames({ active: activeTable === 1 })}\n                                            onClick={() => { setActiveTable(1); }}>\n                                            Transações\n                                        </NavLink>\n                                    </NavItem>\n                                    <NavItem>\n                                        <NavLink\n                                            className={classnames({ active: activeTable === 2 })}\n                                            onClick={() => { setActiveTable(2); }}>\n                                            Comissões\n                                        </NavLink>\n                                    </NavItem>\n                                    <NavItem>\n                                        <NavLink\n                                            className={classnames({ active: activeTable === 3 })}\n                                            onClick={() => { setActiveTable(3); }}>\n                                            Transações Negadas\n                                        </NavLink>\n                                    </NavItem>\n                                </Nav>\n                            </Col>\n                        </Row>\n                        <TabContent activeTab={activeTable}>\n                            <TabPane tabId={1}>\n                                <Row>\n                                    <Col>\n                                        <Card style={{ border: \"0\", boxShadow: \"none\" }}>\n                                            <CardBody>\n                                                <Row>\n                                                    <Col>\n                                                        <Row>\n                                                            <Col xs=\"6\">\n                                                                <DatetimeRangePicker className=\"d-flex\" inline={true} startDate={init} endDate={end} locale=\"pt-br\" pickerClassName=\"col-6\" onChange={setRange} />\n                                                            </Col>\n                                                        </Row>\n                                                        <TableTransactions transactions={transactions} orders={orders} comissions={comissions} />\n                                                    </Col>\n                                                </Row>\n                                            </CardBody>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </TabPane>\n                            <TabPane tabId={2}>Comissões</TabPane>\n                            <TabPane tabId={3}>\n                                <Row>\n                                    <Col>\n                                        <Card style={{ border: \"0\", boxShadow: \"none\" }}>\n                                            <CardBody>\n                                                <Row>\n                                                    <Col>\n                                                    {refuseds&&<TableRefuseds orders={refuseds} />}\n                                                    </Col>\n                                                </Row>\n                                            </CardBody>\n                                        </Card>\n                                    </Col>\n                                </Row>\n\n                            </TabPane>\n                        </TabContent>\n                    </Col>\n\n                </Row>\n            </Container>\n        </>\n    )\n}\n\nexport default Statement","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Headers\\HeaderClear.js",["280","281"],"\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// reactstrap components\r\nimport { Container,  } from \"reactstrap\";\r\nfunction Header() {\r\n\r\n\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"header bg-gradient-info pt-5 pt-md-6\">\r\n        <Container fluid>\r\n          \r\n          \r\n        </Container>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Statements\\TableTransactions.js",["282"],"import React, { useState, useEffect } from 'react'\nimport 'fontsource-roboto';\nimport MUIDataTable, { ExpandButton } from 'mui-datatables'\nimport { createMuiTheme, MuiThemeProvider } from '@material-ui/core/styles';\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Table from 'reactstrap/lib/Table';\nimport moment from 'moment'\nimport 'moment/locale/pt-br'\nimport { Modal, ModalHeader, ModalFooter, ModalBody, Button } from 'reactstrap';\nimport { formatCNPJ } from 'utils/FormateUtils';\nimport { formatCurrency } from 'utils/FormateUtils';\nimport api from 'services/api';\nimport Row from 'reactstrap/lib/Row';\nimport Col from 'reactstrap/lib/Col';\nimport { formatCPF } from 'utils/FormateUtils';\n\nconst TableTranctions = (props) => {\n    const [summary, setSummary] = useState()\n    const [single, setSingle] = useState()\n    const [modal, setModal] = useState(false);\n    useEffect(() => {\n        function getSumary() {\n            let data = props.transactions\n            let orders = props.orders\n            let arraySum = []\n            data?.forEach((value) => {\n                let sum = value.summary\n                sum.details = value.details\n                arraySum.push(sum)\n            })\n            setSummary(arraySum)\n        }\n        getSumary()\n    }, [props])\n    const toggle = () => setModal(!modal);\n    const getDetails = async (order) => {\n        const result = summary.find(t => t.order_id === order)\n        const details = result.details\n        //console.log(result)\n        api.get(`/getnet/find-transaction/${result.order_id}`)\n            .then((res) => {\n                setSingle({\n                    gn: result,\n                    dt: details,\n                    bd: res.data\n                })\n                toggle()\n            }).catch((err) => {\n\n            });\n    }\n\n\n\n    const TransactionsType = [\"Crédito à vista\", \"Crédito Parcelado\", \"Crédito Parcelamento Administradora\", \"Débito,\", \"Cancelamento\", \"Chargeback\", \"Boleto\"]\n    const TransactionsStatus = [{ id: 0, status: \"Aprovado\" }, { id: 70, status: \"Aguardando\" }, { id: 77, status: \"Pendente\" }, { id: 78, status: \"Pendente de Pagamento\" }, { id: 83, status: \"Timeout\" },\n    { id: 90, status: \"Inexistente\" }, { id: 91, status: \"Negado Administradora\" }, { id: 92, status: \"Estornada\" }, { id: 93, status: \"Repetida\" }, { id: 94, status: \"Estornada Conciliação\" }, { id: 98, status: \"Cancelada - Sem Confirmação\" }, { id: 99, status: \"Negado - MGM\" },]\n\n    const getMuiTheme = () => createMuiTheme({\n        shadows: Array(25).fill('none'),\n        overrides: {\n            MUIDataTableSelectCell: {\n                expandDisabled: {\n                    // Soft hide the button.\n                    visibility: 'hidden',\n                },\n            },\n            MUIDataTableBodyRow: {\n                root: {\n                    '&:nth-child(odd)': {\n                        backgroundColor: '#f6f8fa'\n                    }\n                }\n            },\n            MUIDataTableBodyCell: {\n                root: {\n                    padding: \"5px\"\n                },\n            },\n            MUIDataTableHeadRow: {\n                root: {\n                    backgroundColor: \"#FF0000\",\n                }\n            },\n            MUIDataTableHeadCell: {\n                fixedHeader: {\n                    backgroundColor: \"#FF0000\",\n                    padding: \"5px\"\n                },\n                data: {\n                    color: \"#ffffff\",\n                    fontWeight: \"bold\"\n                }\n            }\n        }\n    })\n    const options = {\n        filter: true,\n        filterType: \"dropdown\",\n        pagination: true,\n        rowsPerPage: 20,\n        download: true,\n        print: true,\n        sort: true,\n        search: true,\n        viewColumns: false,\n        selectableRows: \"none\",\n        textLabels: {\n            body: {\n                noMatch: \"Nenhum registro encontrado\"\n            }\n        },\n        expandableRows: false,\n        expandableRowsHeader: false,\n        expandableRowsOnClick: false,\n        isRowExpandable: (dataIndex, expandedRows) => {\n            if (dataIndex === 3 || dataIndex === 4) return false;\n            if (expandedRows.data.length > 4 && expandedRows.data.filter(d => d.dataIndex === dataIndex).length === 0) return false;\n            return true;\n        },\n        renderExpandableRow: (rowData, rowMeta) => {\n            const colSpan = rowData.length + 1;\n            return (\n                <TableRow>\n                    <TableCell colSpan={colSpan}>\n                        Para utilizar este domínio no seu checkout, adicione o registro DNS abaixo no serviço em que você registrou o seu domínio\n                    <div style={{ backgroundColor: \"#e7fee8\", borderLeftColor: \"#07ab0e\", borderLeftWidth: \"3px\" }}>\n                            <Table>\n                                <tbody>\n                                    <tr><td><strong>TIPO:</strong></td><td>CNAME</td></tr>\n                                    <tr><td><strong>NOME:</strong></td><td>seguro</td></tr>\n                                    <tr><td><strong>DESTINO:</strong></td><td>cname.vercel-dns.com</td></tr>\n                                </tbody>\n                            </Table>\n                        </div>\n                    </TableCell>\n                </TableRow>\n            );\n        },\n        onRowExpansionChange: (curExpanded, allExpanded, rowsExpanded) => console.log(curExpanded, allExpanded, rowsExpanded),\n    }\n    const dataCols = [\n\n        {\n            label: \"Pedido\",\n            name: \"order_id\",\n            options: {\n                filter: false,\n            }\n        },        \n        {\n            label: \"Subseller\",\n            name: \"marketplace_subsellerid\",\n            options: {\n                filter: true,\n            }\n        },\n        {\n            label: \"Tipo de Transação\",\n            name: \"transaction_type\",\n            options: {\n                filter: true,\n                customBodyRender: (value) => (<>{TransactionsType[value - 1]}</>)\n            }\n        },\n        {\n            label: \"Valor\",\n            name: \"card_payment_amount\",\n            options: {\n                filter: false,\n                customBodyRender: (value) => (<>{formatCurrency(value / 100)}</>)\n            }\n        },\n        {\n            label: \"Status\",\n            name: \"transaction_status_code\",\n            options: {\n                filter: true,\n                customBodyRender: (value) => {\n                    let status = TransactionsStatus.find(i => i.id === value)\n                    return (<>{status.status}</>)\n                }\n            }\n        },\n        {\n            label: \"Data da Transação\",\n            name: \"transaction_date\",\n            options: {\n                filter: true,\n                customBodyRender: (value) => {\n\n                    return (<>{moment(value).format(\"DD/MM/YY HH:MM:SS\")}</>)\n                }\n            }\n        },\n        {\n            label: \"Ver\",\n            name: \"order_id\",\n            options: {\n                filter: false,\n                customBodyRender: (value) => (\n                    <Button size=\"sm\" color=\"primary\" onClick={() => getDetails(value)} >\n                        Detalhes\n                    </Button >\n                )\n            }\n        },\n\n    ]\n    const components = {\n        ExpandButton: function (props) {\n            if (props.dataIndex === 3 || props.dataIndex === 4) return <div style={{ width: '24px' }} />;\n            return <ExpandButton {...props} />;\n        }\n    };\n\n    return (\n        <>\n            <MuiThemeProvider theme={getMuiTheme()}>\n                <MUIDataTable\n                    title={\"Transações do período\"}\n                    data={summary}\n                    columns={dataCols}\n                    options={options}\n                    components={components}\n                />\n            </MuiThemeProvider>\n            <Modal size={\"lg\"} isOpen={modal} toggle={toggle} >\n                <ModalHeader toggle={toggle} charCode=\"X\">Detalhes da Transação</ModalHeader>\n                <ModalBody>\n                    {single &&\n                        <div className=\"transaction\">\n                            <Row>\n                                <Col xs=\"2\">Subseller:</Col>\n                                <Col xs=\"4\"><strong>{single?.gn.marketplace_subsellerid}</strong></Col>\n                                <Col xs=\"2\">CNPJ/CPF:</Col>\n                                <Col><strong>{formatCNPJ(single?.bd.orders.shop.user.document)}</strong></Col>\n                            </Row>\n                            <Row>\n                                <Col xs=\"2\">Cliente:</Col>\n                                <Col><strong>{single?.bd.orders.shop.user.legalName}</strong></Col>\n                            </Row>\n                            <hr className=\"m-1\" />\n                            <Row>\n                                <Col xs=\"2\">Comprador:</Col>\n                                <Col xs=\"4\"><strong>{single?.bd.orders.customer.name}</strong></Col>\n                                <Col xs=\"2\">CPF:</Col>\n                                <Col><strong>{formatCPF(single?.bd.orders.customer.document)}</strong></Col>\n                            </Row>\n                            \n                            <hr className=\"m-1\"/>\n                        </div>}\n                </ModalBody>\n                <ModalFooter>\n                    \n                    <Button color=\"secondary\" onClick={toggle}>Fechar</Button>\n                </ModalFooter>\n            </Modal>\n        </>\n    )\n}\n\nexport default TableTranctions","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Statements\\TableRefuseds.js",["283","284","285","286","287","288","289"],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\CodeBlock.js",[],{"ruleId":"290","replacedBy":"291"},{"ruleId":"292","replacedBy":"293"},{"ruleId":"294","severity":1,"message":"295","line":21,"column":26,"nodeType":"296","messageId":"297","endLine":21,"endColumn":29},{"ruleId":"294","severity":1,"message":"298","line":24,"column":8,"nodeType":"296","messageId":"297","endLine":24,"endColumn":18},{"ruleId":"294","severity":1,"message":"299","line":25,"column":8,"nodeType":"296","messageId":"297","endLine":25,"endColumn":18},{"ruleId":"300","severity":1,"message":"301","line":47,"column":5,"nodeType":"302","endLine":47,"endColumn":14,"suggestions":"303"},{"ruleId":"294","severity":1,"message":"304","line":51,"column":13,"nodeType":"296","messageId":"297","endLine":51,"endColumn":21},{"ruleId":"294","severity":1,"message":"305","line":2,"column":8,"nodeType":"296","messageId":"297","endLine":2,"endColumn":11},{"ruleId":"294","severity":1,"message":"306","line":1,"column":57,"nodeType":"296","messageId":"297","endLine":1,"endColumn":65},{"ruleId":"294","severity":1,"message":"307","line":10,"column":9,"nodeType":"296","messageId":"297","endLine":10,"endColumn":13},{"ruleId":"308","severity":1,"message":"309","line":54,"column":35,"nodeType":"310","messageId":"311","endLine":54,"endColumn":37},{"ruleId":"294","severity":1,"message":"312","line":22,"column":28,"nodeType":"296","messageId":"297","endLine":22,"endColumn":35},{"ruleId":"294","severity":1,"message":"313","line":41,"column":10,"nodeType":"296","messageId":"297","endLine":41,"endColumn":15},{"ruleId":"294","severity":1,"message":"314","line":15,"column":3,"nodeType":"296","messageId":"297","endLine":15,"endColumn":8},{"ruleId":"294","severity":1,"message":"306","line":2,"column":17,"nodeType":"296","messageId":"297","endLine":2,"endColumn":25},{"ruleId":"294","severity":1,"message":"315","line":2,"column":27,"nodeType":"296","messageId":"297","endLine":2,"endColumn":36},{"ruleId":"294","severity":1,"message":"316","line":2,"column":38,"nodeType":"296","messageId":"297","endLine":2,"endColumn":44},{"ruleId":"294","severity":1,"message":"317","line":5,"column":24,"nodeType":"296","messageId":"297","endLine":5,"endColumn":34},{"ruleId":"294","severity":1,"message":"318","line":5,"column":91,"nodeType":"296","messageId":"297","endLine":5,"endColumn":101},{"ruleId":"294","severity":1,"message":"319","line":5,"column":103,"nodeType":"296","messageId":"297","endLine":5,"endColumn":108},{"ruleId":"294","severity":1,"message":"320","line":5,"column":110,"nodeType":"296","messageId":"297","endLine":5,"endColumn":115},{"ruleId":"294","severity":1,"message":"321","line":5,"column":117,"nodeType":"296","messageId":"297","endLine":5,"endColumn":128},{"ruleId":"294","severity":1,"message":"322","line":5,"column":130,"nodeType":"296","messageId":"297","endLine":5,"endColumn":139},{"ruleId":"294","severity":1,"message":"323","line":5,"column":141,"nodeType":"296","messageId":"297","endLine":5,"endColumn":152},{"ruleId":"294","severity":1,"message":"324","line":5,"column":154,"nodeType":"296","messageId":"297","endLine":5,"endColumn":159},{"ruleId":"294","severity":1,"message":"325","line":5,"column":161,"nodeType":"296","messageId":"297","endLine":5,"endColumn":173},{"ruleId":"294","severity":1,"message":"326","line":5,"column":175,"nodeType":"296","messageId":"297","endLine":5,"endColumn":187},{"ruleId":"294","severity":1,"message":"327","line":5,"column":189,"nodeType":"296","messageId":"297","endLine":5,"endColumn":203},{"ruleId":"294","severity":1,"message":"328","line":5,"column":205,"nodeType":"296","messageId":"297","endLine":5,"endColumn":225},{"ruleId":"294","severity":1,"message":"329","line":35,"column":10,"nodeType":"296","messageId":"297","endLine":35,"endColumn":15},{"ruleId":"294","severity":1,"message":"330","line":35,"column":17,"nodeType":"296","messageId":"297","endLine":35,"endColumn":25},{"ruleId":"294","severity":1,"message":"331","line":36,"column":10,"nodeType":"296","messageId":"297","endLine":36,"endColumn":22},{"ruleId":"294","severity":1,"message":"332","line":36,"column":24,"nodeType":"296","messageId":"297","endLine":36,"endColumn":39},{"ruleId":"294","severity":1,"message":"333","line":3,"column":74,"nodeType":"296","messageId":"297","endLine":3,"endColumn":85},{"ruleId":"294","severity":1,"message":"319","line":3,"column":123,"nodeType":"296","messageId":"297","endLine":3,"endColumn":128},{"ruleId":"308","severity":1,"message":"334","line":18,"column":35,"nodeType":"310","messageId":"335","endLine":18,"endColumn":37},{"ruleId":"294","severity":1,"message":"336","line":39,"column":13,"nodeType":"296","messageId":"297","endLine":39,"endColumn":23},{"ruleId":"294","severity":1,"message":"319","line":3,"column":79,"nodeType":"296","messageId":"297","endLine":3,"endColumn":84},{"ruleId":"294","severity":1,"message":"337","line":15,"column":24,"nodeType":"296","messageId":"297","endLine":15,"endColumn":37},{"ruleId":"294","severity":1,"message":"338","line":37,"column":25,"nodeType":"296","messageId":"297","endLine":37,"endColumn":29},{"ruleId":"294","severity":1,"message":"339","line":58,"column":11,"nodeType":"296","messageId":"297","endLine":58,"endColumn":16},{"ruleId":"308","severity":1,"message":"334","line":102,"column":30,"nodeType":"310","messageId":"335","endLine":102,"endColumn":32},{"ruleId":"308","severity":1,"message":"334","line":123,"column":30,"nodeType":"310","messageId":"335","endLine":123,"endColumn":32},{"ruleId":"294","severity":1,"message":"338","line":136,"column":21,"nodeType":"296","messageId":"297","endLine":136,"endColumn":25},{"ruleId":"294","severity":1,"message":"333","line":3,"column":74,"nodeType":"296","messageId":"297","endLine":3,"endColumn":85},{"ruleId":"294","severity":1,"message":"319","line":3,"column":123,"nodeType":"296","messageId":"297","endLine":3,"endColumn":128},{"ruleId":"308","severity":1,"message":"334","line":29,"column":35,"nodeType":"310","messageId":"335","endLine":29,"endColumn":37},{"ruleId":"300","severity":1,"message":"340","line":40,"column":8,"nodeType":"302","endLine":40,"endColumn":10,"suggestions":"341"},{"ruleId":"294","severity":1,"message":"336","line":52,"column":13,"nodeType":"296","messageId":"297","endLine":52,"endColumn":23},{"ruleId":"294","severity":1,"message":"333","line":3,"column":74,"nodeType":"296","messageId":"297","endLine":3,"endColumn":85},{"ruleId":"294","severity":1,"message":"342","line":3,"column":93,"nodeType":"296","messageId":"297","endLine":3,"endColumn":105},{"ruleId":"294","severity":1,"message":"319","line":3,"column":137,"nodeType":"296","messageId":"297","endLine":3,"endColumn":142},{"ruleId":"294","severity":1,"message":"343","line":10,"column":11,"nodeType":"296","messageId":"297","endLine":10,"endColumn":18},{"ruleId":"294","severity":1,"message":"344","line":11,"column":37,"nodeType":"296","messageId":"297","endLine":11,"endColumn":42},{"ruleId":"294","severity":1,"message":"345","line":11,"column":44,"nodeType":"296","messageId":"297","endLine":11,"endColumn":50},{"ruleId":"294","severity":1,"message":"345","line":26,"column":35,"nodeType":"296","messageId":"297","endLine":26,"endColumn":41},{"ruleId":"294","severity":1,"message":"346","line":10,"column":115,"nodeType":"296","messageId":"297","endLine":10,"endColumn":118},{"ruleId":"294","severity":1,"message":"347","line":38,"column":12,"nodeType":"296","messageId":"297","endLine":38,"endColumn":16},{"ruleId":"294","severity":1,"message":"348","line":1,"column":8,"nodeType":"296","messageId":"297","endLine":1,"endColumn":13},{"ruleId":"294","severity":1,"message":"349","line":2,"column":10,"nodeType":"296","messageId":"297","endLine":2,"endColumn":14},{"ruleId":"294","severity":1,"message":"350","line":58,"column":10,"nodeType":"296","messageId":"297","endLine":58,"endColumn":20},{"ruleId":"294","severity":1,"message":"315","line":2,"column":17,"nodeType":"296","messageId":"297","endLine":2,"endColumn":26},{"ruleId":"294","severity":1,"message":"351","line":12,"column":27,"nodeType":"296","messageId":"297","endLine":12,"endColumn":45},{"ruleId":"294","severity":1,"message":"352","line":24,"column":12,"nodeType":"296","messageId":"297","endLine":24,"endColumn":23},{"ruleId":"294","severity":1,"message":"315","line":2,"column":17,"nodeType":"296","messageId":"297","endLine":2,"endColumn":26},{"ruleId":"294","severity":1,"message":"306","line":2,"column":28,"nodeType":"296","messageId":"297","endLine":2,"endColumn":36},{"ruleId":"294","severity":1,"message":"353","line":25,"column":17,"nodeType":"296","messageId":"297","endLine":25,"endColumn":23},{"ruleId":"294","severity":1,"message":"354","line":11,"column":10,"nodeType":"296","messageId":"297","endLine":11,"endColumn":20},{"ruleId":"294","severity":1,"message":"305","line":13,"column":8,"nodeType":"296","messageId":"297","endLine":13,"endColumn":11},{"ruleId":"294","severity":1,"message":"346","line":14,"column":8,"nodeType":"296","messageId":"297","endLine":14,"endColumn":11},{"ruleId":"294","severity":1,"message":"295","line":15,"column":8,"nodeType":"296","messageId":"297","endLine":15,"endColumn":11},{"ruleId":"294","severity":1,"message":"355","line":16,"column":10,"nodeType":"296","messageId":"297","endLine":16,"endColumn":19},{"ruleId":"294","severity":1,"message":"356","line":21,"column":12,"nodeType":"296","messageId":"297","endLine":21,"endColumn":16},{"ruleId":"294","severity":1,"message":"357","line":21,"column":18,"nodeType":"296","messageId":"297","endLine":21,"endColumn":27},"no-native-reassign",["358"],"no-negated-in-lhs",["359"],"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'AuthNavbar' is defined but never used.","'AuthFooter' is defined but never used.","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'handleSetPlanDetailsId'. Either include it or remove the dependency array.","ArrayExpression",["360"],"'response' is assigned a value but never used.","'api' is defined but never used.","'useState' is defined but never used.","'auth' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'isAfter' is defined but never used.","'sales' is assigned a value but never used.","'Media' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'CardHeader' is defined but never used.","'CardFooter' is defined but never used.","'Table' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'ModalFooter' is defined but never used.","'Label' is defined but never used.","'DropdownItem' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownToggle' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'plans' is assigned a value but never used.","'setPlans' is assigned a value but never used.","'planSelected' is assigned a value but never used.","'setPlanSelected' is assigned a value but never used.","'CustomInput' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'allChecked' is assigned a value but never used.","'setDeleteUser' is assigned a value but never used.","'data' is assigned a value but never used.","'teste' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["361"],"'FormFeedback' is defined but never used.","'history' is assigned a value but never used.","'watch' is assigned a value but never used.","'errors' is assigned a value but never used.","'Row' is defined but never used.","'user' is assigned a value but never used.","'React' is defined but never used.","'func' is defined but never used.","'formatReal' is defined but never used.","'setOpenChargebacks' is assigned a value but never used.","'chargebacks' is assigned a value but never used.","'orders' is assigned a value but never used.","'formatCNPJ' is defined but never used.","'formatCPF' is defined but never used.","'shop' is assigned a value but never used.","'setSingle' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"362","fix":"363"},{"desc":"364","fix":"365"},"Update the dependencies array to be: [handleSetPlanDetailsId, history]",{"range":"366","text":"367"},"Update the dependencies array to be: [id]",{"range":"368","text":"369"},[1426,1435],"[handleSetPlanDetailsId, history]",[1628,1630],"[id]"]