[{"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\index.js":"1","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\App.js":"2","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\routes\\routes.js":"3","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\layouts\\Auth.js":"4","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\layouts\\Admin.js":"5","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\index.js":"6","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\auth.js":"7","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\plans.js":"8","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\users.js":"9","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\chargebacks.js":"10","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\getnet.js":"11","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\routes.js":"12","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\services\\api.js":"13","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Navbars\\AuthNavbar.js":"14","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Navbars\\AdminNavbar.js":"15","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Footers\\AuthFooter.js":"16","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Footers\\AdminFooter.js":"17","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Sidebar\\Sidebar.js":"18","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\Index.js":"19","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\ClientProfile.js":"20","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\Clients.js":"21","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\ClientRegister.js":"22","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\Plans.js":"23","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\PlanRegister.js":"24","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\PlanSettings.js":"25","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\chargebacks\\ChargebackSettings.js":"26","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\chargebacks\\Chargebacks.js":"27","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\GroupsCreate.js":"28","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Users.js":"29","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\GroupsUpdate.js":"30","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\UserCreate.js":"31","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Login.js":"32","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\ResetPassword.js":"33","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Register.js":"34","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\RePassword.js":"35","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\format.js":"36","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\FormateUtils.js":"37","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Headers\\Header.js":"38","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\Alert.js":"39","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\variables\\charts.js":"40","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Plans\\EditTable.js":"41","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\masks.js":"42","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\billings.js":"43","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\statements\\Statement.js":"44","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Headers\\HeaderClear.js":"45","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Statements\\TableTransactions.js":"46","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Statements\\TableRefuseds.js":"47","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\CodeBlock.js":"48","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Statements\\TableLiquidation.js":"49","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\orders\\Orders.js":"50","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\DateRange\\MonetizDateRange.js":"51","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\GetMuiTheme.js":"52","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\typesGetnet.js":"53"},{"size":322,"mtime":1606419844122,"results":"54","hashOfConfig":"55"},{"size":845,"mtime":1602761723850,"results":"56","hashOfConfig":"55"},{"size":751,"mtime":1624580237777,"results":"57","hashOfConfig":"55"},{"size":3069,"mtime":1624542590420,"results":"58","hashOfConfig":"55"},{"size":2067,"mtime":1608116877161,"results":"59","hashOfConfig":"55"},{"size":601,"mtime":1606414632931,"results":"60","hashOfConfig":"55"},{"size":3354,"mtime":1624580864174,"results":"61","hashOfConfig":"55"},{"size":3058,"mtime":1624327996314,"results":"62","hashOfConfig":"55"},{"size":4476,"mtime":1624563975777,"results":"63","hashOfConfig":"55"},{"size":1131,"mtime":1602761724035,"results":"64","hashOfConfig":"55"},{"size":3435,"mtime":1624310560839,"results":"65","hashOfConfig":"55"},{"size":4105,"mtime":1624355895501,"results":"66","hashOfConfig":"55"},{"size":325,"mtime":1624139174414,"results":"67","hashOfConfig":"55"},{"size":3915,"mtime":1608116315431,"results":"68","hashOfConfig":"55"},{"size":2301,"mtime":1608672830676,"results":"69","hashOfConfig":"55"},{"size":2976,"mtime":1602761724028,"results":"70","hashOfConfig":"55"},{"size":777,"mtime":1608748551983,"results":"71","hashOfConfig":"55"},{"size":8099,"mtime":1608748675657,"results":"72","hashOfConfig":"55"},{"size":4708,"mtime":1612989159703,"results":"73","hashOfConfig":"55"},{"size":27148,"mtime":1624559764316,"results":"74","hashOfConfig":"55"},{"size":6591,"mtime":1624459905539,"results":"75","hashOfConfig":"55"},{"size":27622,"mtime":1624394654096,"results":"76","hashOfConfig":"55"},{"size":6858,"mtime":1608740443438,"results":"77","hashOfConfig":"55"},{"size":5333,"mtime":1608754610022,"results":"78","hashOfConfig":"55"},{"size":16195,"mtime":1614119819087,"results":"79","hashOfConfig":"55"},{"size":9381,"mtime":1608152936301,"results":"80","hashOfConfig":"55"},{"size":13448,"mtime":1608152803367,"results":"81","hashOfConfig":"55"},{"size":9397,"mtime":1608153456879,"results":"82","hashOfConfig":"55"},{"size":9745,"mtime":1624629831401,"results":"83","hashOfConfig":"55"},{"size":9932,"mtime":1608153483280,"results":"84","hashOfConfig":"55"},{"size":5358,"mtime":1608153505681,"results":"85","hashOfConfig":"55"},{"size":2843,"mtime":1608671989404,"results":"86","hashOfConfig":"55"},{"size":5777,"mtime":1608748288774,"results":"87","hashOfConfig":"55"},{"size":6884,"mtime":1609194873542,"results":"88","hashOfConfig":"55"},{"size":5586,"mtime":1608748247611,"results":"89","hashOfConfig":"55"},{"size":151,"mtime":1602761724042,"results":"90","hashOfConfig":"55"},{"size":1948,"mtime":1614268036914,"results":"91","hashOfConfig":"55"},{"size":5972,"mtime":1614170707642,"results":"92","hashOfConfig":"55"},{"size":552,"mtime":1606305225958,"results":"93","hashOfConfig":"55"},{"size":10324,"mtime":1608153533813,"results":"94","hashOfConfig":"55"},{"size":1327,"mtime":1607986950715,"results":"95","hashOfConfig":"55"},{"size":1727,"mtime":1606991667204,"results":"96","hashOfConfig":"55"},{"size":952,"mtime":1620335526964,"results":"97","hashOfConfig":"55"},{"size":6841,"mtime":1620304465188,"results":"98","hashOfConfig":"55"},{"size":368,"mtime":1614170594443,"results":"99","hashOfConfig":"55"},{"size":9788,"mtime":1618512010407,"results":"100","hashOfConfig":"55"},{"size":7063,"mtime":1618496756469,"results":"101","hashOfConfig":"55"},{"size":467,"mtime":1618497220648,"results":"102","hashOfConfig":"55"},{"size":9397,"mtime":1620337704843,"results":"103","hashOfConfig":"55"},{"size":10618,"mtime":1624301779009,"results":"104","hashOfConfig":"55"},{"size":1622,"mtime":1624285116392,"results":"105","hashOfConfig":"55"},{"size":2359,"mtime":1624312186160,"results":"106","hashOfConfig":"55"},{"size":406,"mtime":1624454942473,"results":"107","hashOfConfig":"55"},{"filePath":"108","messages":"109","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"uew1pk",{"filePath":"111","messages":"112","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"117","usedDeprecatedRules":"110"},{"filePath":"118","messages":"119","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"120","messages":"121","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"122","messages":"123","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"110"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"129","messages":"130","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"131","usedDeprecatedRules":"110"},{"filePath":"132","messages":"133","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"110"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"139","messages":"140","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"141","messages":"142","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"147","messages":"148","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"149","usedDeprecatedRules":"110"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"154","usedDeprecatedRules":"110"},{"filePath":"155","messages":"156","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"157","usedDeprecatedRules":"110"},{"filePath":"158","messages":"159","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"160","usedDeprecatedRules":"110"},{"filePath":"161","messages":"162","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"163","messages":"164","errorCount":0,"warningCount":15,"fixableErrorCount":0,"fixableWarningCount":0,"source":"165","usedDeprecatedRules":"110"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"110"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"175","usedDeprecatedRules":"110"},{"filePath":"176","messages":"177","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"178","usedDeprecatedRules":"110"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"181","usedDeprecatedRules":"110"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"184","usedDeprecatedRules":"110"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"187","usedDeprecatedRules":"110"},{"filePath":"188","messages":"189","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"190","messages":"191","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"192","usedDeprecatedRules":"110"},{"filePath":"193","messages":"194","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"195","usedDeprecatedRules":"110"},{"filePath":"196","messages":"197","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"198","messages":"199","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"200","usedDeprecatedRules":"110"},{"filePath":"201","messages":"202","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"203","usedDeprecatedRules":"110"},{"filePath":"204","messages":"205","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"208","messages":"209","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"210","messages":"211","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"212","messages":"213","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"216","usedDeprecatedRules":"110"},{"filePath":"217","messages":"218","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"219","usedDeprecatedRules":"110"},{"filePath":"220","messages":"221","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"222","usedDeprecatedRules":"110"},{"filePath":"223","messages":"224","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},{"filePath":"227","messages":"228","errorCount":0,"warningCount":13,"fixableErrorCount":0,"fixableWarningCount":0,"source":"229","usedDeprecatedRules":"110"},{"filePath":"230","messages":"231","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"232","usedDeprecatedRules":"110"},{"filePath":"233","messages":"234","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"235","messages":"236","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"237","messages":"238","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"110"},"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\index.js",[],["239","240"],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\App.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\routes\\routes.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\layouts\\Auth.js",["241"],"/*!\r\n\r\n=========================================================\r\n* Argon Dashboard React - v1.1.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n// reactstrap components\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\nimport routes from \"routes.js\";\r\n\r\nclass Auth extends React.Component {\r\n  componentDidMount() {\r\n    document.body.classList.add(\"bg-default\");\r\n  }\r\n  componentWillUnmount() {\r\n    document.body.classList.remove(\"bg-default\");\r\n  }\r\n  getRoutes = routes => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.layout === \"/auth\") {\r\n        return (\r\n          <Route\r\n            path={prop.layout + prop.path}\r\n            component={prop.component}\r\n            key={key}\r\n          />\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"main-content\">\r\n          {/* <AuthNavbar /> */}\r\n          <div className=\"header bg-gradient-info py-7 py-lg-8\">\r\n            {/* <Container>\r\n              <div className=\"header-body text-center mb-7\">\r\n                <Row className=\"justify-content-center\">\r\n                  <Col lg=\"5\" md=\"6\">\r\n                    <h1 className=\"text-white\">Welcome!</h1>\r\n                    <p className=\"text-lead text-light\">\r\n                      Use these awesome forms to login or create new account in\r\n                      your project for free.\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n            </Container> */}\r\n            <div className=\"separator separator-bottom separator-skew zindex-100\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                preserveAspectRatio=\"none\"\r\n                version=\"1.1\"\r\n                viewBox=\"0 0 2560 100\"\r\n                x=\"0\"\r\n                y=\"0\"\r\n              >\r\n                <polygon\r\n                  className=\"fill-default\"\r\n                  points=\"2560 0 2560 100 0 100\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          {/* Page content */}\r\n          <Container className=\"mt--8 pb-5\">\r\n            <Row className=\"justify-content-center\">\r\n              <Switch>\r\n                {this.getRoutes(routes)}\r\n                <Redirect from=\"*\" to=\"/auth/login\" />\r\n              </Switch>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n        {/* <AuthFooter /> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Auth;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\layouts\\Admin.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\index.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\auth.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\plans.js",["242","243"],"import React, { useState, useContext, createContext, useCallback } from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport api from '../services/api';\r\n\r\nconst PlansContext = createContext();\r\n\r\nfunction PlansProvider({ children }) {\r\n\r\n  const history = useHistory();\r\n\r\n  const [plans, setPlans] = useState([]);\r\n  const [planSettingsId, setPlanSettingsId] = useState(() => {\r\n    const selectedId = localStorage.getItem('@Monetiz-dashboard:plan-selected');\r\n\r\n    return selectedId;\r\n  });\r\n  const handleSetPlanDetailsId = useCallback((id) => {\r\n    setPlanSettingsId(id);\r\n    localStorage.setItem('@Monetiz-dashboard:plan-selected', id);\r\n  }, [])\r\n\r\n  const getPlans = useCallback(async () => {\r\n    const response = await api.get('/plans');\r\n    setPlans(response.data);\r\n    return response.data;\r\n  }, [])\r\n\r\n  const getPlan = useCallback(async (id) => {\r\n    const response = await api.get(`plans/show/${id}`);\r\n    return response.data\r\n  }, [])\r\n\r\n  const getPlanGateway = useCallback(async () => {\r\n    let data = [\r\n      { paymentplan_id: 3, name: 'Receba Já 2 dias' },\r\n      { paymentplan_id: 7, name: 'Receba Já 5 dias' },\r\n      { paymentplan_id: 4, name: 'Receba Já 10 dias' },\r\n      { paymentplan_id: 2, name: 'Receba Já 20 dias' },\r\n      { paymentplan_id: 5, name: 'Receba Já 30 dias' },\r\n      { paymentplan_id: 6, name: 'Receba Já 40 dias' },\r\n    ]\r\n    return data\r\n  }, [])\r\n\r\n  const savePlans = useCallback(async (data) => {\r\n    try {\r\n      const response = await api.post('/plans/add', data)\r\n      setPlans(state => [...state, response.data]);\r\n      toast.success(\"Plano cadastrado !\");\r\n      handleSetPlanDetailsId(response.data.id);\r\n      history.push('/admin/plan-settings')\r\n    } catch (err) {\r\n      console.log(err);\r\n      toast.error(\"Tente novamente !\");\r\n    }\r\n  }, [history])\r\n\r\n  const updatePlan = useCallback(async (data) => {\r\n    try {\r\n      const response = await api.put(`/plans/update/${data.id}`, data);\r\n      toast.success(\"Plano atualizado !\");\r\n    } catch (err) {\r\n      console.log(err);\r\n      toast.error(\"Tente novamente !\");\r\n    }\r\n  }, []);\r\n\r\n  const deletePlan = useCallback(async (id) => {\r\n    try {\r\n      await api.delete(`/plans/delete/${id}`);\r\n      toast.success(\"Plano deletado !\");\r\n      history.push('/admin/plans/')\r\n\r\n    } catch (err) {\r\n      console.log(err)\r\n      toast.error(\"Tente novamente !\");\r\n    }\r\n  }, [history])\r\n\r\n\r\n\r\n\r\n\r\n\r\n  const handleGetPlanDetailsId = useCallback(() => {\r\n    return planSettingsId;\r\n  }, [planSettingsId])\r\n\r\n  return (\r\n    <PlansContext.Provider value={{ plans, getPlans, getPlan, getPlanGateway, savePlans, updatePlan, deletePlan, handleSetPlanDetailsId, handleGetPlanDetailsId }}>\r\n      {children}\r\n    </PlansContext.Provider>\r\n  )\r\n}\r\n\r\nfunction usePlans() {\r\n  const context = useContext(PlansContext);\r\n\r\n  if (!context) {\r\n    throw new Error('usePlans must be used within an PlansProvider.')\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { PlansProvider, usePlans }","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\users.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\chargebacks.js",["244"],"import React, { useContext, createContext, useCallback , useState} from 'react';\r\nimport api from 'services/api';\r\n\r\nconst ChargebacksContext = createContext();\r\n\r\nfunction ChargebacksProvider({ children }){\r\n\r\n  const [selectedChargebackId, setSelectedChargebackId] = useState(() => {\r\n    const selectedId = localStorage.getItem('@Monetiz-dashboard:chargeback-selected');\r\n    \r\n    return selectedId;\r\n  });\r\n\r\n  const saveSelectedChargeback = useCallback((id) => {\r\n    setSelectedChargebackId(id);\r\n    localStorage.setItem('@Monetiz-dashboard:chargeback-selected', id);\r\n  },[])\r\n\r\n  const getSelectedChargeback = useCallback(() => {\r\n    return selectedChargebackId\r\n  },[selectedChargebackId])\r\n\r\n  return (\r\n    <ChargebacksContext.Provider value={{ saveSelectedChargeback, getSelectedChargeback }}>\r\n      {children}\r\n    </ChargebacksContext.Provider>\r\n  )\r\n}\r\n\r\nfunction useChargebacks(){\r\n  const context = useContext(ChargebacksContext);\r\n\r\n  if(!context){\r\n    throw new Error('useChargebacks must be used within an ChargebacksProvider')\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { ChargebacksProvider, useChargebacks};","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\getnet.js",["245","246"],"import React, { useContext, createContext, useCallback, useState } from 'react';\r\nimport api from 'services/api';\r\nimport { useAuth } from 'hooks/auth'\r\n\r\n\r\nconst GatewayContext = createContext();\r\n\r\nfunction GatewayProvider({ children }) {\r\n\r\n  const auth = useAuth()\r\n\r\n  const callback = useCallback(async (id) => {\r\n    return api.get(`/gateway/getnet/callback?id=${id}`)\r\n      .then((result) => {\r\n        return ({ status: true, data: result.data })\r\n\r\n      }).catch((err) => {\r\n        console.log(err)\r\n      });\r\n  }, []);\r\n\r\n  const handlePreRegisterCpf = useCallback(async (data) => {\r\n    const preRegisterData = {\r\n      legal_document_number: data.cpf,\r\n      legal_name: `${data.name} ${data.surname}`,\r\n      birth_date: data.birthdate,\r\n      mothers_name: `${data.motherName} ${data.motherSurname}`,\r\n      occupation: data.occupation,\r\n      business_address: {\r\n        mailing_address_equals: \"N\",\r\n        street: data.businessAddress.street,\r\n        number: data.businessAddress.number,\r\n        district: data.businessAddress.neighborhood,\r\n        city: data.businessAddress.city,\r\n        state: data.businessAddress.state,\r\n        postal_code: data.businessAddress.cep\r\n      },\r\n      mailing_address: {\r\n        street: data.mailingAddress.street,\r\n        number: data.mailingAddress.number,\r\n        district: data.mailingAddress.neighborhood,\r\n        city: data.mailingAddress.city,\r\n        state: data.mailingAddress.state,\r\n        postal_code: data.mailingAddress.cep,\r\n      },\r\n      email: data.email,\r\n      bank_accounts: {\r\n        type_accounts: 'unique',\r\n        ...data.bankAccounts,\r\n      },\r\n      user_id: data.user_id\r\n    }\r\n\r\n    const response = await api.post('gateway/pre-register/pf', preRegisterData)\r\n\r\n    return response.data;\r\n\r\n  }, []);\r\n\r\n  const handlePreRegisterCnpj = useCallback(async (data) => {\r\n    const preRegisterData = {\r\n      legal_document_number: data.cnpj,\r\n      legal_name: data.legalName,\r\n      trade_name: data.tradeName,\r\n      state_fiscal_document_number: data.stateFiscalNumber,\r\n      business_address: {\r\n        mailing_address_equals: \"N\",\r\n        street: data.businessAddress.street,\r\n        number: data.businessAddress.number,\r\n        district: data.businessAddress.neighborhood,\r\n        city: data.businessAddress.city,\r\n        state: data.businessAddress.state,\r\n        postal_code: data.businessAddress.cep\r\n      },\r\n      mailing_address: {\r\n        street: data.mailingAddress.street,\r\n        number: data.mailingAddress.number,\r\n        district: data.mailingAddress.neighborhood,\r\n        city: data.mailingAddress.city,\r\n        state: data.mailingAddress.state,\r\n        postal_code: data.mailingAddress.cep,\r\n      },\r\n      email: data.email,\r\n      bank_accounts: {\r\n        type_accounts: 'unique',\r\n        ...data.bankAccounts,\r\n      },\r\n      user_id: data.user_id\r\n    }\r\n\r\n    const response = await api.post('gateway/pre-register/pj', preRegisterData)\r\n\r\n    return response.data;\r\n\r\n  }, [])\r\n\r\n  return (\r\n    <GatewayContext.Provider value={{ callback, handlePreRegisterCpf, handlePreRegisterCnpj }}>\r\n      {children}\r\n    </GatewayContext.Provider>\r\n  )\r\n}\r\n\r\nfunction useGateway() {\r\n  const context = useContext(GatewayContext);\r\n\r\n  if (!context) {\r\n    throw new Error('useGateway must be used within an Gateway Provider')\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { GatewayProvider, useGateway };\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\routes.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\services\\api.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Navbars\\AuthNavbar.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Navbars\\AdminNavbar.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Footers\\AuthFooter.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Footers\\AdminFooter.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Sidebar\\Sidebar.js",["247"],"import React from \"react\";\r\nimport { NavLink as NavLinkRRD, Link } from \"react-router-dom\";\r\n// nodejs library to set properties for components\r\nimport { PropTypes } from \"prop-types\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Collapse,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  Form,\r\n  Input,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  InputGroup,\r\n  Media,\r\n  NavbarBrand,\r\n  Navbar,\r\n  NavItem,\r\n  NavLink,\r\n  Nav,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\nclass Sidebar extends React.Component {\r\n  state = {\r\n    collapseOpen: false\r\n  };\r\n  constructor(props) {\r\n    super(props);\r\n    this.activeRoute.bind(this);\r\n  }\r\n  // verifies if routeName is the one active (in browser input)\r\n  activeRoute(routeName) {\r\n    return this.props.location.pathname.indexOf(routeName) > -1 ? \"active\" : \"\";\r\n  }\r\n  // toggles collapse between opened and closed (true/false)\r\n  toggleCollapse = () => {\r\n    this.setState({\r\n      collapseOpen: !this.state.collapseOpen\r\n    });\r\n  };\r\n  // closes the collapse\r\n  closeCollapse = () => {\r\n    this.setState({\r\n      collapseOpen: false\r\n    });\r\n  };\r\n  // creates the links that appear in the left menu / Sidebar\r\n  createLinks = routes => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.name) {\r\n        return (\r\n          <NavItem key={key}>\r\n            <NavLink\r\n              to={prop.layout + prop.path}\r\n              tag={NavLinkRRD}\r\n              onClick={this.closeCollapse}\r\n              activeClassName=\"active\"\r\n            >\r\n              <i className={prop.icon} />\r\n              {prop.name}\r\n            </NavLink>\r\n          </NavItem>\r\n        );\r\n      }\r\n    });\r\n  };\r\n  render() {\r\n    const { routes, logo } = this.props;\r\n    let navbarBrandProps;\r\n    if (logo && logo.innerLink) {\r\n      navbarBrandProps = {\r\n        to: logo.innerLink,\r\n        tag: Link\r\n      };\r\n    } else if (logo && logo.outterLink) {\r\n      navbarBrandProps = {\r\n        href: logo.outterLink,\r\n        target: \"_blank\"\r\n      };\r\n    }\r\n    return (\r\n      <Navbar\r\n        className=\"navbar-vertical fixed-left navbar-light bg-white\"\r\n        expand=\"md\"\r\n        id=\"sidenav-main\"\r\n      >\r\n        <Container fluid>\r\n          {/* Toggler */}\r\n          <button\r\n            className=\"navbar-toggler\"\r\n            type=\"button\"\r\n            onClick={this.toggleCollapse}\r\n          >\r\n            <span className=\"navbar-toggler-icon\" />\r\n          </button>\r\n          {/* Brand */}\r\n          {logo ? (\r\n            <NavbarBrand className=\"pt-0\" {...navbarBrandProps}>\r\n              <img\r\n                alt={logo.imgAlt}\r\n                className=\"navbar-brand-img\"\r\n                src={logo.imgSrc}\r\n              />\r\n            </NavbarBrand>\r\n          ) : null}\r\n          {/* User */}\r\n          <Nav className=\"align-items-center d-md-none\">\r\n            <UncontrolledDropdown nav>\r\n              <DropdownToggle nav className=\"nav-link-icon\">\r\n                <i className=\"ni ni-bell-55\" />\r\n              </DropdownToggle>\r\n              <DropdownMenu\r\n                aria-labelledby=\"navbar-default_dropdown_1\"\r\n                className=\"dropdown-menu-arrow\"\r\n                right\r\n              >\r\n                <DropdownItem>Action</DropdownItem>\r\n                <DropdownItem>Another action</DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem>Something else here</DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n            <UncontrolledDropdown nav>\r\n              <DropdownToggle nav>\r\n                <Media className=\"align-items-center\">\r\n                  <span className=\"avatar avatar-sm rounded-circle\">\r\n                    <img\r\n                      alt=\"...\"\r\n                      src={require(\"assets/img/theme/team-1-800x800.jpg\")}\r\n                    />\r\n                  </span>\r\n                </Media>\r\n              </DropdownToggle>\r\n              <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                <DropdownItem className=\"noti-title\" header tag=\"div\">\r\n                  <h6 className=\"text-overflow m-0\">Welcome!</h6>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-single-02\" />\r\n                  <span>My profile</span>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-settings-gear-65\" />\r\n                  <span>Settings</span>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-calendar-grid-58\" />\r\n                  <span>Activity</span>\r\n                </DropdownItem>\r\n                <DropdownItem to=\"/admin/user-profile\" tag={Link}>\r\n                  <i className=\"ni ni-support-16\" />\r\n                  <span>Support</span>\r\n                </DropdownItem>\r\n                <DropdownItem divider />\r\n                <DropdownItem href=\"#pablo\" onClick={e => e.preventDefault()}>\r\n                  <i className=\"ni ni-user-run\" />\r\n                  <span>Logout</span>\r\n                </DropdownItem>\r\n              </DropdownMenu>\r\n            </UncontrolledDropdown>\r\n          </Nav>\r\n          {/* Collapse */}\r\n          <Collapse navbar isOpen={this.state.collapseOpen}>\r\n            {/* Collapse header */}\r\n            <div className=\"navbar-collapse-header d-md-none\">\r\n              <Row>\r\n                {logo ? (\r\n                  <Col className=\"collapse-brand\" xs=\"6\">\r\n                    {logo.innerLink ? (\r\n                      <Link to={logo.innerLink}>\r\n                        <img alt={logo.imgAlt} src={logo.imgSrc} />\r\n                      </Link>\r\n                    ) : (\r\n                        <a href={logo.outterLink}>\r\n                          <img alt={logo.imgAlt} src={logo.imgSrc} />\r\n                        </a>\r\n                      )}\r\n                  </Col>\r\n                ) : null}\r\n                <Col className=\"collapse-close\" xs=\"6\">\r\n                  <button\r\n                    className=\"navbar-toggler\"\r\n                    type=\"button\"\r\n                    onClick={this.toggleCollapse}\r\n                  >\r\n                    <span />\r\n                    <span />\r\n                  </button>\r\n                </Col>\r\n              </Row>\r\n            </div>\r\n            {/* Form */}\r\n            <Form className=\"mt-4 mb-3 d-md-none\">\r\n              <InputGroup className=\"input-group-rounded input-group-merge\">\r\n                <Input\r\n                  aria-label=\"Search\"\r\n                  className=\"form-control-rounded form-control-prepended\"\r\n                  placeholder=\"Search\"\r\n                  type=\"search\"\r\n                />\r\n                <InputGroupAddon addonType=\"prepend\">\r\n                  <InputGroupText>\r\n                    <span className=\"fa fa-search\" />\r\n                  </InputGroupText>\r\n                </InputGroupAddon>\r\n              </InputGroup>\r\n            </Form>\r\n            {/* Navigation */}\r\n            <Nav navbar>{this.createLinks(routes)}</Nav>\r\n            {/* Divider */}\r\n            <hr className=\"my-3\" />\r\n\r\n          </Collapse>\r\n        </Container>\r\n      </Navbar>\r\n    );\r\n  }\r\n}\r\n\r\nSidebar.defaultProps = {\r\n  routes: [{}]\r\n};\r\n\r\nSidebar.propTypes = {\r\n  // links that will be displayed inside the component\r\n  routes: PropTypes.arrayOf(PropTypes.object),\r\n  logo: PropTypes.shape({\r\n    // innerLink is for links that will direct the user within the app\r\n    // it will be rendered as <Link to=\"...\">...</Link> tag\r\n    innerLink: PropTypes.string,\r\n    // outterLink is for links that will direct the user outside the app\r\n    // it will be rendered as simple <a href=\"...\">...</a> tag\r\n    outterLink: PropTypes.string,\r\n    // the image src of the logo\r\n    imgSrc: PropTypes.string.isRequired,\r\n    // the alt for the img\r\n    imgAlt: PropTypes.string.isRequired\r\n  })\r\n};\r\n\r\nexport default Sidebar;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\Index.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\ClientProfile.js",["248","249","250"],"\r\nimport React, { useState, useEffect } from \"react\";\r\nimport { useParams, Link } from 'react-router-dom';\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Badge,\r\n  Label,\r\n  Alert,\r\n  Breadcrumb,\r\n  BreadcrumbItem,\r\n} from \"reactstrap\";\r\nimport { useUsers } from '../../hooks/users';\r\nimport { usePlans } from '../../hooks/plans'\r\nimport { useForm } from \"react-hook-form\"\r\nimport { useGateway } from \"../../hooks/getnet\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n// core components\r\nimport Header from \"components/Headers/Header\";\r\n\r\nfunction ClientProfile() {\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const { getSelectedUserId, updateUser, getUser, updateStatus } = useUsers();\r\n  const { getPlans, getPlanGateway } = usePlans();\r\n  const [isCpf, setIsCpf] = useState(false);\r\n  const [client, setClient] = useState({});\r\n  const [address, setAddress] = useState({});\r\n  const [banks, setBanks] = useState({})\r\n  const [plans, setPlans] = useState([]);\r\n  const [getnetPlans, setGetnetPlans] = useState([])\r\n  const [getnetStatus, setGetnetStatus] = useState(\"\")\r\n  const gateway = useGateway();\r\n  const { id } = useParams();\r\n  useEffect(() => {\r\n    async function loadingData() {\r\n      const response = await getUser(id);\r\n      let user = response.data\r\n      const responsePlans = await getPlans();\r\n      const gPlans = await getPlanGateway()\r\n      setGetnetPlans(gPlans)\r\n      user.subsellerId = user.subseller.subsellerId\r\n      setClient(user);\r\n      setAddress(user.addresses[0])\r\n      setBanks(user.bankAccounts[0])\r\n      setPlans(responsePlans);\r\n      setGetnetStatus(user.subseller.status)\r\n      user.type === \"pf\" ? setIsCpf(true) : setIsCpf(false)\r\n    }\r\n    loadingData();\r\n  }, [getSelectedUserId, id, getUser, getPlans, getPlanGateway])\r\n\r\n  const handleCallback = async () => {\r\n\r\n    let { status, data } = await gateway.callback(client.id);\r\n    if (status) {\r\n\r\n    }\r\n  };\r\n\r\n  const onSubmit = (data) => {\r\n    let { legalName, tradeName, document, stateFiscalDocument, phone, mobile, email, planId, street, number, neighborhood, city, state, zipCode, complement, bankCode, agency, accountNumber, accountType, accountDigit } = data\r\n    let userData = { id: id, legalName, tradeName, document, stateFiscalDocument, phone, mobile, email, planId, type: isCpf ? \"pf\" : \"pj\" }\r\n\r\n    let addresses = { id: address.id, name: \"Bussines Address\", street: street, number, neighborhood, city, state, zipCode, complement }\r\n\r\n    let bankAccounts = { id: banks.id, bankCode, agency, accountNumber, accountType, accountDigit }\r\n    userData.mobile = userData.mobile.replace(/\\D/g, \"\")\r\n    userData.document = client.document\r\n    userData.stateFiscalDocument = client.stateFiscalDocument\r\n    userData.phone = userData.phone.replace(/\\D/g, \"\")\r\n    addresses.zipCode = addresses.zipCode.replace(/\\D/g, \"\")\r\n    let dataSubmit = {\r\n      user: userData,\r\n      mailingAddressEquals: \"S\",\r\n      address: addresses,\r\n      bankAccounts: bankAccounts,\r\n      subsellerId: client.subsellerId\r\n    }\r\n    updateUser(dataSubmit)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <Col className=\"order-xl-1\" xl=\"12\">\r\n            <Breadcrumb>\r\n              <BreadcrumbItem><Link to=\"/admin/\">Home</Link></BreadcrumbItem>\r\n              <BreadcrumbItem><Link to=\"/admin/clients\">Clientes</Link></BreadcrumbItem>\r\n              <BreadcrumbItem active>Cliente:{client.id} Subseller: {client.subsellerId}</BreadcrumbItem>\r\n            </Breadcrumb>\r\n            <Card className=\"bg-secondary shadow\">\r\n\r\n              <CardBody>\r\n                {client && (\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row className=\"mb-2\">\r\n                      <Col>\r\n                        <h6 className=\"heading-small text-muted mb-4\">\r\n                          Status do Cliente\r\n                        </h6>\r\n                        <Row>\r\n                          <Col>\r\n                            <FormGroup>\r\n                              <Label className=\"form-control-Label\" for=\"\">Status Geral</Label>\r\n                              <Input\r\n                                className=\"form-control-alternative\"\r\n                                name=\"status\"\r\n                                id=\"input-status\"\r\n                                type=\"select\"\r\n                                value={client.status}\r\n                                onChange={e => { updateStatus(client.id, { status: e.target.value }) }}\r\n                              >\r\n                                <option value=\"active\" >Ativo</option>\r\n                                <option value=\"pending\">Pendente</option>\r\n                                <option value=\"blocked\">Bloqueado</option>\r\n                              </Input>\r\n                            </FormGroup>\r\n                          </Col>\r\n                          <Col>\r\n\r\n                            <Label className=\"form-control-Label\" for=\"\">Status Getnet</Label><br />\r\n                            <div className=\"de-flex mt-1 \">\r\n                              <Badge color={getnetStatus === \"Aprovado Transacionar\"\r\n                                ? \"success\"\r\n                                : \"Em Análise\" || \"Trativa de Cadastro\" ? \"warning\" : \"danger\"\r\n                              }\r\n                                pill>{getnetStatus}</Badge>\r\n                              <Button className=\"ml-4\" color=\"primary\">Verificar</Button>\r\n                            </div>\r\n                          </Col>\r\n                          <Col>\r\n                            <FormGroup>\r\n                              <Label className=\"form-control-Label\" for=\"\">Prazo para Recebimento</Label>\r\n                              <Input\r\n                                className=\"form-control-alternative\"\r\n                                name=\"gatwayPlan\"\r\n                                id=\"input-name\"\r\n                                type=\"select\"\r\n                                defaultValue={client.legalName}\r\n                              >\r\n                                {getnetPlans.map((plan, key) =>\r\n                                  <option key={key} value={plan.paymentplan_id}>{plan.name}</option>\r\n                                )}\r\n                              </Input>\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        <hr className=\"my-4\" />\r\n                      </Col>\r\n                    </Row>\r\n                    <Form onSubmit={handleSubmit(onSubmit)}>\r\n                      <Row>\r\n                        <Col lg=\"4\">\r\n                          <h6 className=\"heading-small text-muted mb-4\">\r\n                            Informações\r\n                          </h6>\r\n                          <FormGroup>\r\n                            <Label className=\"form-control-Label\" for=\"\">Razão Social/Nome</Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              name=\"legalName\"\r\n                              id=\"input-name\"\r\n                              type=\"text\"\r\n                              placeholder=\"Razão Social\"\r\n                              innerRef={register({ required: true })}\r\n                              defaultValue={client.legalName}\r\n                            />\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n\r\n                            <Label\r\n                              className=\"form-control-Label\"\r\n                              for=\"input-tradename\"\r\n                            >\r\n                              Nome fantasia\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              id=\"input-tradename\"\r\n                              name=\"tradeName\"\r\n                              innerRef={register({ required: true })}\r\n                              type=\"text\"\r\n                              defaultValue={client.tradeName}\r\n                            />\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <Label className=\"form-control-Label\" for=\"input-cpf\">CNPJ/CPF</Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              id=\"input-cpf\"\r\n                              name=\"document\"\r\n                              type=\"text\"\r\n                              disabled={true}\r\n                              innerRef={register({ required: true })}\r\n                              defaultValue={client.document}\r\n                            />\r\n                          </FormGroup>\r\n                          {!isCpf &&\r\n                            <FormGroup>\r\n\r\n                              <Label\r\n                                className=\"form-control-Label\"\r\n                                for=\"input-state-fiscal\"\r\n                              >\r\n                                Inscrição estadual\r\n                              </Label>\r\n                              <Input\r\n                                className=\"form-control-alternative\"\r\n                                id=\"input-state-fiscal\"\r\n                                name=\"stateFiscalDocument\"\r\n                                type=\"text\"\r\n                                disabled\r\n                                defaultValue={client.stateFiscalDocument}\r\n                              />\r\n                            </FormGroup>\r\n                          }\r\n                          <FormGroup>\r\n                            <Label className=\"form-control-Label\" for=\"\">Email</Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              id=\"input-email\"\r\n                              placeholder=\"exemplo@monetiz.com.br\"\r\n                              name=\"email\"\r\n                              type=\"email\"\r\n                              innerRef={register({ required: true })}\r\n                              defaultValue={client.email}\r\n                            />\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <Label className=\"form-control-Label\" for=\"\">Telefone Fixo</Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              id=\"input-mobile\"\r\n                              name=\"mobile\"\r\n                              type=\"text\"\r\n                              placeholder=\"Telefone Comercial\"\r\n                              innerRef={register({ required: true })}\r\n                              defaultValue={client.mobile}\r\n                            />\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <Label className=\"form-control-Label\" for=\"\">Celular</Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              id=\"input-phone\"\r\n                              name=\"phone\"\r\n                              type=\"text\"\r\n                              placeholder=\"Celular\"\r\n                              innerRef={register({ required: false })}\r\n                              defaultValue={client.phone}\r\n                            />\r\n                          </FormGroup>\r\n                          {isCpf && (\r\n                            <>\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-occupation\">\r\n                                  Ocupação/Profissão\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  id=\"input-occupation\"\r\n                                  name=\"occupation\"\r\n                                  type=\"text\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={client.occupation}\r\n                                />\r\n                              </FormGroup>\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-mothername\">\r\n                                  Nome da Mãe\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  name=\"mothername\"\r\n                                  id=\"input-mothersName\"\r\n                                  type=\"text\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={client.motherName}\r\n                                />\r\n                              </FormGroup>\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-birthday\">\r\n                                  Data de nascimento\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  id=\"input-birthday\"\r\n                                  name=\"birthdate\"\r\n                                  type=\"date\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={client.birthdate}\r\n                                />\r\n                              </FormGroup>\r\n                            </>\r\n                          )\r\n                          }\r\n                        </Col>\r\n                        <Col lg=\"4\">\r\n                          {/* Address */}\r\n                          <h6 className=\"heading-small text-muted mb-4\">\r\n                            Endereço\r\n                          </h6>\r\n                          <FormGroup>\r\n                            <Label\r\n                              className=\"form-control-Label\"\r\n                              for=\"input-address\"\r\n                            >\r\n                              Endereço\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              name=\"street\"\r\n                              id=\"input-address\"\r\n                              type=\"text\"\r\n                              innerRef={register({ required: true })}\r\n                              defaultValue={address.street}\r\n                            />\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <Label\r\n                              className=\"form-control-Label\"\r\n                              for=\"input-number\"\r\n                            >\r\n                              Número\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              name=\"number\"\r\n                              id=\"input-number\"\r\n                              type=\"text\"\r\n                              innerRef={register({ required: true })}\r\n                              defaultValue={address.number}\r\n                            />\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <Label\r\n                              className=\"form-control-Label\"\r\n                              for=\"input-neighborhood\"\r\n                            >\r\n                              Bairro\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              name=\"neighborhood\"\r\n                              id=\"input-neighborhood\"\r\n                              type=\"text\"\r\n                              innerRef={register({ required: true })}\r\n                              defaultValue={address.neighborhood}\r\n                            />\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <Label\r\n                              className=\"form-control-Label\"\r\n                              for=\"input-complement\"\r\n                            >\r\n                              Complemento\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              id=\"input-complement\"\r\n                              name=\"complement\"\r\n                              type=\"text\"\r\n                              innerRef={register()}\r\n                              defaultValue={address.complement}\r\n                            />\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <Label\r\n                              className=\"form-control-Label\"\r\n                              for=\"input-city\"\r\n                            >\r\n                              Cidade\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              name=\"city\"\r\n                              id=\"input-city\"\r\n                              type=\"text\"\r\n                              innerRef={register({ required: true })}\r\n                              defaultValue={address.city}\r\n                            />\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <Label\r\n                              className=\"form-control-Label\"\r\n                              for=\"input-state\"\r\n                            >\r\n                              Estado\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              name=\"state\"\r\n                              id=\"input-state\"\r\n                              type=\"text\"\r\n                              innerRef={register({ required: true })}\r\n                              defaultValue={address.state}\r\n                            />\r\n                          </FormGroup>\r\n                          <FormGroup>\r\n                            <Label\r\n                              className=\"form-control-Label\"\r\n                              for=\"input-zipCode\"\r\n                            >\r\n                              CEP\r\n                            </Label>\r\n                            <Input\r\n                              className=\"form-control-alternative\"\r\n                              id=\"input-zipCode\"\r\n                              name=\"zipCode\"\r\n                              type=\"text\"\r\n                              innerRef={register({ required: true })}\r\n                              defaultValue={address.zipCode}\r\n                            />\r\n                          </FormGroup>\r\n\r\n                        </Col>\r\n                        <Col lg=\"4\">\r\n                          {/* Address */}\r\n                          <h6 className=\"heading-small text-muted mb-4\">\r\n                            Conta bancária\r\n                          </h6>\r\n\r\n                          <Row>\r\n                            <Col lg=\"2\" className=\"pr-1\">\r\n                              <FormGroup>\r\n                                <Label\r\n                                  className=\"form-control-Label\"\r\n                                >\r\n                                  Banco\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  placeholder=\"Banco\"\r\n                                  name=\"bankCode\"\r\n                                  type=\"text\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={banks.bankCode}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"2\" className=\"pl-1 pr-1\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\">\r\n                                  Agência\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  name=\"agency\"\r\n                                  type=\"text\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={banks.agency}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"3\" className=\"pl-1 pr-1\">\r\n                              <FormGroup>\r\n                                <Label\r\n                                  className=\"form-control-Label\"\r\n                                >\r\n                                  Conta\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  name=\"accountNumber\"\r\n                                  type=\"text\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={banks.accountNumber}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"2\" className=\"pl-1 pr-1\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\">\r\n                                  Dígito\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative .inputNumber\"\r\n                                  name=\"accountDigit\"\r\n                                  type=\"text\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={banks.accountDigit}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"3\" className=\"pl-1\">\r\n\r\n                              <FormGroup>\r\n                                <Label\r\n                                  className=\"form-control-Label\"\r\n                                >\r\n                                  Tipo\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  name=\"accountType\"\r\n                                  type=\"select\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={banks.accountType}\r\n                                >\r\n                                  <option value=\"C\"  >Corrente</option>\r\n                                  <option value=\"P\" >Poupança</option>\r\n                                </Input>\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col>\r\n                              <Alert color=\"info\">\r\n                                <FontAwesomeIcon icon={faInfoCircle} color=\"info\" /> <strong>Regras Número da Conta</strong><br />\r\n\r\n                                Caixa Econômica Federal - São 3 dígitos para o tipo de conta, 8 dígitos para a conta<br />\r\n                                001 – Conta Corrente de Pessoa Física;<br />\r\n                                003 – Conta Corrente de Pessoa Jurídica;<br />\r\n                                013 – Poupança de Pessoa Física;<br />\r\n                                022 – Poupança de Pessoa Jurídica.<br />\r\n                                Ex: Será necessário colocar o tipo de conta (sem os zeros à esquerda) e o número da conta: 130000123.<br />\r\n                                <br />\r\n                                <FontAwesomeIcon icon={faInfoCircle} color=\"info\" /> <strong>Regras Dígito da Conta</strong><br />\r\n                                <br />\r\n                                Deve conter 1 digito numérico; Caso o dígito da conta seja X, substitua por 0.\r\n\r\n                              </Alert>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col xs=\"12\">\r\n                              <hr className=\"my-4\" />\r\n                              <h6 className=\"heading-small text-muted mb-4\">Plano</h6>\r\n                              <div className=\"\">\r\n                                <FormGroup>\r\n                                  <Label>Plano selecionado</Label>\r\n                                  <Input\r\n                                    type=\"select\"\r\n                                    name=\"planId\"\r\n                                    id=\"exampleSelect\"\r\n                                    defaultValue={client.planId}\r\n                                    innerRef={register({ required: true })}\r\n                                  >\r\n                                    {plans.map(plan => (\r\n                                      <option value={plan.id} key={plan.id}>{plan.name}</option>\r\n                                    ))}\r\n                                  </Input>\r\n                                </FormGroup>\r\n                              </div>\r\n\r\n                            </Col>\r\n\r\n                            <Col className='d-flex justify-content-center'>\r\n                              <Button color=\"primary\" className='self-align-center btn-block' >\r\n                                Salvar\r\n                              </Button>\r\n                            </Col>\r\n                          </Row>\r\n                        </Col>\r\n                      </Row>\r\n                    </Form>\r\n                  </div>\r\n\r\n                )}\r\n              </CardBody>\r\n\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default ClientProfile;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\Clients.js",["251","252","253","254","255","256","257","258","259","260","261","262"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useHistory, Link } from \"react-router-dom\";\r\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\r\nimport { MuiThemeProvider, createMuiTheme } from \"@material-ui/core/styles\";\r\n// reactstrap components\r\nimport {\r\n  Badge,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardFooter,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink,\r\n  Table,\r\n  Container,\r\n  Row,\r\n  CardBody,\r\n} from \"reactstrap\";\r\n// core components\r\n\r\nimport { useUsers } from \"../../hooks/users\";\r\nimport { useGateway } from \"../../hooks/getnet\";\r\n\r\nimport Header from \"components/Headers/Header.js\";\r\n\r\nimport api from \"../../services/api\";\r\n\r\nfunction Clients() {\r\n  const gateway = useGateway();\r\n  const history = useHistory();\r\n  const { saveSelectedUserId } = useUsers();\r\n\r\n  const [clients, setClients] = useState([]);\r\n  const [filter, setFilter] = useState(1);\r\n\r\n  useEffect(() => {\r\n    async function loadingClients() {\r\n      const response = await api.get(`/users`);\r\n      let users = []\r\n      let data = response.data\r\n      for (let user of data) {\r\n        let newUser = {\r\n          id: user.id,\r\n          name: user.legalName,\r\n          document: user.document,\r\n          subseller: user.subseller.subsellerId,\r\n          plan: user.plan.name,\r\n          status: user.subseller.status\r\n        }\r\n        users.push(newUser)\r\n      }\r\n\r\n      setClients(users);\r\n    }\r\n    loadingClients();\r\n  }, [filter]);\r\n\r\n  const handleProfile = useCallback(\r\n    (client) => {\r\n      saveSelectedUserId(client.id);\r\n      history.push(\"/admin/client-profile\");\r\n    },\r\n    [history, saveSelectedUserId]\r\n  );\r\n\r\n  const handleCallback = async (id, row) => {\r\n\r\n    let { status, data } = await gateway.callback(id);\r\n    if (status) {\r\n      let newArr = [...clients];\r\n      newArr[row.rowIndex].status = data.status;\r\n      console.log(newArr[row.rowIndex]);\r\n      setClients(newArr);\r\n    }\r\n  };\r\n\r\n  const handleFilter = async (filter) => {\r\n    setFilter(filter);\r\n  };\r\n\r\n  const handleNewClient = useCallback(() => {\r\n    history.push(`/admin/client-register`);\r\n  }, [history]);\r\n\r\n  const getMuiTheme = createMuiTheme({\r\n    shadows: Array(25).fill(\"none\"),\r\n    overrides: {\r\n      MUIDataTableSelectCell: {\r\n        expandDisabled: {\r\n          // Soft hide the button.\r\n          visibility: \"hidden\",\r\n        },\r\n        root: {\r\n          backgroundColor: \"#e9e9e9\",\r\n          padding: \"5px\",\r\n        },\r\n        body: {\r\n          border: \"1px solid rgba(224, 224, 224, 1)\"\r\n        }\r\n      },\r\n      MUIDataTableBodyRow: {\r\n        root: {\r\n          \"&:nth-child(odd)\": {\r\n            backgroundColor: \"#f6f8fa\",\r\n          },\r\n        },\r\n      },\r\n      MUIDataTableBodyCell: {\r\n        root: {\r\n          padding: \"5px\",\r\n        },\r\n      },\r\n\r\n      MuiTableSortLabel: {\r\n        root: {\r\n          color: \"#ffffff\",\r\n          \"&:hover\": {\r\n            color: \"#ffffff\",\r\n\r\n            \"&& $icon\": {\r\n              opacity: 1,\r\n              color: \"#ffffff\",\r\n            },\r\n          },\r\n          \"&$active\": {\r\n            color: \"#ffffff\",\r\n\r\n            // && instead of & is a workaround for https://github.com/cssinjs/jss/issues/1045\r\n            \"&& $icon\": {\r\n              opacity: 1,\r\n              color: \"#ffffff\",\r\n            },\r\n          },\r\n        },\r\n      },\r\n      MUIDataTableHeadCell: {\r\n\r\n      },\r\n\r\n    },\r\n  })\r\n\r\n\r\n  const options = {\r\n    elevation: 0,\r\n    filter: true,\r\n    filterType: \"dropdown\",\r\n    pagination: true,\r\n    rowsPerPage: 20,\r\n    download: true,\r\n    print: true,\r\n    sort: true,\r\n    search: true,\r\n    viewColumns: false,\r\n    selectableRows: \"none\",\r\n    textLabels: {\r\n      body: {\r\n        noMatch: \"Nenhum registro encontrado\",\r\n      },\r\n    },\r\n    sortOrder: {\r\n      name: \"id\",\r\n      direction: \"asc\",\r\n    },\r\n  }\r\n  const dataCols = [\r\n    {\r\n      label: \"ID\",\r\n      name: \"id\",\r\n      options: {\r\n        filter: false,\r\n        customBodyRender: (value) => <Link color=\"link\" to={`/admin/client/${value}`}>{value}</Link>,\r\n      },\r\n    },\r\n    {\r\n      label: \"Nome\",\r\n      name: \"name\",\r\n      options: {\r\n        filter: true,\r\n      },\r\n    },\r\n    {\r\n      label: \"CPF/CNPJ\",\r\n      name: \"document\",\r\n      options: {\r\n        filter: true,\r\n        sort: false\r\n      },\r\n    },\r\n    {\r\n      label: \"Subseller\",\r\n      name: \"subseller\",\r\n      options: {\r\n        filter: true,\r\n        sort: false\r\n      },\r\n    },\r\n    {\r\n      label: \"Status\",\r\n      name: \"status\",\r\n      options: {\r\n        filter: true,\r\n        customBodyRender: (value) => {\r\n          return (<>\r\n            <Badge\r\n              color={value === \"Aprovado Transacionar\"\r\n                ? \"success\"\r\n                : \"Em Análise\" || \"Trativa de Cadastro\" ? \"warning\" : \"danger\"\r\n              }\r\n              pill\r\n            >\r\n              {value}\r\n            </Badge>\r\n          </>);\r\n        },\r\n      },\r\n    },\r\n    {\r\n      label: \"Ações\",\r\n      name: \"id\",\r\n      options: {\r\n        filter: false,\r\n        sort: false,\r\n        customBodyRender: (value, index) => {\r\n          return (<>\r\n            <Button\r\n              size=\"sm\"\r\n              color=\"info\"\r\n              onClick={(e) => {\r\n                handleCallback(value, index);\r\n              }}\r\n\r\n            >\r\n              Atualizar Situação\r\n            </Button>\r\n          </>);\r\n        }\r\n      },\r\n    },\r\n\r\n  ];\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        {/* Table */}\r\n        <Row>\r\n          <div className=\"col\">\r\n            <Card className=\"shadow\">\r\n              <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\">\r\n                <h3 className=\"mb-0\">Clientes</h3>\r\n                <div>\r\n                  <Button color=\"primary\" onClick={handleNewClient}>\r\n                    Cadastrar\r\n                  </Button>\r\n                </div>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <MuiThemeProvider theme={getMuiTheme}>\r\n                  <MUIDataTable\r\n                    title={\"\"}\r\n                    data={clients}\r\n                    columns={dataCols}\r\n                    options={options}\r\n                  />\r\n                </MuiThemeProvider>\r\n              </CardBody>\r\n            </Card>\r\n          </div>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Clients;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\ClientRegister.js",["263"],"\r\nimport React, { useState, useEffect } from \"react\";\r\n\r\n\r\n// reactstrap components\r\nimport { Button, Card, CardHeader, CardBody, FormGroup, Form, Input, Container, Row, Col, Label, Alert } from \"reactstrap\";\r\n// core components\r\n\r\nimport { usePlans } from '../../hooks/plans';\r\nimport { useUsers } from '../../hooks/users';\r\n\r\nimport UserHeader from \"components/Headers/Header\";\r\nimport { cpf as validaCpf, cnpj as validaCnpj } from 'cpf-cnpj-validator';\r\nimport { useForm } from \"react-hook-form\"\r\nimport bancos from \"bancos-brasileiros\"\r\nimport { cnpjMask, cepMask, phoneMask } from \"utils/masks\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\nimport * as Yup from 'yup';\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport { set } from \"date-fns\";\r\n\r\nconst schemaPersonData = Yup.object().shape({\r\n  legalName: Yup.string().required(\"Nome é um campo obrigatório.\").min(8),\r\n  email: Yup.string().email(\"Exemplo: exemplo@monetiz.com.br\").required(\"E-mail é um campo obrigatório.\"),\r\n  document: Yup.string().test('Valida Documento', 'Documento Inválido', value => {\r\n    let v = value.replace(/\\D/g, \"\")\r\n    if (v.length === 11) {\r\n      return validaCpf.isValid(value)\r\n    } else if (v.length === 14) {\r\n      return validaCnpj.isValid(value)\r\n    }\r\n    else {\r\n      return false\r\n    }\r\n  }),\r\n  mobile: Yup.string().min(11, \"Digite no formato (99)99999-9999\").required(\"Telefone é um campo obrigatório.\"),\r\n  zipCode: Yup.string().min(8, \"Digite no formato 55555555 ou 55555-555\")\r\n    .required(\"CEP é um campo obrigatório.\"),\r\n  street: Yup.string().required(\"Rua é um campo obrigatório.\"),\r\n  number: Yup.string().required(\"Número é um campo obrigatório.\"),\r\n  neighborhood: Yup.string().required(\"Bairro é um campo obrigatório.\"),\r\n  agency: Yup.string().matches(/^[0-9]*$/, \"Digite somente números\").required(\"Agência é um campo obrigatório.\"),\r\n  accountNumber: Yup.string().matches(/^[0-9]*$/, \"Digite somente números\").required(\"Conta é um campo obrigatório.\"),\r\n  accountDigit: Yup.string().matches(/^[0-9]*$/, \"Digite somente números\").required(\"Dígito da conta é um campo obrigatório.\").max(1, \"Digito inválido\")\r\n});\r\nfunction ClientRegister() {\r\n  const { userRegister } = useUsers();\r\n  const { getPlans } = usePlans();\r\n  const { register, handleSubmit, errors } = useForm({ resolver: yupResolver(schemaPersonData) });\r\n  const [zipCode, setPostcode] = useState('')\r\n  const [viaCep, setViaCep] = useState({ cep: \"\", state: \"\", city: \"\", neighborhood: \"\", street: \"\" })\r\n  const [isCpf, setIsCpf] = useState(false);\r\n  const [plans, setPlans] = useState([]);\r\n\r\n  useEffect(() => {\r\n    async function loadingPlan() {\r\n      const response = await getPlans();\r\n\r\n      setPlans(response);\r\n    };\r\n\r\n    loadingPlan();\r\n\r\n  }, [getPlans]);\r\n\r\n  const onSubmit = async (data, e) => {\r\n    let { legalName, tradeName, document, stateFiscalDocument, phone, mobile, email, planId, street, number, neighborhood, city, state, zipCode, complement, bankCode, agency, accountNumber, accountType, accountDigit } = data\r\n    let userData = { legalName, tradeName, document, stateFiscalDocument, phone, mobile, email, type: isCpf ? \"pf\" : \"pj\", planId }\r\n    let address = { name: \"Bussines Address\", street, number, neighborhood, city, state, zipCode, complement }\r\n    let bankAccount = {\r\n      bankCode, agency, accountNumber, accountType, accountDigit\r\n    }\r\n    userData.mobile = userData.mobile.replace(/\\D/g, \"\")\r\n    userData.document = userData.document.replace(/\\D/g, \"\")\r\n    userData.stateFiscalDocument = userData.stateFiscalDocument.replace(/\\D/g, \"\")\r\n    userData.phone = userData.phone.replace(/\\D/g, \"\")\r\n    address.zipCode = address.zipCode.replace(/\\D/g, \"\")\r\n    let dataSubmit = {\r\n      user: userData,\r\n      mailingAddressEquals: \"S\",\r\n      address: address,\r\n      bankAccount: bankAccount,\r\n      accepted_contract: \"S\",\r\n      liability_chargeback: \"S\",\r\n      marketplace_store: \"N\",\r\n      payment_plan: 3\r\n    }\r\n\r\n    let res = await userRegister(dataSubmit)\r\n    if (res) {\r\n      e.target.reset();\r\n    }\r\n\r\n  }\r\n  useEffect(() => {\r\n    let str = zipCode.replace(/[^\\d]+/g, '')\r\n    if (str.length >= 8) {\r\n      fetch(`https://brasilapi.com.br/api/cep/v1/${zipCode}`)\r\n        .then(async response => {\r\n          let rs = await response.json();\r\n          if (response.ok) {\r\n            setViaCep(rs)\r\n          }\r\n        })\r\n    }\r\n  }, [zipCode])\r\n  console.log(errors);\r\n  return (\r\n    <>\r\n      <UserHeader />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <Col className=\"order-xl-1\" xl=\"12\">\r\n            <Card className=\"bg-secondary shadow\">\r\n              <CardHeader className=\"bg-white border-0\">\r\n                <Row className=\"align-items-center\">\r\n                  <Col xs=\"8\">\r\n                    <h3 className=\"mb-0\">Cliente</h3>\r\n                  </Col>\r\n                </Row>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <h6 className=\"heading-small text-muted mb-4\">Tipo de conta</h6>\r\n                <Form onSubmit={handleSubmit(onSubmit)}>\r\n                  <Row>\r\n                    <Col>\r\n                      <Row>\r\n                        <Col className=\"mb-3 \">\r\n                          <div className=\"d-flex pl-lg-4\">\r\n                            <div className=\"custom-control custom-radio mb-3\">\r\n                              <Input className=\"\" type=\"radio\" name=\"type\" onChange={() => setIsCpf(true)} value=\"pf\" />\r\n                              <Label className=\"custom-control-Label\" for=\"typeCPF\">CPF</Label>\r\n                            </div>\r\n                            <div className=\"custom-control custom-radio\" style={{ marginLeft: '15px' }}>\r\n                              <Input className=\"c\" type=\"radio\" name=\"type\" defaultChecked onChange={() => setIsCpf(false)} value=\"pj\" />\r\n                              <Label className=\"custom-control-Label\" for=\"typeCNPJ\">CNPJ</Label>\r\n                            </div>\r\n                          </div>\r\n                        </Col>\r\n                      </Row>\r\n                    </Col>\r\n                  </Row>\r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Informações\r\n                  </h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\" for=\"input-name\">{isCpf ? \"Nome\" : \"Razão Social\"}</Label>\r\n                          <Input\r\n\r\n                            name=\"legalName\"\r\n                            id=\"input-name\"\r\n                            type=\"text\"\r\n                            invalid={errors.legalName ? true : false}\r\n                            innerRef={register({ required: true })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\" for='input-email'>Email</Label>\r\n                          <Input\r\n\r\n                            id=\"input-email\"\r\n                            placeholder=\"exemplo@monetiz.com.br\"\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            invalid={errors.email ? true : false}\r\n                            innerRef={register({ required: true })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\" for=\"input-mobile\">\r\n                            Celular\r\n                          </Label>\r\n                          <Input\r\n\r\n                            id=\"input-mobile\"\r\n                            name=\"mobile\"\r\n                            type=\"text\"\r\n                            onChange={e => {\r\n                              const { value } = e.target\r\n                              e.target.value = phoneMask(value)\r\n                            }}\r\n                            invalid={errors.mobile ? true : false}\r\n                            innerRef={register({ required: true })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\" for=\"input-phone\">\r\n                            Telefone Comercial\r\n                          </Label>\r\n                          <Input\r\n                            id=\"input-phone\"\r\n                            name=\"phone\"\r\n                            onChange={e => {\r\n                              const { value } = e.target\r\n                              e.target.value = phoneMask(value)\r\n                            }}\r\n                            type=\"text\"\r\n                            innerRef={register({ required: false })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    {\r\n                      isCpf && (\r\n                        <>\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-cpf\">CPF</Label>\r\n                                <Input\r\n                                  id=\"input-cpf\"\r\n                                  name=\"document\"\r\n                                  type=\"text\"\r\n                                  onChange={e => {\r\n                                    const { value } = e.target\r\n                                    e.target.value = cepMask(value)\r\n                                  }}\r\n                                  innerRef={register({ required: true })}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-occupation\">\r\n                                  Ocupação/Profissão\r\n                                </Label>\r\n                                <Input\r\n\r\n                                  id=\"input-occupation\"\r\n                                  name=\"occupation\"\r\n                                  type=\"text\"\r\n                                  innerRef={register({ required: true })}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-mothername\">\r\n                                  Nome da Mãe\r\n                                </Label>\r\n                                <Input\r\n\r\n                                  name=\"mothername\"\r\n                                  id=\"input-mothersName\"\r\n                                  type=\"text\"\r\n                                  innerRef={register({ required: true })}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-birthday\">\r\n                                  Data de nascimento\r\n                                </Label>\r\n                                <Input\r\n\r\n                                  defaultValue=\"\"\r\n                                  id=\"input-birthday\"\r\n                                  name=\"birthdate\"\r\n                                  type=\"date\"\r\n                                  innerRef={register({ required: true })}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                        </>\r\n                      )\r\n                    }\r\n                    {\r\n                      !isCpf && (\r\n                        <>\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label\r\n                                  className=\"form-control-Label\"\r\n                                  for=\"input-cnpj\"\r\n                                >\r\n                                  CNPJ\r\n                                </Label>\r\n                                <Input\r\n\r\n                                  name=\"document\"\r\n                                  id=\"input-cnpj\"\r\n                                  type=\"text\"\r\n                                  onChange={e => {\r\n                                    const { value } = e.target\r\n                                    e.target.value = cnpjMask(value)\r\n                                  }}\r\n                                  invalid={errors.document ? true : false}\r\n                                  innerRef={register({ required: true })}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label\r\n                                  className=\"form-control-Label\"\r\n                                  for=\"input-state-fiscal\"\r\n                                >\r\n                                  Inscrição estadual\r\n                                </Label>\r\n                                <Input\r\n                                  id=\"input-state-fiscal\"\r\n                                  name=\"stateFiscalDocument\"\r\n                                  innerRef={register({ required: true })}\r\n                                  type=\"text\"\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label\r\n                                  className=\"form-control-Label\"\r\n                                  for=\"input-tradename\"\r\n                                >\r\n                                  Nome fantasia\r\n                                </Label>\r\n                                <Input\r\n                                  id=\"input-tradename\"\r\n                                  name=\"tradeName\"\r\n                                  innerRef={register({ required: true })}\r\n                                  type=\"text\"\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"6\"></Col>\r\n                          </Row>\r\n                        </>\r\n                      )\r\n                    }\r\n                  </div>\r\n                  <hr className=\"my-4\" />\r\n                  {/* Address */}\r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Endereço\r\n                  </h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-zipCode\"\r\n                          >\r\n                            CEP\r\n                          </Label>\r\n                          <Input\r\n                            id=\"input-zipCode\"\r\n                            name=\"zipCode\"\r\n                            onChange={e => {\r\n                              const { value } = e.target\r\n                              setPostcode(value)\r\n                              e.target.value = cepMask(value)\r\n                            }}\r\n                            type=\"text\"\r\n                            invalid={errors.zipCode ? true : false}\r\n                            innerRef={register({ required: true })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col md=\"8\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-address\"\r\n                          >\r\n                            Endereço\r\n                          </Label>\r\n                          <Input\r\n                            invalid={errors.street ? true : false}\r\n                            name=\"street\"\r\n                            id=\"input-address\"\r\n                            type=\"text\"\r\n                            defaultValue={viaCep.street}\r\n                            innerRef={register({ required: true })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-number\"\r\n                          >\r\n                            Número\r\n                          </Label>\r\n                          <Input\r\n                            invalid={errors.number ? true : false}\r\n                            name=\"number\"\r\n                            id=\"input-number\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-neighborhood\"\r\n                          >\r\n                            Bairro\r\n                          </Label>\r\n                          <Input\r\n                            invalid={errors.neighborhood ? true : false}\r\n                            name=\"neighborhood\"\r\n                            id=\"input-neighborhood\"\r\n                            type=\"text\"\r\n                            defaultValue={viaCep.neighborhood}\r\n                            innerRef={register({ required: true })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-complement\"\r\n                          >\r\n                            Complemento\r\n                          </Label>\r\n                          <Input\r\n\r\n                            id=\"input-complement\"\r\n                            name=\"complement\"\r\n                            type=\"text\"\r\n                            innerRef={register()}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-city\"\r\n                          >\r\n                            Cidade\r\n                          </Label>\r\n                          <Input\r\n\r\n                            name=\"city\"\r\n                            id=\"input-city\"\r\n                            type=\"text\"\r\n                            defaultValue={viaCep.city}\r\n                            innerRef={register({ required: true })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-state\"\r\n                          >\r\n                            Estado\r\n                          </Label>\r\n                          <Input\r\n\r\n                            name=\"state\"\r\n                            id=\"input-state\"\r\n                            type=\"text\"\r\n                            defaultValue={viaCep.state}\r\n                            innerRef={register({ required: true })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n\r\n                    </Row>\r\n                  </div>\r\n                  <hr className=\"my-4\" />\r\n                  <h6 className=\"heading-small text-muted mb-4\">Conta bancária</h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col>\r\n                        <Alert color=\"warning\">\r\n                          <FontAwesomeIcon icon={faInfoCircle} color=\"info\" /> <strong>Regras Número da Conta</strong><br />\r\n                          <br />\r\n                          Deve conter somente digitos numéricos; Para contas com domicílio na Caixa Econômica Federal, o preenchimento deve seguir o seguinte modelo:<br />\r\n                          <br />\r\n                          São 3 dígitos para o tipo de conta, 8 dígitos para a conta, os tipos de conta são os seguintes:<br />\r\n                          001 – Conta Corrente de Pessoa Física;<br />\r\n                          003 – Conta Corrente de Pessoa Jurídica;<br />\r\n                          013 – Poupança de Pessoa Física;<br />\r\n                          022 – Poupança de Pessoa Jurídica.<br />\r\n                          <br />\r\n                          Exemplo: no campo de conta, será necessário colocar o tipo de conta (sem os zeros à esquerda) e o número da conta: 100000123.<br />\r\n                          <br />\r\n                          <FontAwesomeIcon icon={faInfoCircle} color=\"info\" /> <strong>Regras Dígito da Conta</strong><br />\r\n                          <br />\r\n                          Deve conter 1 digito numérico; Caso o dígito da conta seja X, substitua por 0.\r\n\r\n                        </Alert>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n\r\n                      <Col lg=\"3\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                          >\r\n                            Código do banco\r\n                          </Label>\r\n                          <Input\r\n\r\n                            placeholder=\"Banco\"\r\n                            name=\"bankCode\"\r\n                            type=\"select\"\r\n                            innerRef={register({ required: true })}\r\n                          >\r\n                            {bancos.map(bank => {\r\n                              return (<option value={bank.Code} key={bank.Code}>{`${bank.Code} - ${bank.Name}`}</option>)\r\n                            })}\r\n                          </Input>\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"2\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\">\r\n                            Agência\r\n                          </Label>\r\n                          <Input\r\n                            invalid={errors.agency ? true : false}\r\n                            name=\"agency\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"3\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\">\r\n                            Número da conta\r\n                          </Label>\r\n                          <Input\r\n                            invalid={errors.accountNumber ? true : false}\r\n                            name=\"accountNumber\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"1\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\">\r\n                            <span href=\"#\" id=\"infoDigit\" className=\"text-info\">\r\n                              Dígito\r\n                            </span>\r\n\r\n                          </Label>\r\n                          <Input\r\n                            invalid={errors.accountDigit ? true : false}\r\n                            name=\"accountDigit\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"3\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                          >\r\n                            Tipo da conta\r\n                          </Label>\r\n                          <Input\r\n                            name=\"accountType\"\r\n                            type=\"select\"\r\n                            innerRef={register({ required: true })}\r\n                          >\r\n                            <option value=\"C\" >Conta Corrente</option>\r\n                            <option value=\"P\" >Conta Poupança</option>\r\n                          </Input>\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n                  <hr className=\"my-4\" />\r\n                  <h6 className=\"heading-small text-muted mb-4\">Plano</h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <FormGroup>\r\n                      <Label>Plano selecionado</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"planId\"\r\n                        id=\"exampleSelect\"\r\n                        innerRef={register({ required: true })}\r\n                      >\r\n                        {plans.map(plan => (\r\n                          <option value={plan.id} key={plan.id}>{plan.name}</option>\r\n                        ))}\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </div>\r\n                  <Col className='d-flex justify-content-center'>\r\n                    <Button color=\"primary\" className='self-align-center' >\r\n                      Confirmar\r\n                    </Button>\r\n                  </Col>\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default ClientRegister;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\Plans.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\PlanRegister.js",["264","265","266","267","268","269","270","271","272","273","274","275","276","277","278"],"\r\nimport React, { useState, useEffect, useRef } from \"react\";\r\nimport { useForm } from \"react-hook-form\";\r\n\r\nimport { Button, Card, CardHeader, CardBody, FormGroup, Form, Input, Container, Row, Col, CardFooter, Table, Modal, ModalHeader, ModalBody, ModalFooter, Label, DropdownItem, DropdownMenu, DropdownToggle, UncontrolledDropdown } from \"reactstrap\";\r\n\r\n// core components\r\nimport UserHeader from \"components/Headers/Header\";\r\nimport { usePlans } from '../../hooks/plans'\r\n\r\n\r\nfunction PlanMonetizPaySettings(){\r\n\r\n  const { register, handleSubmit } = useForm()\r\n  const { savePlans } = usePlans();\r\n \r\n  \r\n\r\n  \r\n  const plainSubmit = async (data) => {\r\n    console.log(data);\r\n    await savePlans(data)\r\n  }\r\n\r\n\r\n  \r\n  return (\r\n    <>\r\n      <UserHeader />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <Col>\r\n            <Card className=\"shadow\">\r\n              <CardBody>\r\n                <Row className=\"justify-content-center\">\r\n                  <Col xs=\"12\" md=\"9\">\r\n                    <Card className=\"border-0\">\r\n                     \r\n                      <CardBody>\r\n                        <Row>\r\n                          <Col sm=\"3\">\r\n                            <h2>Planos</h2>\r\n                            <p>\r\n                              Cadastre planos,\r\n                              defina comissões e planos personalizados.\r\n                            </p>\r\n                          </Col>\r\n                          <Col sm=\"9\">\r\n                            <Card className=\"bg-secondary shadow\">                              \r\n                              <CardBody>\r\n                                <Form onSubmit={handleSubmit(plainSubmit)} id='form'>\r\n                                  <Row>\r\n                                    <Col>\r\n                                      <h6 className=\"heading-small text-muted mb-4\">Informações</h6>\r\n                                      <FormGroup>\r\n                                        <label className=\"form-control-label\" htmlFor=\"input-name\">\r\n                                          Nome\r\n                                          </label>\r\n                                        <Input\r\n                                          className=\"form-control-alternative\"\r\n                                          id=\"input-name\"\r\n                                          type=\"text\"\r\n                                          name=\"name\"\r\n                                          innerRef={register}\r\n                                        />\r\n                                      </FormGroup>\r\n                                    </Col>\r\n                                  </Row>\r\n                                  <Row>\r\n                                    <Col md=\"6\">\r\n                                      <label className=\"form-control-label\">\r\n                                        Status\r\n                                      </label>\r\n                                      <div className=\"d-flex mt-3\">\r\n\r\n                                        <FormGroup>\r\n                                          <label className=\"custom-toggle\">\r\n                                            <Input name=\"status\" type=\"checkbox\" innerRef={register} />\r\n                                            <span className=\"custom-toggle-slider rounded-circle\" />\r\n                                          </label>\r\n                                        </FormGroup>\r\n                                        <span className=\"pl-1\">Ativar Plano</span>\r\n                                      </div>\r\n                                    </Col>\r\n                                    <Col md=\"6\">\r\n                                      <label className=\"form-control-label\">\r\n                                        Tipo\r\n                                        </label>\r\n                                      <FormGroup>\r\n                                        <Input type=\"select\" name=\"type\" innerRef={register} >\r\n                                          <option value=\"PUBLIC\">Público</option>\r\n                                          <option value=\"EXCLUSIVE\">Personalizado</option>\r\n                                        </Input>\r\n                                      </FormGroup>\r\n                                    </Col>\r\n                                  </Row>\r\n                                  <Row>\r\n                                    <Col className='d-flex justify-content-center'>\r\n                                      <Button color=\"primary\" className='self-align-center' type='submit' form='form'>\r\n                                        Confirmar\r\n                                      </Button>\r\n                                    </Col>\r\n                                  </Row>\r\n                                </Form>\r\n                              </CardBody>\r\n                            </Card>                            \r\n                          </Col>\r\n                        </Row>\r\n                      </CardBody>\r\n                    </Card>\r\n                  </Col>\r\n                </Row>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default PlanMonetizPaySettings;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\PlanSettings.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\chargebacks\\ChargebackSettings.js",["279","280","281","282"],"\r\nimport React, { useState, useCallback, useEffect } from \"react\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Container,\r\n  Row,\r\n  Col,\r\n\r\n} from \"reactstrap\";\r\n\r\nimport { format, parseISO } from 'date-fns';\r\nimport { formatPrice } from '../../utils/format';\r\n\r\nimport { useChargebacks } from '../../hooks/chargebacks';\r\n// core components\r\nimport UserHeader from \"components/Headers/Header\";\r\nimport api from \"services/api\";\r\n\r\nfunction ChargebackSettings(){\r\n\r\n  const {getSelectedChargeback  } = useChargebacks();\r\n\r\n\r\n  const [client, setClient] = useState({});\r\n  const [chargeback, setChargeback] = useState({});\r\n\r\n  const [plans, setPlans] = useState([]);\r\n  const [planSelected, setPlanSelected] = useState(null);\r\n  const chargeback_id = getSelectedChargeback();\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    async function loadingData(){\r\n      const response = await api.get(`/chargebacks/show/${chargeback_id}`);\r\n\r\n\r\n    \r\n      setClient(response.data.user);\r\n      setChargeback(response.data);\r\n    }\r\n    loadingData();\r\n  },[chargeback_id])\r\n\r\n  const handleSubmit = useCallback((e) => {\r\n    e.preventDefault();\r\n\r\n    // const data = {\r\n    //   id:client.id,\r\n    //   name,\r\n    //   email,\r\n    //   cpf,\r\n    //   celular,\r\n    //   status,\r\n    //   plan_id: planSelected\r\n    // }\r\n    // updateUser(data)\r\n  },[])\r\n\r\n  return (\r\n    <>\r\n      <UserHeader />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <Col className=\"order-xl-1\" xl=\"12\">\r\n            <Card className=\"bg-secondary shadow\">\r\n              <CardHeader className=\"bg-white border-0\">\r\n                <Row className=\"align-items-center\">\r\n                  <Col xs=\"8\">\r\n                    <h3 className=\"mb-0\">Chargeback</h3>\r\n                  </Col>\r\n                </Row>\r\n              </CardHeader>\r\n              <CardBody>\r\n                {client && (\r\n                  <Form onSubmit={(e) => handleSubmit(e)} id=\"form\">\r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Informações do cliente\r\n                  </h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-username\"\r\n                          >\r\n                            Cliente\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-username\"\r\n                            value={client.name}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-email\"\r\n                          >\r\n                            E-mail\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-email\"\r\n                            value={client.email}\r\n                            type=\"email\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-first-name\"\r\n                          >\r\n                            CPF\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-first-name\"\r\n                            value={client.cpf}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-last-name\"\r\n                          >\r\n                            celular\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-last-name\"\r\n                            value={client.celular}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n\r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Informações do Chargeback\r\n                  </h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-username\"\r\n                          >\r\n                            Valor\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-username\"\r\n                            value={formatPrice(chargeback.value)}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-email\"\r\n                          >\r\n                            Status\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-email\"\r\n                            value={chargeback.status ? \"Pago\" : \"Inadimplente\"}\r\n                            type=\"email\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    { chargeback && chargeback.createdAt && (\r\n                      <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-first-name\"\r\n                          >\r\n                            Data requerido\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-first-name\"\r\n                            value={format(parseISO(chargeback.createdAt), 'dd/MM/yyyy')}\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-last-name\"\r\n                          >\r\n                            Data limite\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-last-name\"\r\n                            value={format(parseISO(chargeback.due_date), 'dd/MM/yyyy')}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    )}\r\n                  </div>\r\n\r\n                \r\n                </Form>\r\n                )}\r\n\r\n              <Col className='d-flex justify-content-center'>\r\n                    {\r\n                      client.status \r\n                      ? (                    \r\n                        <Button color=\"warning\" outline className='self-align-center' type='submit' form='form'>\r\n                          Bloquear Conta\r\n                        </Button>\r\n                      )\r\n                      : (                    \r\n                        <Button color=\"success\" outline className='self-align-center' type='submit' form='form'>\r\n                          Desbloquear Conta\r\n                        </Button>\r\n                      )\r\n                    }\r\n              </Col>\r\n              </CardBody>\r\n\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default ChargebackSettings;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\chargebacks\\Chargebacks.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\GroupsCreate.js",["283","284","285","286"],"import React, { useEffect, useState } from 'react'\r\nimport Header from \"components/Headers/Header.js\";\r\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, CustomInput, Form, FormGroup, Input, Label, Row, Table } from 'reactstrap';\r\nimport api from 'services/api';\r\nimport { useHistory } from 'react-router-dom';\r\nfunction GroupsCreate() {\r\n    const [resources, setResources] = useState([])\r\n    const [select, setSelect] = useState([])\r\n    const [allChecked, setAllChecked] = useState(false)\r\n    const [group, setGroup] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        let fetchResources = async () => {\r\n            api.get(\"/admin/resource\")\r\n                .then(result => {\r\n                    let data = result.data\r\n                    data.map(item => {\r\n                        setSelect(oldArray => [...oldArray, { id: item.id, isChecked: false }])\r\n                    })\r\n                    setResources(result.data)\r\n                })\r\n        }\r\n        fetchResources()\r\n\r\n    }, [])\r\n    \r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n       let data = {group:group, resources:select}\r\n       api.post(\"/admin/groups\",data)\r\n       .then(data=>{\r\n           console.log(data.data.id);\r\n           history.push(`user-group-update/${data.data.id}`)\r\n       })\r\n    }\r\n\r\n    const handleAllChecked = (event) => {\r\n        let allChecked = false\r\n        let array = select.map(item => {\r\n            return { ...item, isChecked: event.target.checked }\r\n        })\r\n        setAllChecked(event.target.checked)\r\n        setSelect(select => array)\r\n    }\r\n\r\n    const handleCheckChieldElement = (event) => {\r\n\r\n        let array = select.map(item => {\r\n            if (item.id === parseInt(event.target.value)) {\r\n                console.log(`item: ${item.id}`);\r\n                return { ...item, isChecked: event.target.checked }\r\n            }\r\n\r\n            return item\r\n        })\r\n        let slt = array.filter(obj => { return obj.isChecked === true })\r\n        if (slt.length === select.length) {\r\n            setAllChecked(true)\r\n        } else {\r\n            setAllChecked(false)\r\n        }\r\n        setSelect(array)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            {/* Page content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xs=\"12\" md=\"9\">\r\n                                        <Card className=\"border-0\">\r\n                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                <h3 className=\"mb-0\">Grupos</h3>\r\n                                            </CardHeader>\r\n                                            <CardBody>\r\n                                                <Row>\r\n                                                    <Col sm=\"4\">\r\n                                                        <h2>Grupos</h2>\r\n                                                        <p>\r\n                                                            Crie grupos de trabalho e gerencie as permissões de acesso de cada grupo.\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                    <Col sm=\"8\">\r\n                                                        <Card className=\"shadow\">\r\n                                                            <Form onSubmit={handleSubmit}>\r\n                                                                <CardBody>\r\n\r\n                                                                    <FormGroup className=\"border-bottom-1\">\r\n                                                                        <Label>Nome<span className=\"text-red\">*</span></Label>\r\n                                                                        <Input name=\"name\" id=\"name\" type=\"text\" required={true}  onChange={e=>setGroup(e.target.value)}/>\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <div className=\"custom-control custom-checkbox mb-3\">\r\n                                                                        <input\r\n                                                                            className=\"custom-control-input\"\r\n                                                                            id=\"checkAll\"\r\n                                                                            name=\"checkAll\"\r\n                                                                            type=\"checkbox\"\r\n                                                                            checked={allChecked}\r\n                                                                            onChange={handleAllChecked}\r\n                                                                        />\r\n                                                                        <label className=\"custom-control-label\" htmlFor=\"checkAll\">\r\n                                                                            Este grupo terá permissão total\r\n                                                                        </label>\r\n                                                                    </div>\r\n\r\n                                                                    <ul style={{ listStyleType: \"none\" }}>\r\n                                                                        {resources?.map(item => {\r\n                                                                            let slt = select.filter(obj => { return obj.id === item.id })\r\n                                                                            let checked = slt[0].isChecked ? \"checked\" : \"\"\r\n                                                                            return (\r\n                                                                                <li key={item.id}>\r\n                                                                                    <div className=\"custom-control custom-checkbox mb-3\">\r\n                                                                                        <input\r\n                                                                                            className=\"custom-control-input\"\r\n                                                                                            id={item.alias}\r\n                                                                                            name={item.name}\r\n                                                                                            type=\"checkbox\"\r\n                                                                                            checked={checked}\r\n                                                                                            onChange={handleCheckChieldElement}\r\n                                                                                            label={item.name}\r\n                                                                                            value={item.id}\r\n                                                                                        />\r\n                                                                                        <label className=\"custom-control-label\" htmlFor={item.alias}>\r\n                                                                                            {item.name}\r\n                                                                                        </label>\r\n                                                                                    </div>\r\n                                                                                </li>\r\n                                                                            )\r\n                                                                        })}\r\n                                                                    </ul>\r\n\r\n                                                                </CardBody>\r\n                                                                <CardFooter>\r\n                                                                <Button  type=\"reset\">Cancelar</Button>\r\n                                                                    <Button color=\"primary\" type=\"submit\">Salvar</Button>\r\n                                                                </CardFooter>\r\n                                                            </Form>\r\n\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </CardBody>\r\n\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default GroupsCreate","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Users.js",["287","288","289","290","291","292","293"],"import React, { useEffect, useState, useCallback } from 'react'\r\nimport Header from \"components/Headers/Header.js\";\r\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, Row, Table } from 'reactstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { Link } from 'react-router-dom';\r\nimport api from 'services/api';\r\n\r\nfunction Users() {\r\n    const [selectGroup, setSelectGroup] = useState([])\r\n    const [deleteGroup, setDeleteGroup] = useState(false)\r\n    const [groups, setGroups] = useState([])\r\n    const [delectedGroup, setDeletedG] = useState(false)\r\n\r\n    const [selectUser, setSelectUser] = useState([])\r\n    const [deleteUser, setDeleteUser] = useState(false)\r\n    const [users, setUsers] = useState([])\r\n\r\n    useEffect(() => {\r\n        if (selectGroup.length > 0) {\r\n            setDeleteGroup(true)\r\n        } else {\r\n            setDeleteGroup(false)\r\n        }\r\n    }, [selectGroup])\r\n    useEffect(() => {\r\n        let fetchGroups = async () => {\r\n            await api.get(\"/admin/groups\")\r\n                .then(result => {\r\n                    let data = result.data\r\n                    console.log(data);\r\n                    setGroups(data)\r\n                })\r\n        }\r\n        let fetchUsers = async () => {\r\n            await api.get(\"/admin/users\")\r\n                .then(result => {\r\n                    let data = result.data\r\n\r\n                    setUsers(result.data)\r\n                })\r\n        }\r\n        fetchGroups()\r\n        fetchUsers()\r\n\r\n    }, [delectedGroup])\r\n    const buttonEditGroup = (cell, row) => {\r\n        return (\r\n            <Link to={`user-group-update/${cell}`} className=\"btn btn-sm btn-primary\" color=\"primary\" >Editar</Link>\r\n        )\r\n    }\r\n    const collGroup = useCallback((id) => {\r\n        console.log(id);\r\n        let label = groups?.find(gr => gr.id === id)\r\n        return (\r\n            label.name\r\n        )\r\n    }, [groups])\r\n    const columnsGroups = [\r\n        {\r\n            dataField: 'name',\r\n            text: 'Nome'\r\n        },\r\n        {\r\n            dataField: 'id',\r\n            text: '',\r\n            formatter: buttonEditGroup\r\n        }];\r\n    const columnsUsers = [\r\n        {\r\n            dataField: 'id',\r\n            text: 'Id',\r\n            hidden: true\r\n        },\r\n        {\r\n            dataField: 'email',\r\n            text: 'Email'\r\n        },\r\n        {\r\n            dataField: 'groupId',\r\n            text: 'Grupo',\r\n            //formatter: (cell, row) =>collGroup(cell)\r\n        },\r\n        {\r\n            dataField: 'action',\r\n            text: ''\r\n        }];\r\n\r\n    const selectRowGroups = {\r\n        mode: 'checkbox',\r\n        clickToSelect: true,\r\n        bgColor: '#fefce7',\r\n        onSelect: (row, isSelect, rowIndex, e) => {\r\n            if (isSelect) {\r\n                setSelectGroup(old => [...old, row.id])\r\n            } else {\r\n                setSelectGroup(selectGroup.filter(item => item !== row.id))\r\n            }\r\n        },\r\n        onSelectAll: (isSelect, rows, e) => {\r\n            if (isSelect) {\r\n                rows.map(row => {\r\n                    setSelectGroup(old => [...old, row.id])\r\n                })\r\n            } else {\r\n                setSelectGroup([])\r\n            }\r\n        },\r\n    };\r\n    const selectRowUsers = {\r\n        mode: 'checkbox',\r\n        clickToSelect: true,\r\n        bgColor: '#fefce7',\r\n        onSelect: (row, isSelect, rowIndex, e) => {\r\n            if (isSelect) {\r\n                setSelectUser(old => [...old, row.id])\r\n            } else {\r\n                setSelectUser(selectUser.filter(item => item !== row.id))\r\n            }\r\n        },\r\n        onSelectAll: (isSelect, rows, e) => {\r\n            if (isSelect) {\r\n                rows.map(row => {\r\n                    setSelectUser(old => [...old, row.id])\r\n                })\r\n            } else {\r\n                setSelectUser([])\r\n            }\r\n        },\r\n    };\r\n\r\n    const onDeleteGroups = (e) => {\r\n        e.preventDefault()\r\n        api.delete('/admin/group', { data: selectGroup })\r\n            .then((result) => {\r\n                let data = result.data\r\n                setDeletedG(false)\r\n                setSelectGroup(old => [])\r\n                setDeleteGroup(false)\r\n\r\n            }).catch((err) => {\r\n            });\r\n    }\r\n    return (\r\n        <>\r\n            <Header />\r\n            {/* Page content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xs=\"12\" md=\"9\">\r\n                                        <Card className=\"border-0\">\r\n                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                <h3 className=\"mb-0\">Usuários</h3>\r\n                                            </CardHeader>\r\n                                            <CardBody>\r\n                                                <Row>\r\n                                                    <Col sm=\"4\">\r\n                                                        <h2>Grupos</h2>\r\n                                                        <p>\r\n                                                            Crie grupos de trabalho e gerencie as permissões de acesso de cada grupo.\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                    <Col sm=\"8\">\r\n                                                        <Card className=\"shadow\">\r\n                                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                                <p>Você tem {groups.length} grupos</p>\r\n                                                                <Link to=\"user-group\" className=\"btn btn-primary btn-sm\">+Novo grupo</Link>\r\n                                                            </CardHeader>\r\n                                                            <CardBody>\r\n                                                                <BootstrapTable\r\n                                                                    keyField='id'\r\n                                                                    data={[...groups]}\r\n                                                                    columns={columnsGroups}\r\n                                                                    selectRow={selectRowGroups}\r\n                                                                    bootstrap4={true}\r\n                                                                    bordered={false}\r\n                                                                />\r\n                                                            </CardBody>\r\n                                                            <CardFooter>\r\n                                                                <div><Button color=\"danger\" size=\"sm\" disabled={!deleteGroup} onClick={e => onDeleteGroups(e)}> Excluir Selecionados</Button></div>\r\n                                                            </CardFooter>\r\n                                                        </Card>\r\n                                                        <Card className=\"shadow mt-3\">\r\n                                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                                <p>Você tem {users.length} usuários</p>\r\n                                                                <Link to=\"user-create\" className=\"btn btn-primary btn-sm\">+Novo Usuário</Link>\r\n                                                            </CardHeader>\r\n                                                            <CardBody>\r\n                                                                <BootstrapTable\r\n                                                                    keyField='id'\r\n                                                                    data={users}\r\n                                                                    columns={columnsUsers}\r\n                                                                    selectRow={selectRowUsers}\r\n                                                                    bootstrap4={true}\r\n                                                                    bordered={false}\r\n                                                                />\r\n                                                            </CardBody>\r\n                                                            <CardFooter>\r\n                                                                <div><Button color=\"danger\" size=\"sm\" disabled={!deleteUser} > Excluir Selecionados</Button></div>\r\n                                                            </CardFooter>\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </CardBody>\r\n\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default Users","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\GroupsUpdate.js",["294","295","296","297","298"],"import React, { useEffect, useState } from 'react'\r\nimport Header from \"components/Headers/Header\";\r\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, CustomInput, Form, FormGroup, Input, Label, Row, Table } from 'reactstrap';\r\nimport api from 'services/api';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nfunction GroupsUpdate() {\r\n    const [resources, setResources] = useState([])\r\n    const [select, setSelect] = useState([])\r\n    const [allChecked, setAllChecked] = useState(false)\r\n    const [group, setGroup] = useState(\"\")\r\n    const {id} = useParams()\r\n\r\n    useEffect(() => {\r\n        let groupResources = [] \r\n        let fetchGroup = async () => {\r\n            await api.get(`/admin/group?id=${id}`).then(e=>{\r\n                let data = e.data\r\n                groupResources = data.resources\r\n                setGroup(data.name)\r\n            })\r\n        }\r\n        fetchGroup()        \r\n        let fetchResources = async () => {\r\n            await api.get(\"/admin/resource\")\r\n                .then(result => {\r\n                    let data = result.data                    \r\n                    data.map(item => {\r\n                        let filter = groupResources.filter(obj => {                          \r\n                           return  obj.id === item.id\r\n                        })\r\n                        let checked = filter.length > 0\r\n                        setSelect(oldArray => [...oldArray, { id: item.id, isChecked: checked }])\r\n                    })\r\n                    setResources(result.data)\r\n                })\r\n        }\r\n        fetchResources()\r\n    }, [])\r\n    \r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n       let data = {group:group, resources:select}\r\n       api.post(`/admin/group?id=${id}`,data)\r\n       .then(data=>{\r\n           console.log(data.data);\r\n       })\r\n    }\r\n\r\n    const handleAllChecked = (event) => {\r\n        let allChecked = false\r\n        let array = select.map(item => {\r\n            return { ...item, isChecked: event.target.checked }\r\n        })\r\n        setAllChecked(event.target.checked)\r\n        setSelect(select => array)\r\n    }\r\n\r\n    const handleCheckChieldElement = (event) => {\r\n\r\n        let array = select.map(item => {\r\n            if (item.id === parseInt(event.target.value)) {\r\n                console.log(`item: ${item.id}`);\r\n                return { ...item, isChecked: event.target.checked }\r\n            }\r\n\r\n            return item\r\n        })\r\n        let slt = array.filter(obj => { return obj.isChecked === true })\r\n        if (slt.length === select.length) {\r\n            setAllChecked(true)\r\n        } else {\r\n            setAllChecked(false)\r\n        }\r\n        setSelect(array)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            {/* Page content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xs=\"12\" md=\"9\">\r\n                                        <Card className=\"border-0\">\r\n                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                <h3 className=\"mb-0\">Grupos</h3>\r\n                                            </CardHeader>\r\n                                            <CardBody>\r\n                                                <Row>\r\n                                                    <Col sm=\"4\">\r\n                                                        <h2>Grupos</h2>\r\n                                                        <p>\r\n                                                            Crie grupos de trabalho e gerencie as permissões de acesso de cada grupo.\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                    <Col sm=\"8\">\r\n                                                        <Card className=\"shadow\">\r\n                                                            <Form onSubmit={handleSubmit}>\r\n                                                                <CardBody>\r\n\r\n                                                                    <FormGroup className=\"border-bottom-1\">\r\n                                                                        <Label>Nome<span className=\"text-red\">*</span></Label>\r\n                                                                        <Input name=\"name\" id=\"name\" type=\"text\" defaultValue={group} required={true}  onChange={e=>setGroup(e.target.value)}/>\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <div className=\"custom-control custom-checkbox mb-3\">\r\n                                                                        <input\r\n                                                                            className=\"custom-control-input\"\r\n                                                                            id=\"checkAll\"\r\n                                                                            name=\"checkAll\"\r\n                                                                            type=\"checkbox\"\r\n                                                                            checked={allChecked}\r\n                                                                            onChange={handleAllChecked}\r\n                                                                        />\r\n                                                                        <label className=\"custom-control-label\" htmlFor=\"checkAll\">\r\n                                                                            Este grupo terá permissão total\r\n                                                                        </label>\r\n                                                                    </div>\r\n\r\n                                                                    <ul style={{ listStyleType: \"none\" }}>\r\n                                                                        {resources?.map(item => {\r\n                                                                            let slt = select.filter(obj => { return obj.id === item.id })\r\n                                                                            let checked = slt[0].isChecked ? \"checked\" : \"\"\r\n                                                                            return (\r\n                                                                                <li key={item.id}>\r\n                                                                                    <div className=\"custom-control custom-checkbox mb-3\">\r\n                                                                                        <input\r\n                                                                                            className=\"custom-control-input\"\r\n                                                                                            id={item.alias}\r\n                                                                                            name={item.name}\r\n                                                                                            type=\"checkbox\"\r\n                                                                                            checked={checked}\r\n                                                                                            onChange={handleCheckChieldElement}\r\n                                                                                            label={item.name}\r\n                                                                                            value={item.id}\r\n                                                                                        />\r\n                                                                                        <label className=\"custom-control-label\" htmlFor={item.alias}>\r\n                                                                                            {item.name}\r\n                                                                                        </label>\r\n                                                                                    </div>\r\n                                                                                </li>\r\n                                                                            )\r\n                                                                        })}\r\n                                                                    </ul>\r\n\r\n                                                                </CardBody>\r\n                                                                <CardFooter>\r\n                                                                <Button  type=\"reset\">Cancelar</Button>\r\n                                                                    <Button color=\"primary\" type=\"submit\">Salvar</Button>\r\n                                                                </CardFooter>\r\n                                                            </Form>\r\n\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </CardBody>\r\n\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default GroupsUpdate","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\UserCreate.js",["299","300","301","302","303","304"],"import React, { useEffect, useState } from 'react'\r\nimport Header from \"components/Headers/Header.js\";\r\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, CustomInput, Form, FormFeedback, FormGroup, Input, Label, Row, Table } from 'reactstrap';\r\nimport api from 'services/api';\r\nimport {useForm} from \"react-hook-form\"\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nconst UserCreate = () => {\r\n    const history = useHistory();\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [groups, setGroups] = useState()\r\n    useEffect(() => {\r\n        let fetchGroups = async () => {\r\n            await api.get(\"/admin/groups\")\r\n                .then(result => {\r\n                    let data = result.data\r\n                    setGroups(data)\r\n                })\r\n        }\r\n        fetchGroups()\r\n    }, [])\r\n\r\n    const onSubmit = async data => {\r\n        await api.post(\"/admin/user\",data)\r\n        .then((result) => {\r\n            console.log(result);\r\n            \r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Header />\r\n            {/* Page content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xs=\"12\" md=\"9\">\r\n                                        <Card className=\"border-0\">\r\n                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                <h3 className=\"mb-0\">Usuários</h3>\r\n                                            </CardHeader>\r\n                                            <CardBody>\r\n                                                <Row>\r\n                                                    <Col sm=\"4\">\r\n                                                        <h2>Grupos</h2>\r\n                                                        <p>\r\n                                                            Gerencie os usuários ativos\r\n                                                            e vincule-os em grupos de\r\n                                                            trabalho.\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                    <Col sm=\"8\">\r\n                                                        <Card className=\"shadow\">\r\n                                                            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                                                                <CardBody>                                                                \r\n                                                                    <FormGroup>\r\n                                                                        <Label>Email<span className=\"text-red\">*</span></Label>\r\n                                                                        <Input type=\"email\" name=\"email\" innerRef={register({ required: true })} />                                                                        \r\n                                                                    </FormGroup>\r\n                                                                    <FormGroup>\r\n                                                                        <Label>Grupo<span className=\"text-red\">*</span></Label>\r\n                                                                        <Input type=\"select\" name=\"groupid\" innerRef={register({ required: true })} >\r\n                                                                            {groups?.map(group => {\r\n                                                                                return(<option key={group.id} value={group.id}>{group.name}</option>)\r\n                                                                            })}\r\n                                                                        </Input>                                                                        \r\n                                                                    </FormGroup>\r\n                                                                </CardBody>\r\n                                                                <CardFooter>\r\n                                                                    <Button color=\"primary\" type=\"submit\">Salvar</Button>\r\n                                                                </CardFooter>\r\n                                                            </Form>\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </CardBody>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default UserCreate","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Login.js",["305"],"import React from \"react\";\r\nimport logo from \"assets/img/brand/logo.svg\"\r\nimport { useForm } from \"react-hook-form\"\r\n\r\nimport { useAuth } from \"hooks/auth\"\r\n\r\n\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  InputGroup,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\n\r\nconst Login = () => {\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const auth = useAuth()\r\n\r\n  const onSubmit = async(data) => {\r\n    auth.signIn(data)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Col lg=\"5\" md=\"7\">\r\n        <Card className=\"bg-secondary shadow border-0\">\r\n          <CardHeader className=\"bg-transparent pb-5\">\r\n            <div className=\"text-muted text-center mt-2 mb-3\">\r\n              <small>Login</small>\r\n            </div>\r\n            <div className=\"btn-wrapper text-center\">\r\n              <img className=\"logo\" style={{ maxWidth: \"200px\" }} src={logo} alt=\"Monetiz Pay\" />\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody className=\"px-lg-5 py-lg-5\">\r\n            <div className=\"text-center text-muted mb-4\">\r\n              <small>Digite seu Email e Senha</small>\r\n            </div>\r\n            <Form role=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n              <FormGroup className=\"mb-3\">\r\n                <InputGroup className=\"input-group-alternative\">\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <InputGroupText>\r\n                      <i className=\"ni ni-email-83\" />\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input placeholder=\"Email\" type=\"email\" name=\"email\" innerRef={register} />\r\n                </InputGroup>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <InputGroup className=\"input-group-alternative\">\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <InputGroupText>\r\n                      <i className=\"ni ni-lock-circle-open\" />\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input placeholder=\"Password\" type=\"password\" name=\"password\" innerRef={register} />\r\n                </InputGroup>\r\n              </FormGroup>\r\n              <div className=\"text-center\">\r\n                <Button className=\"my-4\" color=\"primary\" type=\"submit\">\r\n                  Login\r\n                  </Button>\r\n              </div>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n        <Row className=\"mt-3\">\r\n          <Col xs=\"6\">\r\n            <a\r\n              className=\"text-light\"\r\n              href=\"/auth/reset-password\"\r\n            >\r\n              <small>Esqueceu a Senha?</small>\r\n            </a>\r\n          </Col>\r\n\r\n        </Row>\r\n      </Col>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\ResetPassword.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Register.js",["306"],"import React, { useEffect, useState } from \"react\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport api from 'services/api';\r\nimport { useForm } from \"react-hook-form\"\r\nimport { cpf } from \"cpf-cnpj-validator\"\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\n\r\n// reactstrap components\r\nimport { Button, Card, CardHeader, CardBody, FormGroup, Form, Input, InputGroupAddon, InputGroupText, InputGroup, Row, Col, FormFeedback } from \"reactstrap\";\r\n\r\nimport logo from \"assets/img/brand/logo.svg\"\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\nconst schema = Yup.object().shape({\r\n  name: Yup.string().required(\"Nome é um campo obrigatório.\").min(8),\r\n  cpf: Yup.string().test('Valida CPF', 'CPF Inválido', value => cpf.isValid(value)),\r\n  mobile: Yup.string().min(11).required(\"Telefone é um campo obrigatório.\"),\r\n  password: Yup.string().min(8).required('Password é um campo obrigatório'),\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n});\r\nconst Register = () => {\r\n  const { register, handleSubmit, errors } = useForm({ resolver: yupResolver(schema) });\r\n  const history = useHistory()\r\n  const query = useQuery();\r\n  const invitationToken = query.get(\"invitation_token\");\r\n  const [isValid, setIsValid] = useState();\r\n  const [decodeToken, setDecodeToken] = useState()\r\n\r\n  useEffect(() => {\r\n    let validateToken = async () => {\r\n      api.defaults.headers.authorization = `Bearer ${invitationToken}`;\r\n      await api.post(\"/session/validate-invitation\", { token: invitationToken })\r\n        .then(result => {\r\n          let data = result.data\r\n          setIsValid(data.validate)\r\n          setDecodeToken(data.decoded)\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n    validateToken()\r\n  }, [invitationToken])\r\n\r\n  const onSubmit = async (data) => {\r\n    api.defaults.headers.authorization = `Bearer ${invitationToken}`;\r\n    await api.post(\"/session/register\", data)\r\n      .then(result => {\r\n        history.push('/auth/login')\r\n      })\r\n      .catch(err => console.log(err))\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Col lg=\"6\" md=\"8\">\r\n        <Card className=\"bg-secondary shadow border-0\">\r\n          <CardHeader className=\"bg-transparent pb-3\">\r\n            <div className=\"text-center\">\r\n              <img className=\"logo\" style={{ maxWidth: \"200px\" }} src={logo} alt=\"Monetiz Pay\" />\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody className=\"px-lg-5 py-lg-5\">\r\n            <div className=\"text-center text-muted mb-4\">\r\n              <h2>Criar Conta</h2>\r\n            </div>\r\n            {isValid &&\r\n              <Form role=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-email-83\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Email\" type=\"email\" autoComplete=\"new-email\" innerRef={register} defaultValue={decodeToken?.email} disabled={true} name=\"email\" />\r\n                  </InputGroup>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-hat-3\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Nome\" type=\"text\" name=\"name\" innerRef={register} invalid={errors.name ? true : false} />\r\n                    <FormFeedback invalid=\"\" className=\"pl-2\">{errors.name?.message}</FormFeedback>\r\n                  </InputGroup>\r\n\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-paper-diploma\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"CPF\" type=\"text\" name=\"cpf\" innerRef={register} invalid={errors.cpf ? true : false} />\r\n                    <FormFeedback invalid=\"\">{errors.cpf?.message}</FormFeedback>\r\n                  </InputGroup>\r\n\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"fas fa-mobile\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Celular\" type=\"text\" name=\"mobile\" innerRef={register} invalid={errors.mobile ? true : false} />\r\n                    <FormFeedback invalid=\"\">{errors.mobile?.message}</FormFeedback>\r\n                  </InputGroup>\r\n\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-lock-circle-open\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Senha\" type=\"password\" name=\"password\" innerRef={register} invalid={errors.password ? true : false} />\r\n                    <FormFeedback invalid=\"\">{errors.password?.message}</FormFeedback>\r\n                  </InputGroup>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-lock-circle-open\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Repetir Senha\" type=\"password\" name=\"confirmPassword\" invalid={errors.confirmPassword ? true : false} innerRef={register} />\r\n                    <FormFeedback invalid=\"\">{errors.confirmPassword?.message}</FormFeedback>\r\n                  </InputGroup>\r\n\r\n                </FormGroup>\r\n\r\n                <div className=\"text-center\">\r\n                  <Button className=\"mt-4\" color=\"primary\" type=\"submit\">\r\n                    Criar Conta\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            }\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\RePassword.js",["307"],"import React, { useState, useEffect } from \"react\";\nimport Lottie from \"react-lottie\";\nimport * as Loading from \"assets/custom/loading-white.json\"\nimport { useForm } from \"react-hook-form\";\nimport logo from \"assets/img/brand/logo.svg\"\n\n// reactstrap components\nimport {\n    Button,\n    Card,\n    CardBody,\n    FormGroup,\n    Form,\n    Input,\n    Row,\n    Col,\n    FormFeedback\n} from \"reactstrap\";\nimport { useAuth } from \"hooks/auth\"\nimport { Link, Redirect, useLocation } from \"react-router-dom\";\n\n\nconst defaultOptions = {\n    loop: true,\n    autoplay: true,\n    animationData: Loading.default,\n    rendererSettings: {\n        preserveAspectRatio: \"xMidYMid slice\"\n    }\n}\n\nexport default function RePassword() {\n    const auth = useAuth()\n    const { register, handleSubmit, watch, errors } = useForm()\n    const query = new URLSearchParams(useLocation().search);\n    const token = query.get(\"t\")\n    const [isLoading, setIsLoading] = useState(false)\n    const [user, setUser] = useState({})\n    const [toLogin, setToLogin] = useState(false)\n    const [send, setSend] = useState(false)\n\n    useEffect(() => {\n        let fetchData = async () => {            \n            setIsLoading(true)\n            let verify = await auth.verifyToken(token)\n            console.log(verify);\n            if (verify) {\n                setUser(verify)\n                setToLogin(false)\n\n            } else {\n                setToLogin(true)\n            }\n            setIsLoading(false)\n        }\n        fetchData()\n\n    }, [token,auth])\n\n    const onSubmit = async (data) => {\n        data.passwordConfirm = data.passwordconfirm\n        setIsLoading(true)\n        let sendSubmit = await auth.sendNewPassword(token, data)\n        if (sendSubmit) {\n            setSend(true)\n            setIsLoading(false)\n        }\n    }\n\n    if (toLogin) {\n        return <Redirect to=\"/auth/login\" />\n    }\n    if (isLoading) {\n        return <div className=\"loading\"><Lottie options={defaultOptions} height={120} width={120} /> </div>\n    }\n\n    if (send) {\n        return (\n            <Col lg=\"5\" md=\"7\">\n                <Card className=\"bg-secondary shadow border-1\" style={{ minHeight: \"auto\" }}>\n                    <CardBody className=\"px-lg-5 py-lg-5\">\n                        <div className=\"text-center mt-4\">\n                            <h1 className=\"h2\">Perfeito!</h1>\n                            <p className=\"lead\">Você redefiniu sua senha de acesso ao Converte.me. Volte para o Login para acessar sua conta.</p>\n                            <div className=\"text-center mt-3\">\n                                <a href=\"/auth/login\" className=\"btn btn-lg btn-primary\" title=\"Clique aqui para acessar sua conta\">Voltar para o login</a>\n                            </div>\n                        </div>\n                    </CardBody>\n                </Card>\n            </Col>\n        )\n    }\n\n    return (\n        <>\n            <Col lg=\"5\" md=\"7\">\n                <Card className=\"bg-secondary shadow border-1\" style={{ minHeight: \"auto\" }}>\n\n                    <CardBody className=\"px-lg-5 py-lg-5\">\n                        <div className=\"p-2 text-center\">\n                            <img alt=\"...\" src={logo} style={{ maxWidth: '80%' }} />\n                        </div>\n                        <div className=\"text-center h3 mb-4\">\n                            <small>Informe uma nova senha de acesso à sua conta.</small>\n                        </div>\n\n                        <Form role=\"form\" onSubmit={handleSubmit(onSubmit)}>\n                            <FormGroup className=\"mb-3\">\n                                <Input\n                                    placeholder=\"Nova senha\"\n                                    type=\"password\"\n                                    name=\"password\"\n                                    invalid={errors.password ? true : false}\n                                    innerRef={register({ required: \"Senha Requerida\", minLength: { value: 8, message: \"A senha deve ter no mínimo 8 caracteres\" } })}\n                                />\n                                <FormFeedback invalid=\"\">{errors.password?.message}</FormFeedback>\n                            </FormGroup>\n                            <FormGroup className=\"mb-3\">\n                                <Input\n                                    placeholder=\"Repita a nova senha\"\n                                    type=\"password\"\n                                    name=\"passwordconfirm\"\n                                    invalid={errors.passwordconfirm ? true : false}\n                                    innerRef={register({ validate: (value) => value === watch('password') || \"As senhas devem ser iguais\" })}\n                                />\n                                <FormFeedback invalid=\"\">{errors.passwordconfirm?.message}</FormFeedback>\n                            </FormGroup>\n                            <div className=\"text-center\">\n                                <Button block className=\"my-4\" color=\"primary\" type=\"submit\">\n                                    Recuperar\n                                </Button>\n                            </div>\n                        </Form>\n                    </CardBody>\n                </Card>\n                <Row className=\"mt-3\">\n                    <Col xs=\"12\">\n                        <Link className=\"text-light\" to=\"/auth/login\" >\n                            <small>Voltar para o Login</small>\n                        </Link>\n                    </Col>\n\n                </Row>\n            </Col>\n        </>\n    )\n\n\n}\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\format.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\FormateUtils.js",["308","309","310"],"import React from 'react'\r\nimport { func } from 'prop-types';\r\nexport function formatCPF(cpf) {\r\n    cpf = cpf.replace(/[^\\d]/g, \"\");\r\n    return cpf.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\");\r\n}\r\nexport function formatCNPJ(value) {\r\n    let x = value.replace(/[^\\d]/g, \"\").match(/(\\d{0,2})(\\d{0,3})(\\d{0,3})(\\d{0,4})(\\d{0,2})/);\r\n    return !x[2] ? x[1] : x[1] + '.' + x[2] + '.' + x[3] + '/' + x[4] + (x[5] ? '-' + x[5] : '');\r\n}\r\n\r\nexport function formatPhone(v) {\r\n    v = v.replace(/\\D/g, \"\");             //Remove tudo o que não é dígito\r\n    v = v.replace(/^(\\d{2})(\\d)/g, \"($1) $2\"); //Coloca parênteses em volta dos dois primeiros dígitos\r\n    v = v.replace(/(\\d)(\\d{4})$/, \"$1-$2\");    //Coloca hífen entre o quarto e o quinto dígitos\r\n    return v;\r\n}\r\n\r\nexport function formatarCEP(str) {\r\n    var re = /^([\\d]{2})\\.*([\\d]{3})-*([\\d]{3})/;\r\n\r\n    if (re.test(str)) {\r\n        return str.replace(re, \"$1.$2-$3\");\r\n    } else {\r\n        alert(\"CEP inválido!\");\r\n    }\r\n\r\n    return \"\";\r\n}\r\nexport function formatCurrency(value) {\r\n    let formatter = new Intl.NumberFormat('pt-BR', {\r\n        style: 'currency',\r\n        currency: 'BRL'\r\n    });\r\n\r\n    let formatted = formatter.format(value);\r\n    return formatted\r\n}\r\nexport function formatPercentage(value) {\r\n    let v = value / 100\r\n    v = v.toLocaleString('pt-BR', {\r\n        style: 'percent',\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n    })\r\n    \r\n    return v\r\n}\r\n\r\n\r\nexport function formatDate(date) {\r\n    let ds = new Date(date)\r\n    let options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: \"2-digit\", minute: \"2-digit\" };\r\n    let dtFmt = ds.toLocaleString(\"pt-BR\", options)\r\n    return dtFmt\r\n}\r\n\r\nfunction formatReal(int) {\r\n    var tmp = int + '';\r\n    tmp = tmp.replace(/([0-9]{2})$/g, \",$1\");\r\n    if (tmp.length > 6)\r\n        tmp = tmp.replace(/([0-9]{3}),([0-9]{2}$)/g, \".$1,$2\");\r\n\r\n    return tmp;\r\n}","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Headers\\Header.js",["311","312"],"\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// reactstrap components\r\nimport { Card, CardBody, CardTitle, Container, Row, Col } from \"reactstrap\";\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faCreditCard, faBarcode, faExchangeAlt } from '@fortawesome/free-solid-svg-icons';\r\n\r\n\r\nfunction Header() {\r\n\r\n  const [openChargebacks, setOpenChargebacks] = useState(0);\r\n\r\n  \r\n\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"header bg-gradient-info pb-8 pt-5 pt-md-8\">\r\n        <Container fluid>\r\n          <div className=\"header-body\">\r\n            {/* Card stats */}\r\n            <Row>\r\n              <Col lg=\"6\" xl=\"3\">\r\n                <Card className=\"card-stats mb-4 mb-xl-0\">\r\n                  <CardBody>\r\n                    <Row>\r\n                      <div className=\"col\">\r\n                        <CardTitle\r\n                          tag=\"h5\"\r\n                          className=\"text-uppercase text-muted mb-0\"\r\n                        >\r\n                          Faturamento\r\n                        </CardTitle>\r\n                        <span className=\"h2 font-weight-bold mb-0\">\r\n                          0\r\n                        </span>\r\n                      </div>\r\n                      <Col className=\"col-auto\">\r\n                        <div className=\"icon icon-shape bg-danger text-white rounded-circle shadow\">\r\n                          <i className=\"fas fa-chart-bar\" />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <p className=\"mt-3 mb-0 text-muted text-sm\">\r\n                      <span className=\"text-success mr-2\">\r\n                        <i className=\"fa fa-arrow-up\" /> 0%\r\n                      </span>{\" \"}\r\n                      <span className=\"text-nowrap\">Últimos 30 dias</span>\r\n                    </p>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              <Col lg=\"6\" xl=\"3\">\r\n                <Card className=\"card-stats mb-4 mb-xl-0\">\r\n                  <CardBody>\r\n                    <Row>\r\n                      <div className=\"col\">\r\n                        <CardTitle\r\n                          tag=\"h5\"\r\n                          className=\"text-uppercase text-muted mb-0\"\r\n                        >\r\n                          Boleto\r\n                        </CardTitle>\r\n                        <span className=\"h2 font-weight-bold mb-0\">\r\n                          0\r\n                        </span>\r\n                      </div>\r\n                      <Col className=\"col-auto\">\r\n                        <div className=\"icon icon-shape bg-warning text-white rounded-circle shadow\">\r\n                          <FontAwesomeIcon icon={faBarcode} />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <p className=\"mt-3 mb-0 text-muted text-sm\">\r\n                      <span className=\"text-danger mr-2\">\r\n                        <i className=\"fas fa-arrow-down\" /> 0%\r\n                      </span>{\" \"}\r\n                      <span className=\"text-nowrap\">Últimos 30 dias</span>\r\n                    </p>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              <Col lg=\"6\" xl=\"3\">\r\n                <Card className=\"card-stats mb-4 mb-xl-0\">\r\n                  <CardBody>\r\n                    <Row>\r\n                      <div className=\"col\">\r\n                        <CardTitle\r\n                          tag=\"h5\"\r\n                          className=\"text-uppercase text-muted mb-0\"\r\n                        >\r\n                          C. de Crédito\r\n                        </CardTitle>\r\n                        <span className=\"h2 font-weight-bold mb-0\">0</span>\r\n                      </div>\r\n                      <Col className=\"col-auto\">\r\n                        <div className=\"icon icon-shape bg-yellow text-white rounded-circle shadow\">\r\n                          <FontAwesomeIcon icon={faCreditCard} />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    <p className=\"mt-3 mb-0 text-muted text-sm\">\r\n                      <span className=\"text-warning mr-2\">\r\n                        <i className=\"fas fa-arrow-down\" /> 0%\r\n                      </span>{\" \"}\r\n                      <span className=\"text-nowrap\">Últimos 30 dias</span>\r\n                    </p>\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n              <Col lg=\"6\" xl=\"3\">\r\n                <Card className=\"card-stats mb-4 mb-xl-0\">\r\n                  <CardBody>\r\n                    <Row>\r\n                      <div className=\"col\">\r\n                        <CardTitle\r\n                          tag=\"h5\"\r\n                          className=\"text-uppercase text-muted mb-0\"\r\n                        >\r\n                          Chargeback\r\n                        </CardTitle>\r\n                        <span className=\"h2 font-weight-bold mb-0\">\r\n                          {openChargebacks}\r\n                        </span>\r\n                      </div>\r\n                      <Col className=\"col-auto\">\r\n                        <div className=\"icon icon-shape bg-info text-white rounded-circle shadow\">\r\n                          <FontAwesomeIcon icon={faExchangeAlt} />\r\n                        </div>\r\n                      </Col>\r\n                    </Row>\r\n                    {<p className=\"mt-3 mb-0 text-muted text-sm\">\r\n                      <span className=\"text-success mr-2\">\r\n                        <i className=\"fas fa-arrow-up\" /> 0%\r\n                      </span>{\" \"}\r\n                      <span className=\"text-nowrap\">Últimos 30 dias</span>\r\n                    </p>}\r\n                  </CardBody>\r\n                </Card>\r\n              </Col>\r\n            </Row>\r\n          </div>\r\n        </Container>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\Alert.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\variables\\charts.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Plans\\EditTable.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\masks.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\billings.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\statements\\Statement.js",["313","314"],"import React, { useState, useEffect } from \"react\";\nimport { NavLink, Card, Container, Row, CardBody } from \"reactstrap\";\nimport Header from \"components/Headers/HeaderClear\";\nimport { statement, refused } from \"../../hooks/billings\"\nimport moment from \"moment\"\nimport DatetimeRangePicker from 'react-datetime-range-picker';\n\nimport Col from \"reactstrap/lib/Col\";\nimport Nav from \"reactstrap/lib/Nav\";\nimport NavItem from \"reactstrap/lib/NavItem\";\nimport classnames from 'classnames';\nimport TabContent from \"reactstrap/lib/TabContent\";\nimport TabPane from \"reactstrap/lib/TabPane\";\nimport TableTransactions from \"components/Statements/TableTransactions\"\nimport TableRefuseds from \"components/Statements/TableRefuseds\";\nimport TableLiquidations from \"components/Statements/TableLiquidation\";\n\n\nconst Statement = () => {\n    const [activeTable, setActiveTable] = useState(1)\n    const [transactions, setTransations] = useState([])\n    const [orders, setOrders] = useState([])\n    const [comissions, setComissions] = useState([])\n    const [chargebacks, setChargebacks] = useState([])\n    const [init, setInit] = useState(moment().clone().startOf('month').format())\n    const [end, setEnd] = useState(moment().format())\n\n    useEffect(() => {\n        async function loadingData() {\n            let statements = await statement({ init: init, end: end })\n            setTransations(statements.transactions.list_transactions)\n            setComissions(statements.transactions.commission)\n            setChargebacks(statements.transactions.chargeback)\n            setOrders(statements.orders)\n        }\n        loadingData();\n    }, [init, end])\n    const setRange = (e) => {\n        setInit(moment(e.start).format());\n        setEnd(moment(e.end).format())\n    }\n    return (\n        <>\n            <Header />\n            {/* Page content */}\n            <Container className=\"mt--7\" fluid>\n                <Row className=\"justify-content-md-center pt-8\">\n                    <Col sm=\"11\" className=\"bg-transparent  card p-4\" style={{ border: \"none\" }}>\n                        <Row >\n                            <Col sm=\"12\">\n\n                                <Nav className=\"order-tab\" tabs style={{ borderBottom: 0 }}>\n                                    <NavItem>\n                                        <NavLink\n                                            className={classnames({ active: activeTable === 1 })}\n                                            onClick={() => { setActiveTable(1); }}>\n                                            Transações\n                                        </NavLink>\n                                    </NavItem>\n                                    <NavItem>\n                                        <NavLink\n                                            className={classnames({ active: activeTable === 2 })}\n                                            onClick={() => { setActiveTable(2); }} style={{cursor:\"pointer\"}}>\n                                            Comissões\n                                        </NavLink>\n                                    </NavItem>\n                                    <NavItem>\n                                        <NavLink\n                                            className={classnames({ active: activeTable === 3},'text-red')}\n                                            onClick={() => { setActiveTable(3); }} style={{cursor:\"pointer\"}}>\n                                            Transações Negadas\n                                        </NavLink>\n                                    </NavItem>\n                                </Nav>\n                            </Col>\n                        </Row>\n                        <TabContent activeTab={activeTable}>\n                            <TabPane tabId={1}>\n                                <Row>\n                                    <Col>\n                                        <Card style={{ border: \"0\", boxShadow: \"none\" }}>\n                                            <CardBody>\n                                                <Row>\n                                                    <Col>\n                                                        <Row>\n                                                            <Col xs=\"6\">\n                                                                <DatetimeRangePicker className=\"d-flex\" inline={true} startDate={init} endDate={end} locale=\"pt-br\" pickerClassName=\"col-6\" onChange={setRange} />\n                                                            </Col>\n                                                        </Row>\n                                                        <TableTransactions transactions={transactions} orders={orders} comissions={comissions} />\n                                                    </Col>\n                                                </Row>\n                                            </CardBody>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </TabPane>\n                            <TabPane tabId={2}>\n                            <Row>\n                                    <Col>\n                                        <Card style={{ border: \"0\", boxShadow: \"none\" }}>\n                                            <CardBody>\n                                                <Row>\n                                                    <Col>\n                                                    <TableLiquidations />\n                                                    </Col>\n                                                </Row>\n                                            </CardBody>\n                                        </Card>\n                                    </Col>\n                                </Row>\n                            </TabPane>\n                            <TabPane tabId={3}>\n                                <Row>\n                                    <Col>\n                                        <Card style={{ border: \"0\", boxShadow: \"none\" }}>\n                                            <CardBody>\n                                                <Row>\n                                                    <Col>\n                                                    <TableRefuseds />\n                                                    </Col>\n                                                </Row>\n                                            </CardBody>\n                                        </Card>\n                                    </Col>\n                                </Row>\n\n                            </TabPane>\n                        </TabContent>\n                    </Col>\n\n                </Row>\n            </Container>\n        </>\n    )\n}\n\nexport default Statement","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Headers\\HeaderClear.js",["315","316"],"\r\nimport React, { useEffect, useState } from \"react\";\r\n\r\n// reactstrap components\r\nimport { Container,  } from \"reactstrap\";\r\nfunction Header() {\r\n\r\n\r\n  \r\n  return (\r\n    <>\r\n      <div className=\"header bg-gradient-info pt-5 pt-md-6\">\r\n        <Container fluid>\r\n          \r\n          \r\n        </Container>\r\n      </div>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Statements\\TableTransactions.js",["317","318"],"import React, { useState, useEffect } from \"react\";\nimport \"fontsource-roboto\";\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport Table from \"reactstrap/lib/Table\";\nimport moment from \"moment\";\nimport \"moment/locale/pt-br\";\nimport { Modal, ModalHeader, ModalFooter, ModalBody, Button } from \"reactstrap\";\nimport { formatCNPJ } from \"utils/FormateUtils\";\nimport { formatCurrency } from \"utils/FormateUtils\";\nimport api from \"services/api\";\nimport Row from \"reactstrap/lib/Row\";\nimport Col from \"reactstrap/lib/Col\";\nimport { formatCPF } from \"utils/FormateUtils\";\n\nconst TableTranctions = (props) => {\n  const [summary, setSummary] = useState();\n  const [single, setSingle] = useState();\n  const [modal, setModal] = useState(false);\n  useEffect(() => {\n    function getSumary() {\n      let data = props.transactions;\n      let orders = props.orders;\n      let arraySum = [];\n      data?.forEach((value) => {\n        let sum = value.summary;\n        sum.details = value.details;\n        arraySum.push(sum);\n      });\n      setSummary(arraySum);\n    }\n    getSumary();\n  }, [props]);\n  const toggle = () => setModal(!modal);\n  const getDetails = async (order) => {\n    const result = summary.find((t) => t.order_id === order);\n    const details = result.details;\n    //console.log(result)\n    api\n      .get(`/getnet/find-transaction/${result.order_id}`)\n      .then((res) => {\n        setSingle({\n          gn: result,\n          dt: details,\n          bd: res.data,\n        });\n        toggle();\n      })\n      .catch((err) => {});\n  };\n  const handleDetails = (transaction) => {};\n\n  const TransactionsType = [\n    \"Crédito à vista\",\n    \"Crédito Parcelado\",\n    \"Crédito Parcelamento Administradora\",\n    \"Débito,\",\n    \"Cancelamento\",\n    \"Chargeback\",\n    \"Boleto\",\n  ];\n  const TransactionsStatus = [\n    { id: 0, status: \"Aprovado\" },\n    { id: 70, status: \"Aguardando\" },\n    { id: 77, status: \"Pendente\" },\n    { id: 78, status: \"Pendente de Pagamento\" },\n    { id: 83, status: \"Timeout\" },\n    { id: 90, status: \"Inexistente\" },\n    { id: 91, status: \"Negado Administradora\" },\n    { id: 92, status: \"Estornada\" },\n    { id: 93, status: \"Repetida\" },\n    { id: 94, status: \"Estornada Conciliação\" },\n    { id: 98, status: \"Cancelada - Sem Confirmação\" },\n    { id: 99, status: \"Negado - MGM\" },\n  ];\n\n  const getMuiTheme = () =>\n    createMuiTheme({\n      shadows: Array(25).fill(\"none\"),\n      overrides: {\n        MUIDataTableSelectCell: {\n          expandDisabled: {\n            // Soft hide the button.\n            visibility: \"hidden\",\n          },\n          root:{\n            backgroundColor: \"#e9e9e9\",\n            padding: \"5px\",\n          },\n          body:{              \n            border:\"1px solid rgba(224, 224, 224, 1)\"\n          }\n        },\n        MUIDataTableBodyRow: {\n          root: {\n            \"&:nth-child(odd)\": {\n              backgroundColor: \"#f6f8fa\",\n            },\n          },\n        },\n        MUIDataTableBodyCell: {\n          root: {\n            padding: \"5px\",\n          },\n        },\n        MUIDataTableHeadRow: {\n          root: {\n            backgroundColor: \"#FF0000\",\n          },\n        },\n        MuiTableSortLabel: {\n          root: {\n            color: \"#ffffff\",\n            \"&:hover\": {\n              color: \"#ffffff\",\n\n              \"&& $icon\": {\n                opacity: 1,\n                color: \"#ffffff\",\n              },\n            },\n            \"&$active\": {\n              color: \"#ffffff\",\n\n              // && instead of & is a workaround for https://github.com/cssinjs/jss/issues/1045\n              \"&& $icon\": {\n                opacity: 1,\n                color: \"#ffffff\",\n              },\n            },\n          },\n        },\n        MUIDataTableHeadCell: {\n          sortActive: {\n            color: \"#ffffff\",\n          },\n          sortAction: {\n            color: \"#ffffff\",\n          },\n          fixedHeader: {\n            backgroundColor: \"#FF0000\",\n            padding: \"5px\",\n          },\n          data: {\n            color: \"#ffffff\",\n            fontWeight: \"bold\",\n          },\n        },\n        \n      },\n    });\n  const options = {\n    filter: true,\n    filterType: \"dropdown\",\n    pagination: true,\n    rowsPerPage: 20,\n    download: true,\n    print: true,\n    sort: true,\n    search: true,\n    viewColumns: false,\n    selectableRows: \"none\",\n    textLabels: {\n      body: {\n        noMatch: \"Nenhum registro encontrado\",\n      },\n    },\n    sortOrder: {\n      name: \"order_id\",\n      direction: \"desc\",\n    },\n    expandableRows: true,\n    expandableRowsHeader: false,\n    expandableRowsOnClick: true,\n    isRowExpandable: (dataIndex, expandedRows) => {\n      if (dataIndex === 3 || dataIndex === 4) return false;\n      if (\n        expandedRows.data.length > 4 &&\n        expandedRows.data.filter((d) => d.dataIndex === dataIndex).length === 0\n      )\n        return false;\n      return true;\n    },\n    renderExpandableRow: (rowData, rowMeta, dataIndex) => {\n      const colSpan = rowData.length + 1;\n      return (\n        <TableRow>\n          <TableCell colSpan={colSpan} className=\"text-right \">\n            <Table style={{ width: \"400px\", float: \"right\" }}>\n              <tbody>\n                <tr>\n                  <td>\n                    <strong>Taxa Getnet:</strong>\n                  </td>\n                  <td>{formatCurrency(0)}</td>\n                </tr>\n                <tr>\n                  <td>\n                    <strong>Comissão</strong>\n                  </td>\n                  <td>{formatCurrency(0)}</td>\n                </tr>\n                <tr>\n                  <td>\n                    <strong>Juros</strong>\n                  </td>\n                  <td>{formatCurrency(0)}</td>\n                </tr>\n              </tbody>\n            </Table>\n          </TableCell>\n        </TableRow>\n      );\n    },\n    onRowExpansionChange: (curExpanded, allExpanded, rowsExpanded) =>\n      console.log(curExpanded, allExpanded, rowsExpanded),\n  };\n  const dataCols = [\n    {\n      label: \"Pedido\",\n      name: \"order_id\",\n      options: {\n        filter: true,\n      },\n    },\n    {\n      label: \"Subseller\",\n      name: \"marketplace_subsellerid\",\n      options: {\n        filter: true,\n      },\n    },\n    {\n      label: \"Tipo de Transação\",\n      name: \"transaction_type\",\n      options: {\n        filter: true,\n        customBodyRender: (value) => <>{TransactionsType[value - 1]}</>,\n      },\n    },\n    {\n      label: \"Valor\",\n      name: \"card_payment_amount\",\n      options: {\n        filter: false,\n        customBodyRender: (value) => <>{formatCurrency(value / 100)}</>,\n      },\n    },\n    {\n      label: \"Status\",\n      name: \"transaction_status_code\",\n      options: {\n        filter: true,\n        customBodyRender: (value) => {\n          let status = TransactionsStatus.find((i) => i.id === value);\n          return <>{status.status}</>;\n        },\n      },\n    },\n    {\n      label: \"Data da Transação\",\n      name: \"transaction_date\",\n      options: {\n        filter: true,\n        customBodyRender: (value) => {\n          return <>{moment(value).format(\"DD/MM/YY HH:MM:SS\")}</>;\n        },\n      },\n    },\n    {\n      label: \" \",\n      name: \"order_id\",\n      options: {\n        filter: false,\n        sort: false,\n        customBodyRender: (value) => (\n          <Button size=\"sm\" color=\"primary\" onClick={() => getDetails(value)}>\n            Detalhes\n          </Button>\n        ),\n      },\n    },\n  ];\n  const components = {\n    ExpandButton: function (props) {\n      if (props.dataIndex === 3 || props.dataIndex === 4)\n        return <div style={{ width: \"24px\" }} />;\n      return <ExpandButton {...props} />;\n    },\n  };\n\n  return (\n    <>\n      <MuiThemeProvider theme={getMuiTheme()}>\n        <MUIDataTable\n          title={\"Transações do período\"}\n          data={summary}\n          columns={dataCols}\n          options={options}\n          components={components}\n        />\n      </MuiThemeProvider>\n      <Modal size={\"lg\"} isOpen={modal} toggle={toggle}>\n        <ModalHeader toggle={toggle} charCode=\"X\">\n          Detalhes da Transação\n        </ModalHeader>\n        <ModalBody>\n          {single && (\n            <div className=\"transaction\">\n              <Row>\n                <Col xs=\"2\">Subseller:</Col>\n                <Col xs=\"4\">\n                  <strong>{single?.gn.marketplace_subsellerid}</strong>\n                </Col>\n                <Col xs=\"2\">CNPJ/CPF:</Col>\n                <Col>\n                  <strong>\n                    {formatCNPJ(single?.bd.orders.shop.user.document)}\n                  </strong>\n                </Col>\n              </Row>\n              <Row>\n                <Col xs=\"2\">Cliente:</Col>\n                <Col>\n                  <strong>{single?.bd.orders.shop.user.legalName}</strong>\n                </Col>\n              </Row>\n              <hr className=\"m-1\" />\n              <Row>\n                <Col xs=\"2\">Comprador:</Col>\n                <Col xs=\"4\">\n                  <strong>{single?.bd.orders.customer.name}</strong>\n                </Col>\n                <Col xs=\"2\">CPF:</Col>\n                <Col>\n                  <strong>\n                    {formatCPF(single?.bd.orders.customer.document)}\n                  </strong>\n                </Col>\n              </Row>\n\n              <hr className=\"m-1\" />\n            </div>\n          )}\n        </ModalBody>\n        <ModalFooter>\n          <Button color=\"secondary\" onClick={toggle}>\n            Fechar\n          </Button>\n        </ModalFooter>\n      </Modal>\n    </>\n  );\n};\n\nexport default TableTranctions;\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Statements\\TableRefuseds.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\CodeBlock.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Statements\\TableLiquidation.js",["319","320","321","322","323","324","325","326","327","328","329","330","331"],"import React, { useState, useEffect, useMemo } from \"react\";\nimport \"fontsource-roboto\";\nimport MUIDataTable, { ExpandButton } from \"mui-datatables\";\nimport { createMuiTheme, MuiThemeProvider } from \"@material-ui/core/styles\";\nimport TableRow from \"@material-ui/core/TableRow\";\nimport TableCell from \"@material-ui/core/TableCell\";\nimport moment from \"moment\";\nimport \"moment/locale/pt-br\";\nimport {\n  Modal,\n  ModalHeader,\n  ModalFooter,\n  ModalBody,\n  Button,\n  Table,\n} from \"reactstrap\";\nimport { formatCNPJ } from \"utils/FormateUtils\";\nimport { formatCurrency } from \"utils/FormateUtils\";\nimport api from \"services/api\";\nimport Row from \"reactstrap/lib/Row\";\nimport Col from \"reactstrap/lib/Col\";\nimport { formatCPF } from \"utils/FormateUtils\";\nimport { liquidation } from \"../../hooks/billings\";\nimport DatetimeRangePicker from \"react-datetime-range-picker\";\nconst TableLiquidations = () => {\n  const [transactions, setTransactions] = useState([]);\n  const [summary, setSummary] = useState([]);\n  const [orders, setOrders] = useState([]);\n  const [comissions, setComissions] = useState([]);\n  const [init, setInit] = useState(moment().clone().startOf(\"month\").format());\n  const [end, setEnd] = useState(moment().format());\n  useEffect(() => {\n    const getSumary = async () => {\n      let data = await liquidation({ init: init, end: end });\n      let dataTransactions = data.transactions.list_transactions;\n      let details = [];\n      let dataSummary = [];\n      dataTransactions.forEach((tr) => {\n        dataSummary.push(tr.summary);\n        tr.details.forEach((dt) => {\n          details.push(dt);\n        });\n      });\n\n      setOrders(data.orders);\n      setTransactions(details);\n      setSummary(dataSummary);\n      setComissions(data.transactions.commission);\n    };\n    getSumary();\n  }, [init, end]);\n  const setRange = (e) => {\n    setInit(moment(e.start).format());\n    setEnd(moment(e.end).format());\n  };\n\n  const getSummary = (tid) => {\n    let ord = summary.find((o) => o.marketplace_transaction_id === tid);\n    return ord;\n  };\n\n  const getOrder = (id) => {\n    let order = orders.find((o) => o.id === parseInt(id));\n    return order;\n  };\n\n  const getDetail = (tid) => {\n    let detail = transactions.find((o) => o.marketplace_transaction_id === tid);\n\n    return detail;\n  };\n\n  const getTableRows = () => {\n    let rows = [];\n    comissions.forEach((data, key) => {\n      let detail = getDetail(data.marketplace_transaction_id);\n      let sum = getSummary(data.marketplace_transaction_id);\n      //let order = getOrder(sum.order_id);\n      let compare = moment(end);\n      let compareNow = moment(data.subseller_rate_confirm_date);\n      if (compareNow < compare) {\n        let tableRow = {\n          order: sum?.order_id,\n          item: data.item_id,\n          data: data.transaction_date,\n          release: detail?.release_status,\n          previsao: data.payment_date,\n          confirm: data.subseller_rate_confirm_date,\n          total: data.installment_amount,\n          mdr: data.mdr_rate_ammount,\n          comissao: data.subseller_rate_amount,\n        };\n\n        rows.push(tableRow);\n      }\n    });\n    return rows;\n  };\n  const dataCols = [\n    {\n      label: \"Pedido\",\n      name: \"order\",\n      options: {\n        filter: true,\n      },\n    },\n    {\n      label: \"Produto\",\n      name: \"item\",\n      options: {\n        filter: true,\n      },\n    },\n    {\n      label: \"Data\",\n      name: \"data\",\n      options: {\n        filter: true,\n        customBodyRender: (value) => {\n          return <>{moment(value).format(\"DD/MM/YY\")}</>;\n        },\n      },\n    },\n    {\n      label: \"Liberado\",\n      name: \"release\",\n      options: {\n        filter: false,\n      },\n    },\n\n    {\n      label: \"Previsão\",\n      name: \"previsao\",\n      options: {\n        filter: true,\n        customBodyRender: (value) => {\n          return <>{moment(value).format(\"DD/MM/YY\")}</>;\n        },\n      },\n    },\n    {\n      label: \"Pagamento\",\n      name: \"confirm\",\n      options: {\n        filter: true,\n        customBodyRender: (value) => {\n          return <>{value && moment(value).format(\"DD/MM/YY\")}</>;\n        },\n      },\n    },\n    {\n      label: \"Valor\",\n      name: \"total\",\n      options: {\n        filter: false,\n        customBodyRender: (value) => <>{formatCurrency(value / 100)}</>,\n      },\n    },\n    {\n      label: \"MDR\",\n      name: \"mdr\",\n      options: {\n        filter: false,\n        customBodyRender: (value) => <>{formatCurrency(value / 100)}</>,\n      },\n    },\n    {\n      label: \"Comissão\",\n      name: \"comissao\",\n      options: {\n        filter: false,\n        customBodyRender: (value) => <>{formatCurrency(value / 100)}</>,\n      },\n    },\n  ];\n  const options = {\n    filter: true,\n    filterType: \"dropdown\",\n    pagination: true,\n    rowsPerPage: 50,\n    download: true,\n    print: true,\n    sort: true,\n    search: true,\n    viewColumns: false,\n    selectableRows: \"none\",\n    textLabels: {\n      body: {\n        noMatch: \"Nenhum registro encontrado\",\n      },\n    },\n    sortOrder: {\n      name: \"order\",\n      direction: \"desc\",\n    },\n  };\n  const getMuiTheme = () =>\n    createMuiTheme({\n      shadows: Array(25).fill(\"none\"),\n      overrides: {\n        MUIDataTableSelectCell: {\n          expandDisabled: {\n            // Soft hide the button.\n            visibility: \"hidden\",\n          },\n          root: {\n            backgroundColor: \"#e9e9e9\",\n            padding: \"5px\",\n          },\n          body: {\n            border: \"1px solid rgba(224, 224, 224, 1)\",\n          },\n        },\n        MUIDataTableBodyRow: {\n          root: {\n            \"&:nth-child(odd)\": {\n              backgroundColor: \"#f6f8fa\",\n            },\n          },\n        },\n        MUIDataTableBodyCell: {\n          root: {\n            padding: \"5px\",\n          },\n        },\n        MUIDataTableHeadRow: {\n          root: {\n            backgroundColor: \"#FF0000\",\n          },\n        },\n        MuiTableSortLabel: {\n          root: {\n            color: \"#ffffff\",\n            \"&:hover\": {\n              color: \"#ffffff\",\n\n              \"&& $icon\": {\n                opacity: 1,\n                color: \"#ffffff\",\n              },\n            },\n            \"&$active\": {\n              color: \"#ffffff\",\n\n              // && instead of & is a workaround for https://github.com/cssinjs/jss/issues/1045\n              \"&& $icon\": {\n                opacity: 1,\n                color: \"#ffffff\",\n              },\n            },\n          },\n        },\n        MUIDataTableHeadCell: {\n          sortActive: {\n            color: \"#ffffff\",\n          },\n          sortAction: {\n            color: \"#ffffff\",\n          },\n          fixedHeader: {\n            backgroundColor: \"#FF0000\",\n            padding: \"5px\",\n          },\n          data: {\n            color: \"#ffffff\",\n            fontWeight: \"bold\",\n          },\n        },\n      },\n    });\n  const memoExtract = () => {\n    let jr = 0;\n    let jp = 0;\n    let cr = 0;\n    let cp = 0;\n    comissions.forEach((data, key) => {\n      let r = data.subseller_rate_confirm_date ? true : false;\n      let compare = moment(end);\n      let compareNow = moment(data.subseller_rate_confirm_date);\n      if (compareNow < compare) {\n        if (data.item_id.match(/tax/)) {\n          if (r) {\n            jr = jr + data.installment_amount - data.mdr_rate_ammount;\n          } else {\n            jp = jp + data.installment_amount - data.mdr_rate_ammount;\n          }\n        } else {\n          if (r) {\n            cr = cr + data.subseller_rate_amount;\n          } else {\n            cp = cp + data.subseller_rate_amount;\n          }\n        }\n      }\n    });\n\n    return (\n      <Table>\n        <tbody>\n          <tr>\n            <td className=\"text-right\">\n              <strong>Juros Recebidos:</strong>\n            </td>\n            <td>{formatCurrency(jr / 100)}</td>\n            <td className=\"text-right\">\n              <strong>Comissões Recebidas:</strong>\n            </td>\n            <td>{formatCurrency(cr / 100)}</td>\n          </tr>\n          <tr>\n            <td className=\"text-right\">\n              <strong>Juros á Receber:</strong>\n            </td>\n            <td>{formatCurrency(jp / 100)}</td>\n            <td className=\"text-right\">\n              <strong>Comissões á Receber:</strong>\n            </td>\n            <td>{formatCurrency(cp / 100)}</td>\n          </tr>\n        </tbody>\n      </Table>\n    );\n  };\n  return (\n    <>\n      {transactions && (\n        <div>\n          <Row className=\"mb-5\">\n            <Col>{memoExtract()}</Col>\n          </Row>\n          <Row>\n            <Col xs=\"6\"></Col>\n            <Col xs=\"6\">\n              <DatetimeRangePicker\n                className=\"d-flex h3\"\n                inline={true}\n                startDate={init}\n                endDate={end}\n                locale=\"pt-br\"\n                pickerClassName=\"col-6\"\n                onChange={setRange}\n              />\n            </Col>\n          </Row>\n          <Row>\n            <Col>\n              <MuiThemeProvider theme={getMuiTheme()}>\n                <MUIDataTable\n                  title={\"Comissões\"}\n                  data={getTableRows()}\n                  columns={dataCols}\n                  options={options}\n                />\n              </MuiThemeProvider>\n            </Col>\n          </Row>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default TableLiquidations;\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\orders\\Orders.js",["332","333","334","335","336","337","338"],"import React, { useState, useEffect, useCallback } from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport DatetimeRangePicker from 'react-datetime-range-picker';\n// reactstrap components\nimport {\n    Badge,\n    Button,\n    Card,\n    CardHeader,\n    CardFooter,\n    Dropdown,\n    DropdownMenu,\n    DropdownItem,\n    UncontrolledDropdown,\n    DropdownToggle,\n    Pagination,\n    PaginationItem,\n    PaginationLink,\n    Table,\n    Container,\n    Row,\n    CardBody,\n} from \"reactstrap\";\n// core components\n\nimport { useUsers } from \"../../hooks/users\";\nimport { useGateway } from \"../../hooks/getnet\";\nimport Header from \"components/Headers/Header.js\";\nimport api from \"../../services/api\";\nimport { formatCurrency } from \"utils/FormateUtils\";\nimport moment from \"moment\";\n\n\nfunction Orders() {\n    const gateway = useGateway();\n    const history = useHistory();\n    const { saveSelectedUserId } = useUsers();\n    const [page, setPage] = useState(1);\n    const [limit, setLimit] = useState(50);\n    const [orders, setOrders] = useState([]);\n    const [filter, setFilter] = useState(1);\n    const [init, setInit] = useState(moment().clone().startOf('day').format());\n    const [end, setEnd] = useState(moment().format());\n    const setRange = (e) => {\n        setInit(moment(e.start).format());\n        setEnd(moment(e.end).format())\n    }\n\n\n\n    useEffect(() => {\n        async function loadingOrders() {\n            const response = await api.get(`/orders/admin/list`, { params: { page, limit } });\n            setOrders(response.data);\n        }\n        loadingOrders();\n    }, [filter, page, limit]);\n\n    const handleProfile = useCallback(\n        (client) => {\n            saveSelectedUserId(client.id);\n            history.push(\"/admin/client-profile\");\n        },\n        [history, saveSelectedUserId]\n    );\n\n    const handleCallback = async (document, type, index) => {\n        let { status, data } = await gateway.callback(document, type);\n        console.log(status);\n        if (status) {\n            let newArr = [...orders];\n            newArr[index].subseller.enabled = data.enabled;\n            newArr[index].subseller.status = data.status;\n            console.log(newArr[index]);\n            setOrders(newArr);\n        }\n    };\n\n    const handleFilter = async (filter) => {\n        setFilter(filter);\n    };\n\n    const handleNewClient = useCallback(() => {\n        history.push(`/admin/client-register`);\n    }, [history]);\n\n    return (\n        <>\n            <Header />\n            {/* Page content */}\n            <Container className=\"mt--7\" fluid>\n                {/* Table */}\n                <Row>\n                    <div className=\"col\">\n                        <Card className=\"shadow\">\n                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\">\n                                <h3 className=\"mb-0\">Pedidos</h3>\n                                <div className=\"d-flex\">\n                                    <DatetimeRangePicker className=\"d-flex\" inline={true} startDate={init} endDate={end} locale=\"pt-br\" pickerClassName=\"pl-0 pr-1\" onChange={setRange} inputProps={{ className: \"form-control font-weight-bold\", Style: \"width: auto\" }} />\n\n                                    <Button color=\"info\" >\n                                        <i className=\"fas fa-filter\" /> Filtros\n                                    </Button>\n                                </div>\n                            </CardHeader>\n\n                            <Table striped className=\"align-items-center table-flush\" responsive>\n                                <thead className=\"thead-light\">\n                                    <tr>\n                                        <th scope=\"col\">Pedido</th>\n                                        <th scope=\"col\">Vendedor</th>\n                                        <th scope=\"col\">Cliente</th>\n                                        <th scope=\"col\">Valor</th>\n                                        <th scope=\"col\">Criado em</th>\n                                        <th scope=\"col\">Atualizado em</th>\n                                        <th scope=\"col\">Status</th>\n                                        <th scope=\"col\" />\n                                    </tr>\n                                </thead>\n                                <tbody>\n                                    {orders.map((order, index) => (\n                                        <tr key={order.id}>\n                                            <td>\n                                                <span className=\"mb-0 text-sm\"><a href={`orders/${order.id}`}>{order.id}</a></span>\n                                            </td>\n                                            <th scope=\"row\">\n                                                <span className=\"mb-0 text-sm\">{order.store.user.name}</span>\n                                            </th>\n                                            <th scope=\"row\">\n                                                <span className=\"mb-0 text-sm\">{order.customer.name}</span>\n                                            </th>\n                                            <td>{formatCurrency(order.totalValue)}</td>\n                                            <td>{moment(order.createdAt).format(\"DD/MM/YYYY HH:MM\")}</td>\n\n                                            <td>{moment(order.updatedAt).format(\"DD/MM/YYYY HH:MM\")}</td>\n                                            <td>\n                                                <Badge color=\"\" className=\"badge-dot mr-4\">\n                                                    <i\n                                                        className={\n                                                            order.statusId === 4\n                                                                ? \"bg-success\"\n                                                                : \"bg-warning\"\n                                                        }\n                                                    />\n                                                    {order.status.name}\n                                                </Badge>\n                                            </td>\n\n                                            <td className=\"text-right\">\n                                                <UncontrolledDropdown>\n                                                    <DropdownToggle\n                                                        className=\"btn-icon-only text-light\"\n                                                        role=\"button\"\n                                                        size=\"sm\"\n                                                        color=\"\"\n                                                    >\n                                                        <i className=\"fas fa-ellipsis-v\" />\n                                                    </DropdownToggle>\n                                                    <DropdownMenu className=\"dropdown-menu-arrow\" right>\n                                                        <DropdownItem onClick={() => handleProfile()}>\n                                                            Ver perfil\n                                                        </DropdownItem>\n                                                        <DropdownItem\n                                                            onClick={(e) => {\n                                                                e.preventDefault();\n\n                                                            }}\n                                                        >\n                                                            Atualizar Situação\n                                                        </DropdownItem>\n                                                    </DropdownMenu>\n                                                </UncontrolledDropdown>\n                                            </td>\n                                        </tr>\n                                    ))}\n                                </tbody>\n                            </Table>\n                            <CardFooter className=\"py-4\">\n                                <nav aria-label=\"...\">\n                                    <Pagination\n                                        className=\"pagination justify-content-end mb-0\"\n                                        listClassName=\"justify-content-end mb-0\"\n                                    >\n                                        <PaginationItem className=\"disabled\">\n                                            <PaginationLink\n                                                href=\"#\"\n                                                onClick={(e) => e.preventDefault()}\n                                                tabIndex=\"-1\"\n                                            >\n                                                <i className=\"fas fa-angle-left\" />\n                                                <span className=\"sr-only\">Previous</span>\n                                            </PaginationLink>\n                                        </PaginationItem>\n                                        <PaginationItem className=\"active\">\n                                            <PaginationLink\n                                                href=\"#\"\n                                                onClick={(e) => e.preventDefault()}\n                                            >\n                                                1\n                                            </PaginationLink>\n                                        </PaginationItem>\n\n                                        <PaginationItem>\n                                            <PaginationLink\n                                                href=\"#\"\n                                                onClick={(e) => e.preventDefault()}\n                                            >\n                                                <i className=\"fas fa-angle-right\" />\n                                                <span className=\"sr-only\">Next</span>\n                                            </PaginationLink>\n                                        </PaginationItem>\n                                    </Pagination>\n                                </nav>\n                            </CardFooter>\n                        </Card>\n                    </div>\n                </Row>\n            </Container>\n        </>\n    );\n}\n\nexport default Orders;\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\DateRange\\MonetizDateRange.js",["339"],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\GetMuiTheme.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\typesGetnet.js",[],{"ruleId":"340","replacedBy":"341"},{"ruleId":"342","replacedBy":"343"},{"ruleId":"344","severity":1,"message":"345","line":21,"column":26,"nodeType":"346","messageId":"347","endLine":21,"endColumn":29},{"ruleId":"348","severity":1,"message":"349","line":58,"column":6,"nodeType":"350","endLine":58,"endColumn":15,"suggestions":"351"},{"ruleId":"344","severity":1,"message":"352","line":62,"column":13,"nodeType":"346","messageId":"347","endLine":62,"endColumn":21},{"ruleId":"344","severity":1,"message":"353","line":2,"column":8,"nodeType":"346","messageId":"347","endLine":2,"endColumn":11},{"ruleId":"344","severity":1,"message":"354","line":1,"column":57,"nodeType":"346","messageId":"347","endLine":1,"endColumn":65},{"ruleId":"344","severity":1,"message":"355","line":10,"column":9,"nodeType":"346","messageId":"347","endLine":10,"endColumn":13},{"ruleId":"356","severity":1,"message":"357","line":54,"column":35,"nodeType":"358","messageId":"359","endLine":54,"endColumn":37},{"ruleId":"344","severity":1,"message":"360","line":33,"column":35,"nodeType":"346","messageId":"347","endLine":33,"endColumn":41},{"ruleId":"344","severity":1,"message":"361","line":63,"column":9,"nodeType":"346","messageId":"347","endLine":63,"endColumn":23},{"ruleId":"344","severity":1,"message":"362","line":65,"column":19,"nodeType":"346","messageId":"347","endLine":65,"endColumn":23},{"ruleId":"344","severity":1,"message":"363","line":3,"column":24,"nodeType":"346","messageId":"347","endLine":3,"endColumn":36},{"ruleId":"344","severity":1,"message":"364","line":11,"column":3,"nodeType":"346","messageId":"347","endLine":11,"endColumn":13},{"ruleId":"344","severity":1,"message":"365","line":12,"column":3,"nodeType":"346","messageId":"347","endLine":12,"endColumn":15},{"ruleId":"344","severity":1,"message":"366","line":13,"column":3,"nodeType":"346","messageId":"347","endLine":13,"endColumn":15},{"ruleId":"344","severity":1,"message":"367","line":14,"column":3,"nodeType":"346","messageId":"347","endLine":14,"endColumn":23},{"ruleId":"344","severity":1,"message":"368","line":15,"column":3,"nodeType":"346","messageId":"347","endLine":15,"endColumn":17},{"ruleId":"344","severity":1,"message":"369","line":16,"column":3,"nodeType":"346","messageId":"347","endLine":16,"endColumn":13},{"ruleId":"344","severity":1,"message":"370","line":17,"column":3,"nodeType":"346","messageId":"347","endLine":17,"endColumn":17},{"ruleId":"344","severity":1,"message":"371","line":18,"column":3,"nodeType":"346","messageId":"347","endLine":18,"endColumn":17},{"ruleId":"344","severity":1,"message":"372","line":19,"column":3,"nodeType":"346","messageId":"347","endLine":19,"endColumn":8},{"ruleId":"344","severity":1,"message":"373","line":63,"column":9,"nodeType":"346","messageId":"347","endLine":63,"endColumn":22},{"ruleId":"344","severity":1,"message":"374","line":82,"column":9,"nodeType":"346","messageId":"347","endLine":82,"endColumn":21},{"ruleId":"344","severity":1,"message":"375","line":21,"column":10,"nodeType":"346","messageId":"347","endLine":21,"endColumn":13},{"ruleId":"344","severity":1,"message":"354","line":2,"column":17,"nodeType":"346","messageId":"347","endLine":2,"endColumn":25},{"ruleId":"344","severity":1,"message":"376","line":2,"column":27,"nodeType":"346","messageId":"347","endLine":2,"endColumn":36},{"ruleId":"344","severity":1,"message":"377","line":2,"column":38,"nodeType":"346","messageId":"347","endLine":2,"endColumn":44},{"ruleId":"344","severity":1,"message":"378","line":5,"column":24,"nodeType":"346","messageId":"347","endLine":5,"endColumn":34},{"ruleId":"344","severity":1,"message":"364","line":5,"column":91,"nodeType":"346","messageId":"347","endLine":5,"endColumn":101},{"ruleId":"344","severity":1,"message":"372","line":5,"column":103,"nodeType":"346","messageId":"347","endLine":5,"endColumn":108},{"ruleId":"344","severity":1,"message":"379","line":5,"column":110,"nodeType":"346","messageId":"347","endLine":5,"endColumn":115},{"ruleId":"344","severity":1,"message":"380","line":5,"column":117,"nodeType":"346","messageId":"347","endLine":5,"endColumn":128},{"ruleId":"344","severity":1,"message":"381","line":5,"column":130,"nodeType":"346","messageId":"347","endLine":5,"endColumn":139},{"ruleId":"344","severity":1,"message":"382","line":5,"column":141,"nodeType":"346","messageId":"347","endLine":5,"endColumn":152},{"ruleId":"344","severity":1,"message":"383","line":5,"column":154,"nodeType":"346","messageId":"347","endLine":5,"endColumn":159},{"ruleId":"344","severity":1,"message":"366","line":5,"column":161,"nodeType":"346","messageId":"347","endLine":5,"endColumn":173},{"ruleId":"344","severity":1,"message":"365","line":5,"column":175,"nodeType":"346","messageId":"347","endLine":5,"endColumn":187},{"ruleId":"344","severity":1,"message":"368","line":5,"column":189,"nodeType":"346","messageId":"347","endLine":5,"endColumn":203},{"ruleId":"344","severity":1,"message":"367","line":5,"column":205,"nodeType":"346","messageId":"347","endLine":5,"endColumn":225},{"ruleId":"344","severity":1,"message":"384","line":35,"column":10,"nodeType":"346","messageId":"347","endLine":35,"endColumn":15},{"ruleId":"344","severity":1,"message":"385","line":35,"column":17,"nodeType":"346","messageId":"347","endLine":35,"endColumn":25},{"ruleId":"344","severity":1,"message":"386","line":36,"column":10,"nodeType":"346","messageId":"347","endLine":36,"endColumn":22},{"ruleId":"344","severity":1,"message":"387","line":36,"column":24,"nodeType":"346","messageId":"347","endLine":36,"endColumn":39},{"ruleId":"344","severity":1,"message":"388","line":3,"column":74,"nodeType":"346","messageId":"347","endLine":3,"endColumn":85},{"ruleId":"344","severity":1,"message":"372","line":3,"column":123,"nodeType":"346","messageId":"347","endLine":3,"endColumn":128},{"ruleId":"356","severity":1,"message":"389","line":18,"column":35,"nodeType":"358","messageId":"390","endLine":18,"endColumn":37},{"ruleId":"344","severity":1,"message":"391","line":39,"column":13,"nodeType":"346","messageId":"347","endLine":39,"endColumn":23},{"ruleId":"344","severity":1,"message":"372","line":3,"column":79,"nodeType":"346","messageId":"347","endLine":3,"endColumn":84},{"ruleId":"344","severity":1,"message":"392","line":15,"column":24,"nodeType":"346","messageId":"347","endLine":15,"endColumn":37},{"ruleId":"344","severity":1,"message":"362","line":37,"column":25,"nodeType":"346","messageId":"347","endLine":37,"endColumn":29},{"ruleId":"344","severity":1,"message":"393","line":51,"column":11,"nodeType":"346","messageId":"347","endLine":51,"endColumn":20},{"ruleId":"356","severity":1,"message":"389","line":101,"column":30,"nodeType":"358","messageId":"390","endLine":101,"endColumn":32},{"ruleId":"356","severity":1,"message":"389","line":122,"column":30,"nodeType":"358","messageId":"390","endLine":122,"endColumn":32},{"ruleId":"344","severity":1,"message":"362","line":135,"column":21,"nodeType":"346","messageId":"347","endLine":135,"endColumn":25},{"ruleId":"344","severity":1,"message":"388","line":3,"column":74,"nodeType":"346","messageId":"347","endLine":3,"endColumn":85},{"ruleId":"344","severity":1,"message":"372","line":3,"column":123,"nodeType":"346","messageId":"347","endLine":3,"endColumn":128},{"ruleId":"356","severity":1,"message":"389","line":29,"column":35,"nodeType":"358","messageId":"390","endLine":29,"endColumn":37},{"ruleId":"348","severity":1,"message":"394","line":40,"column":8,"nodeType":"350","endLine":40,"endColumn":10,"suggestions":"395"},{"ruleId":"344","severity":1,"message":"391","line":52,"column":13,"nodeType":"346","messageId":"347","endLine":52,"endColumn":23},{"ruleId":"344","severity":1,"message":"388","line":3,"column":74,"nodeType":"346","messageId":"347","endLine":3,"endColumn":85},{"ruleId":"344","severity":1,"message":"396","line":3,"column":93,"nodeType":"346","messageId":"347","endLine":3,"endColumn":105},{"ruleId":"344","severity":1,"message":"372","line":3,"column":137,"nodeType":"346","messageId":"347","endLine":3,"endColumn":142},{"ruleId":"344","severity":1,"message":"397","line":10,"column":11,"nodeType":"346","messageId":"347","endLine":10,"endColumn":18},{"ruleId":"344","severity":1,"message":"398","line":11,"column":37,"nodeType":"346","messageId":"347","endLine":11,"endColumn":42},{"ruleId":"344","severity":1,"message":"360","line":11,"column":44,"nodeType":"346","messageId":"347","endLine":11,"endColumn":50},{"ruleId":"344","severity":1,"message":"360","line":26,"column":35,"nodeType":"346","messageId":"347","endLine":26,"endColumn":41},{"ruleId":"344","severity":1,"message":"399","line":10,"column":115,"nodeType":"346","messageId":"347","endLine":10,"endColumn":118},{"ruleId":"344","severity":1,"message":"400","line":38,"column":12,"nodeType":"346","messageId":"347","endLine":38,"endColumn":16},{"ruleId":"344","severity":1,"message":"401","line":1,"column":8,"nodeType":"346","messageId":"347","endLine":1,"endColumn":13},{"ruleId":"344","severity":1,"message":"402","line":2,"column":10,"nodeType":"346","messageId":"347","endLine":2,"endColumn":14},{"ruleId":"344","severity":1,"message":"403","line":58,"column":10,"nodeType":"346","messageId":"347","endLine":58,"endColumn":20},{"ruleId":"344","severity":1,"message":"376","line":2,"column":17,"nodeType":"346","messageId":"347","endLine":2,"endColumn":26},{"ruleId":"344","severity":1,"message":"404","line":12,"column":27,"nodeType":"346","messageId":"347","endLine":12,"endColumn":45},{"ruleId":"344","severity":1,"message":"405","line":4,"column":21,"nodeType":"346","messageId":"347","endLine":4,"endColumn":28},{"ruleId":"344","severity":1,"message":"406","line":24,"column":12,"nodeType":"346","messageId":"347","endLine":24,"endColumn":23},{"ruleId":"344","severity":1,"message":"376","line":2,"column":17,"nodeType":"346","messageId":"347","endLine":2,"endColumn":26},{"ruleId":"344","severity":1,"message":"354","line":2,"column":28,"nodeType":"346","messageId":"347","endLine":2,"endColumn":36},{"ruleId":"344","severity":1,"message":"407","line":25,"column":11,"nodeType":"346","messageId":"347","endLine":25,"endColumn":17},{"ruleId":"344","severity":1,"message":"408","line":53,"column":9,"nodeType":"346","messageId":"347","endLine":53,"endColumn":22},{"ruleId":"344","severity":1,"message":"409","line":1,"column":38,"nodeType":"346","messageId":"347","endLine":1,"endColumn":45},{"ruleId":"344","severity":1,"message":"363","line":3,"column":24,"nodeType":"346","messageId":"347","endLine":3,"endColumn":36},{"ruleId":"344","severity":1,"message":"410","line":5,"column":8,"nodeType":"346","messageId":"347","endLine":5,"endColumn":16},{"ruleId":"344","severity":1,"message":"411","line":6,"column":8,"nodeType":"346","messageId":"347","endLine":6,"endColumn":17},{"ruleId":"344","severity":1,"message":"379","line":10,"column":3,"nodeType":"346","messageId":"347","endLine":10,"endColumn":8},{"ruleId":"344","severity":1,"message":"380","line":11,"column":3,"nodeType":"346","messageId":"347","endLine":11,"endColumn":14},{"ruleId":"344","severity":1,"message":"382","line":12,"column":3,"nodeType":"346","messageId":"347","endLine":12,"endColumn":14},{"ruleId":"344","severity":1,"message":"381","line":13,"column":3,"nodeType":"346","messageId":"347","endLine":13,"endColumn":12},{"ruleId":"344","severity":1,"message":"412","line":14,"column":3,"nodeType":"346","messageId":"347","endLine":14,"endColumn":9},{"ruleId":"344","severity":1,"message":"413","line":17,"column":10,"nodeType":"346","messageId":"347","endLine":17,"endColumn":20},{"ruleId":"344","severity":1,"message":"353","line":19,"column":8,"nodeType":"346","messageId":"347","endLine":19,"endColumn":11},{"ruleId":"344","severity":1,"message":"414","line":22,"column":10,"nodeType":"346","messageId":"347","endLine":22,"endColumn":19},{"ruleId":"344","severity":1,"message":"415","line":62,"column":9,"nodeType":"346","messageId":"347","endLine":62,"endColumn":17},{"ruleId":"344","severity":1,"message":"416","line":11,"column":5,"nodeType":"346","messageId":"347","endLine":11,"endColumn":13},{"ruleId":"344","severity":1,"message":"417","line":22,"column":5,"nodeType":"346","messageId":"347","endLine":22,"endColumn":13},{"ruleId":"344","severity":1,"message":"418","line":38,"column":18,"nodeType":"346","messageId":"347","endLine":38,"endColumn":25},{"ruleId":"344","severity":1,"message":"419","line":39,"column":19,"nodeType":"346","messageId":"347","endLine":39,"endColumn":27},{"ruleId":"344","severity":1,"message":"361","line":67,"column":11,"nodeType":"346","messageId":"347","endLine":67,"endColumn":25},{"ruleId":"344","severity":1,"message":"374","line":79,"column":11,"nodeType":"346","messageId":"347","endLine":79,"endColumn":23},{"ruleId":"344","severity":1,"message":"420","line":83,"column":11,"nodeType":"346","messageId":"347","endLine":83,"endColumn":26},{"ruleId":"344","severity":1,"message":"366","line":3,"column":20,"nodeType":"346","messageId":"347","endLine":3,"endColumn":32},"no-native-reassign",["421"],"no-negated-in-lhs",["422"],"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'handleSetPlanDetailsId'. Either include it or remove the dependency array.","ArrayExpression",["423"],"'response' is assigned a value but never used.","'api' is defined but never used.","'useState' is defined but never used.","'auth' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'errors' is assigned a value but never used.","'handleCallback' is assigned a value but never used.","'data' is assigned a value but never used.","'ExpandButton' is defined but never used.","'CardFooter' is defined but never used.","'DropdownMenu' is defined but never used.","'DropdownItem' is defined but never used.","'UncontrolledDropdown' is defined but never used.","'DropdownToggle' is defined but never used.","'Pagination' is defined but never used.","'PaginationItem' is defined but never used.","'PaginationLink' is defined but never used.","'Table' is defined but never used.","'handleProfile' is assigned a value but never used.","'handleFilter' is assigned a value but never used.","'set' is defined but never used.","'useEffect' is defined but never used.","'useRef' is defined but never used.","'CardHeader' is defined but never used.","'Modal' is defined but never used.","'ModalHeader' is defined but never used.","'ModalBody' is defined but never used.","'ModalFooter' is defined but never used.","'Label' is defined but never used.","'plans' is assigned a value but never used.","'setPlans' is assigned a value but never used.","'planSelected' is assigned a value but never used.","'setPlanSelected' is assigned a value but never used.","'CustomInput' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'allChecked' is assigned a value but never used.","'setDeleteUser' is assigned a value but never used.","'collGroup' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.",["424"],"'FormFeedback' is defined but never used.","'history' is assigned a value but never used.","'watch' is assigned a value but never used.","'Row' is defined but never used.","'user' is assigned a value but never used.","'React' is defined but never used.","'func' is defined but never used.","'formatReal' is defined but never used.","'setOpenChargebacks' is assigned a value but never used.","'refused' is defined but never used.","'chargebacks' is assigned a value but never used.","'orders' is assigned a value but never used.","'handleDetails' is assigned a value but never used.","'useMemo' is defined but never used.","'TableRow' is defined but never used.","'TableCell' is defined but never used.","'Button' is defined but never used.","'formatCNPJ' is defined but never used.","'formatCPF' is defined but never used.","'getOrder' is assigned a value but never used.","'Dropdown' is defined but never used.","'CardBody' is defined but never used.","'setPage' is assigned a value but never used.","'setLimit' is assigned a value but never used.","'handleNewClient' is assigned a value but never used.","no-global-assign","no-unsafe-negation",{"desc":"425","fix":"426"},{"desc":"427","fix":"428"},"Update the dependencies array to be: [handleSetPlanDetailsId, history]",{"range":"429","text":"430"},"Update the dependencies array to be: [id]",{"range":"431","text":"432"},[1871,1880],"[handleSetPlanDetailsId, history]",[1628,1630],"[id]"]