[{"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\index.js":"1","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\App.js":"2","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\routes\\routes.js":"3","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\layouts\\Auth.js":"4","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\layouts\\Admin.js":"5","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\index.js":"6","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\auth.js":"7","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\plans.js":"8","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\users.js":"9","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\chargebacks.js":"10","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\getnet.js":"11","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\routes.js":"12","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\services\\api.js":"13","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Navbars\\AuthNavbar.js":"14","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Navbars\\AdminNavbar.js":"15","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Footers\\AuthFooter.js":"16","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Footers\\AdminFooter.js":"17","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Sidebar\\Sidebar.js":"18","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\Index.js":"19","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\ClientProfile.js":"20","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\Clients.js":"21","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\ClientRegister.js":"22","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\Plans.js":"23","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\PlanRegister.js":"24","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\PlanSettings.js":"25","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\chargebacks\\ChargebackSettings.js":"26","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\chargebacks\\Chargebacks.js":"27","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\GroupsCreate.js":"28","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Users.js":"29","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\GroupsUpdate.js":"30","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\UserCreate.js":"31","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Login.js":"32","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\ResetPassword.js":"33","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Register.js":"34","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\RePassword.js":"35","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\format.js":"36","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\FormateUtils.js":"37","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Headers\\Header.js":"38","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\Alert.js":"39","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\variables\\charts.js":"40","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Plans\\EditTable.js":"41","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\masks.js":"42"},{"size":322,"mtime":1606419844122,"results":"43","hashOfConfig":"44"},{"size":845,"mtime":1602761723850,"results":"45","hashOfConfig":"44"},{"size":747,"mtime":1606396288846,"results":"46","hashOfConfig":"44"},{"size":3211,"mtime":1602761724039,"results":"47","hashOfConfig":"44"},{"size":2067,"mtime":1608116877161,"results":"48","hashOfConfig":"44"},{"size":601,"mtime":1606414632931,"results":"49","hashOfConfig":"44"},{"size":2766,"mtime":1608233740023,"results":"50","hashOfConfig":"44"},{"size":2527,"mtime":1608033702020,"results":"51","hashOfConfig":"44"},{"size":1486,"mtime":1606907524183,"results":"52","hashOfConfig":"44"},{"size":1131,"mtime":1602761724035,"results":"53","hashOfConfig":"44"},{"size":3458,"mtime":1606432790674,"results":"54","hashOfConfig":"44"},{"size":4423,"mtime":1608233981571,"results":"55","hashOfConfig":"44"},{"size":123,"mtime":1608236048176,"results":"56","hashOfConfig":"44"},{"size":3915,"mtime":1608116315431,"results":"57","hashOfConfig":"44"},{"size":2301,"mtime":1608672830676,"results":"58","hashOfConfig":"44"},{"size":2976,"mtime":1602761724028,"results":"59","hashOfConfig":"44"},{"size":777,"mtime":1608748551983,"results":"60","hashOfConfig":"44"},{"size":8099,"mtime":1608748675657,"results":"61","hashOfConfig":"44"},{"size":4297,"mtime":1608152726998,"results":"62","hashOfConfig":"44"},{"size":32709,"mtime":1608738932983,"results":"63","hashOfConfig":"44"},{"size":7799,"mtime":1608673598641,"results":"64","hashOfConfig":"44"},{"size":27614,"mtime":1608738464354,"results":"65","hashOfConfig":"44"},{"size":6858,"mtime":1608740443438,"results":"66","hashOfConfig":"44"},{"size":36801,"mtime":1608153056393,"results":"67","hashOfConfig":"44"},{"size":16183,"mtime":1608740834937,"results":"68","hashOfConfig":"44"},{"size":9381,"mtime":1608152936301,"results":"69","hashOfConfig":"44"},{"size":13448,"mtime":1608152803367,"results":"70","hashOfConfig":"44"},{"size":9397,"mtime":1608153456879,"results":"71","hashOfConfig":"44"},{"size":9453,"mtime":1608153388212,"results":"72","hashOfConfig":"44"},{"size":9932,"mtime":1608153483280,"results":"73","hashOfConfig":"44"},{"size":5358,"mtime":1608153505681,"results":"74","hashOfConfig":"44"},{"size":2843,"mtime":1608671989404,"results":"75","hashOfConfig":"44"},{"size":5777,"mtime":1608748288774,"results":"76","hashOfConfig":"44"},{"size":7517,"mtime":1608155859351,"results":"77","hashOfConfig":"44"},{"size":5586,"mtime":1608748247611,"results":"78","hashOfConfig":"44"},{"size":151,"mtime":1602761724042,"results":"79","hashOfConfig":"44"},{"size":1712,"mtime":1607975515652,"results":"80","hashOfConfig":"44"},{"size":6211,"mtime":1608148038685,"results":"81","hashOfConfig":"44"},{"size":552,"mtime":1606305225958,"results":"82","hashOfConfig":"44"},{"size":10324,"mtime":1608153533813,"results":"83","hashOfConfig":"44"},{"size":1327,"mtime":1607986950715,"results":"84","hashOfConfig":"44"},{"size":1727,"mtime":1606991667204,"results":"85","hashOfConfig":"44"},{"filePath":"86","messages":"87","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"163t0lw",{"filePath":"89","messages":"90","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"91","messages":"92","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"93","messages":"94","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"95","usedDeprecatedRules":"88"},{"filePath":"96","messages":"97","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"98","messages":"99","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"100","messages":"101","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"102","messages":"103","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"104","usedDeprecatedRules":"88"},{"filePath":"105","messages":"106","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"107","messages":"108","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"109","usedDeprecatedRules":"88"},{"filePath":"110","messages":"111","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"112","usedDeprecatedRules":"88"},{"filePath":"113","messages":"114","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"115","messages":"116","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"123","messages":"124","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"125","messages":"126","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"127","messages":"128","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"88"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"132","usedDeprecatedRules":"88"},{"filePath":"133","messages":"134","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"135","usedDeprecatedRules":"88"},{"filePath":"136","messages":"137","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"138","messages":"139","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"142","usedDeprecatedRules":"88"},{"filePath":"143","messages":"144","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"145","messages":"146","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"147","usedDeprecatedRules":"88"},{"filePath":"148","messages":"149","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"150","messages":"151","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"152","usedDeprecatedRules":"88"},{"filePath":"153","messages":"154","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"155","usedDeprecatedRules":"88"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"88"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":6,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"88"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"164","usedDeprecatedRules":"88"},{"filePath":"165","messages":"166","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"167","messages":"168","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"169","usedDeprecatedRules":"88"},{"filePath":"170","messages":"171","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"172","messages":"173","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"174","messages":"175","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":"176","usedDeprecatedRules":"88"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"179","messages":"180","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"181","messages":"182","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"183","messages":"184","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},{"filePath":"185","messages":"186","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"88"},"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\index.js",[],["187","188"],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\App.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\routes\\routes.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\layouts\\Auth.js",["189","190","191"],"/*!\r\n\r\n=========================================================\r\n* Argon Dashboard React - v1.1.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React from \"react\";\r\nimport { Route, Switch, Redirect } from \"react-router-dom\";\r\n// reactstrap components\r\nimport { Container, Row, Col } from \"reactstrap\";\r\n\r\n// core components\r\nimport AuthNavbar from \"components/Navbars/AuthNavbar.js\";\r\nimport AuthFooter from \"components/Footers/AuthFooter.js\";\r\n\r\nimport routes from \"routes.js\";\r\n\r\nclass Auth extends React.Component {\r\n  componentDidMount() {\r\n    document.body.classList.add(\"bg-default\");\r\n  }\r\n  componentWillUnmount() {\r\n    document.body.classList.remove(\"bg-default\");\r\n  }\r\n  getRoutes = routes => {\r\n    return routes.map((prop, key) => {\r\n      if (prop.layout === \"/auth\") {\r\n        return (\r\n          <Route\r\n            path={prop.layout + prop.path}\r\n            component={prop.component}\r\n            key={key}\r\n          />\r\n        );\r\n      } else {\r\n        return null;\r\n      }\r\n    });\r\n  };\r\n  render() {\r\n    return (\r\n      <>\r\n        <div className=\"main-content\">\r\n          {/* <AuthNavbar /> */}\r\n          <div className=\"header bg-gradient-info py-7 py-lg-8\">\r\n            {/* <Container>\r\n              <div className=\"header-body text-center mb-7\">\r\n                <Row className=\"justify-content-center\">\r\n                  <Col lg=\"5\" md=\"6\">\r\n                    <h1 className=\"text-white\">Welcome!</h1>\r\n                    <p className=\"text-lead text-light\">\r\n                      Use these awesome forms to login or create new account in\r\n                      your project for free.\r\n                    </p>\r\n                  </Col>\r\n                </Row>\r\n              </div>\r\n            </Container> */}\r\n            <div className=\"separator separator-bottom separator-skew zindex-100\">\r\n              <svg\r\n                xmlns=\"http://www.w3.org/2000/svg\"\r\n                preserveAspectRatio=\"none\"\r\n                version=\"1.1\"\r\n                viewBox=\"0 0 2560 100\"\r\n                x=\"0\"\r\n                y=\"0\"\r\n              >\r\n                <polygon\r\n                  className=\"fill-default\"\r\n                  points=\"2560 0 2560 100 0 100\"\r\n                />\r\n              </svg>\r\n            </div>\r\n          </div>\r\n          {/* Page content */}\r\n          <Container className=\"mt--8 pb-5\">\r\n            <Row className=\"justify-content-center\">\r\n              <Switch>\r\n                {this.getRoutes(routes)}\r\n                <Redirect from=\"*\" to=\"/auth/login\" />\r\n              </Switch>\r\n            </Row>\r\n          </Container>\r\n        </div>\r\n        {/* <AuthFooter /> */}\r\n      </>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Auth;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\layouts\\Admin.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\index.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\auth.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\plans.js",["192"],"import React, {useState, useContext, createContext, useCallback} from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport { toast } from 'react-toastify'\r\n\r\nimport api from '../services/api';\r\n\r\nconst PlansContext = createContext();\r\n\r\nfunction PlansProvider({ children }) {\r\n\r\n  const history = useHistory();\r\n\r\n  const [plans, setPlans] = useState([]);\r\n  const [planSettingsId, setPlanSettingsId] = useState(() => {\r\n    const selectedId = localStorage.getItem('@Monetiz-dashboard:plan-selected');\r\n\r\n    return selectedId;\r\n  });\r\n\r\n  const getPlans = useCallback(async () => {\r\n    const response = await api.get('/plans/list');\r\n    setPlans(response.data);\r\n    return response.data;\r\n\r\n  },[])\r\n\r\n  const getPlan = useCallback(async (id) => {\r\n    const response =  await api.get(`plans/show/${id}`);\r\n    return response.data\r\n  },[])\r\n\r\n  const savePlans = useCallback(async (data) => {\r\n    try {\r\n      const response = await api.post('/plans/add', data)\r\n      setPlans(state => [...state, response.data]);\r\n      toast.success(\"Plano cadastrado !\");\r\n      history.push('/admin/plans');\r\n    } catch (err){\r\n      console.log(err);\r\n      toast.error(\"Tente novamente !\");\r\n    }\r\n  },[history])\r\n\r\n  const updatePlan = useCallback(async(data) => {\r\n    try {\r\n      const response = await api.put(`/plans/update/${data.id}`, data);\r\n      toast.success(\"Plano atualizado !\");\r\n    } catch(err){\r\n      console.log(err);\r\n      toast.error(\"Tente novamente !\");\r\n    }\r\n  },[]);\r\n\r\n  const deletePlan = useCallback(async(id) => {\r\n    try {\r\n      await api.delete(`/plans/delete/${id}`);\r\n      toast.success(\"Plano deletado !\");\r\n      history.push('/admin/plans/')\r\n      \r\n    } catch(err){\r\n      console.log(err)\r\n      toast.error(\"Tente novamente !\");\r\n    }\r\n  },[history])\r\n\r\n  \r\n\r\n\r\n  const handleSetPlanDetailsId = useCallback((id) => {\r\n    setPlanSettingsId(id);\r\n    localStorage.setItem('@Monetiz-dashboard:plan-selected', id);\r\n  },[])\r\n\r\n  const handleGetPlanDetailsId = useCallback(() => {\r\n    return planSettingsId;\r\n  },[planSettingsId])\r\n\r\n  return (\r\n    <PlansContext.Provider value={{plans, getPlans, getPlan, savePlans, updatePlan, deletePlan, handleSetPlanDetailsId, handleGetPlanDetailsId}}>\r\n      {children}\r\n    </PlansContext.Provider>\r\n  )\r\n}\r\n\r\nfunction usePlans(){\r\n  const context = useContext(PlansContext);\r\n\r\n  if(!context){\r\n    throw new Error('usePlans must be used within an PlansProvider.')\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { PlansProvider, usePlans }","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\users.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\chargebacks.js",["193"],"import React, { useContext, createContext, useCallback , useState} from 'react';\r\nimport api from 'services/api';\r\n\r\nconst ChargebacksContext = createContext();\r\n\r\nfunction ChargebacksProvider({ children }){\r\n\r\n  const [selectedChargebackId, setSelectedChargebackId] = useState(() => {\r\n    const selectedId = localStorage.getItem('@Monetiz-dashboard:chargeback-selected');\r\n    \r\n    return selectedId;\r\n  });\r\n\r\n  const saveSelectedChargeback = useCallback((id) => {\r\n    setSelectedChargebackId(id);\r\n    localStorage.setItem('@Monetiz-dashboard:chargeback-selected', id);\r\n  },[])\r\n\r\n  const getSelectedChargeback = useCallback(() => {\r\n    return selectedChargebackId\r\n  },[selectedChargebackId])\r\n\r\n  return (\r\n    <ChargebacksContext.Provider value={{ saveSelectedChargeback, getSelectedChargeback }}>\r\n      {children}\r\n    </ChargebacksContext.Provider>\r\n  )\r\n}\r\n\r\nfunction useChargebacks(){\r\n  const context = useContext(ChargebacksContext);\r\n\r\n  if(!context){\r\n    throw new Error('useChargebacks must be used within an ChargebacksProvider')\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { ChargebacksProvider, useChargebacks};","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\getnet.js",["194","195"],"import React, { useContext, createContext, useCallback, useState } from 'react';\r\nimport api from 'services/api';\r\nimport {useAuth} from 'hooks/auth'\r\n\r\n\r\nconst GatewayContext = createContext();\r\n\r\nfunction GatewayProvider({ children }){\r\n\r\n  const auth = useAuth()\r\n\r\n  const callback = useCallback(async (document, type) => {\r\n    return api.get(`/gateway/callback?document=${document}&type=${type}`)\r\n    .then((result) => {\r\n      return ({status:true, data:result.data})\r\n      \r\n    }).catch((err) => {\r\n      console.log(err)\r\n    });\r\n  },[]);\r\n\r\n  const handlePreRegisterCpf = useCallback(async (data) => {\r\n    const preRegisterData = {\r\n      legal_document_number: data.cpf,\r\n      legal_name: `${data.name} ${data.surname}`,\r\n      birth_date: data.birthdate,\r\n      mothers_name: `${data.motherName} ${data.motherSurname}`,\r\n      occupation: data.occupation,\r\n      business_address: {\r\n        mailing_address_equals: \"N\",\r\n        street: data.businessAddress.street,\r\n        number: data.businessAddress.number,\r\n        district: data.businessAddress.neighborhood,\r\n        city: data.businessAddress.city,\r\n        state: data.businessAddress.state,\r\n        postal_code: data.businessAddress.cep\r\n      },\r\n      mailing_address: {\r\n        street: data.mailingAddress.street,\r\n        number: data.mailingAddress.number,\r\n        district: data.mailingAddress.neighborhood,\r\n        city: data.mailingAddress.city,\r\n        state: data.mailingAddress.state,\r\n        postal_code: data.mailingAddress.cep,\r\n      },\r\n      email: data.email,\r\n      bank_accounts: {\r\n        type_accounts: 'unique',\r\n        ...data.bankAccounts,\r\n      },\r\n      user_id: data.user_id\r\n    }\r\n\r\n    const response = await api.post('gateway/pre-register/pf', preRegisterData)\r\n    \r\n    return response.data;\r\n  \r\n  },[]);\r\n\r\n  const handlePreRegisterCnpj = useCallback(async (data) => {\r\n    const preRegisterData = {\r\n      legal_document_number: data.cnpj,\r\n      legal_name: data.legalName,\r\n      trade_name: data.tradeName,\r\n      state_fiscal_document_number: data.stateFiscalNumber,\r\n      business_address: {\r\n        mailing_address_equals: \"N\",\r\n        street: data.businessAddress.street,\r\n        number: data.businessAddress.number,\r\n        district: data.businessAddress.neighborhood,\r\n        city: data.businessAddress.city,\r\n        state: data.businessAddress.state,\r\n        postal_code: data.businessAddress.cep\r\n      },\r\n      mailing_address: {\r\n        street: data.mailingAddress.street,\r\n        number: data.mailingAddress.number,\r\n        district: data.mailingAddress.neighborhood,\r\n        city: data.mailingAddress.city,\r\n        state: data.mailingAddress.state,\r\n        postal_code: data.mailingAddress.cep,\r\n      },\r\n      email: data.email,\r\n      bank_accounts: {\r\n        type_accounts: 'unique',\r\n        ...data.bankAccounts,\r\n      },\r\n      user_id: data.user_id\r\n    }\r\n\r\n    const response = await api.post('gateway/pre-register/pj', preRegisterData)\r\n    \r\n    return response.data;\r\n  \r\n  },[])\r\n\r\n  return (\r\n    <GatewayContext.Provider value={{callback, handlePreRegisterCpf, handlePreRegisterCnpj}}>\r\n      {children}\r\n    </GatewayContext.Provider>\r\n  )\r\n}\r\n\r\nfunction useGateway(){\r\n  const context = useContext(GatewayContext);\r\n\r\n  if(!context){\r\n    throw new Error('useGateway must be used within an Gateway Provider')\r\n  }\r\n\r\n  return context;\r\n}\r\n\r\nexport { GatewayProvider, useGateway };\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\routes.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\services\\api.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Navbars\\AuthNavbar.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Navbars\\AdminNavbar.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Footers\\AuthFooter.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Footers\\AdminFooter.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Sidebar\\Sidebar.js",["196"],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\Index.js",["197","198","199"],"import React, { useState } from \"react\";\r\n// node.js library that concatenates classes (strings)\r\nimport classnames from \"classnames\";\r\n// javascipt plugin for creating charts\r\nimport Chart from \"chart.js\";\r\n// react plugin used to create charts\r\nimport { Line, Bar } from \"react-chartjs-2\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  NavItem,\r\n  NavLink,\r\n  Nav,\r\n  Progress,\r\n  Table,\r\n  Container,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\n\r\n// core components\r\nimport {\r\n  chartOptions,\r\n  parseOptions,\r\n  chartExample1,\r\n  chartExample2\r\n} from \"variables/charts.js\";\r\n\r\nimport Header from \"components/Headers/Header\";\r\n\r\nconst Index = () => {\r\n  const [activeNav, setActiveNav] = useState(1)\r\n  const [chart, setChart] = useState(\"data1\")\r\n\r\n  if (window.Chart) {\r\n    parseOptions(Chart, chartOptions());\r\n  }\r\n  const toggleNavs = (e, index) => {\r\n    e.preventDefault();\r\n    setActiveNav(index)\r\n    setChart(chart === \"data1\" ? \"data2\" : \"data1\")\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <Col className=\"mb-5 mb-xl-0\" xl=\"8\">\r\n            <Card className=\"bg-gradient-default shadow\">\r\n              <CardHeader className=\"bg-transparent\">\r\n                <Row className=\"align-items-center\">\r\n                  <div className=\"col\">\r\n                    <h6 className=\"text-uppercase text-light ls-1 mb-1\">\r\n                      Visão Geral\r\n                      </h6>\r\n                    <h2 className=\"text-white mb-0\">Vendas</h2>\r\n                  </div>\r\n                  <div className=\"col\">\r\n                    <Nav className=\"justify-content-end\" pills>\r\n                      <NavItem>\r\n                        <NavLink\r\n                          className={classnames(\"py-2 px-3\", {\r\n                            active: activeNav === 1\r\n                          })}\r\n                          href=\"#pablo\"\r\n                          onClick={e => toggleNavs(e, 1)}\r\n                        >\r\n                          <span className=\"d-none d-md-block\">Mês</span>\r\n                          <span className=\"d-md-none\">M</span>\r\n                        </NavLink>\r\n                      </NavItem>\r\n                      <NavItem>\r\n                        <NavLink\r\n                          className={classnames(\"py-2 px-3\", {\r\n                            active: activeNav === 2\r\n                          })}\r\n                          data-toggle=\"tab\"\r\n                          href=\"#pablo\"\r\n                          onClick={e => toggleNavs(e, 2)}\r\n                        >\r\n                          <span className=\"d-none d-md-block\">Semana</span>\r\n                          <span className=\"d-md-none\">W</span>\r\n                        </NavLink>\r\n                      </NavItem>\r\n                    </Nav>\r\n                  </div>\r\n                </Row>\r\n              </CardHeader>\r\n              <CardBody>\r\n                {/* Chart */}\r\n                <div className=\"chart\">\r\n                  <Line\r\n                    data={chartExample1[chart]}\r\n                    options={chartExample1.options}\r\n                    getDatasetAtEvent={e => console.log(e)}\r\n                  />\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n          <Col xl=\"4\">\r\n            <Card className=\"shadow\">\r\n              <CardHeader className=\"bg-transparent\">\r\n                <Row className=\"align-items-center\">\r\n                  <div className=\"col\">\r\n                    <h6 className=\"text-uppercase text-muted ls-1 mb-1\">\r\n                      Performance\r\n                      </h6>\r\n                    <h2 className=\"mb-0\">Receita/Mês</h2>\r\n                  </div>\r\n                </Row>\r\n              </CardHeader>\r\n              <CardBody>\r\n                {/* Chart */}\r\n                <div className=\"chart\">\r\n                  <Bar\r\n                    data={chartExample2.data}\r\n                    options={chartExample2.options}\r\n                  />\r\n                </div>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n        \r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default Index;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\ClientProfile.js",["200","201","202","203"],"\r\nimport React, { useState, useCallback, useEffect } from \"react\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Table,\r\n  Badge,\r\n  Label,\r\n  Alert\r\n} from \"reactstrap\";\r\n\r\nimport { format, parseISO, isAfter } from 'date-fns';\r\nimport { formatPrice } from '../../utils/format';\r\nimport { useUsers } from '../../hooks/users';\r\nimport { useForm } from \"react-hook-form\"\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\r\nimport { faInfoCircle } from '@fortawesome/free-solid-svg-icons'\r\n\r\n// core components\r\nimport UserHeader from \"components/Headers/Header\";\r\nimport api from \"services/api\";\r\n\r\nfunction ClientProfile(){\r\n  const { register, handleSubmit } = useForm();\r\n  const {getSelectedUserId, updateUser } = useUsers();\r\n  const [isCpf, setIsCpf] = useState(false);\r\n  const [client, setClient] = useState({});\r\n  const [address, setAddress] = useState({});\r\n  const [banks, setBanks] = useState({})\r\n  const [sales, setSales] = useState([]);\r\n  const [chargebacks, setChargebacks] = useState([]);\r\n  const [plans, setPlans] = useState([]);\r\n  const user_id = getSelectedUserId();\r\n  useEffect(() => {\r\n    async function loadingData(){\r\n      const response = await api.get(`/user/findOne/${user_id}`);\r\n      const responsePlans = await api.get('/plans/list');  \r\n      let user = response.data.user\r\n      user.subsellerId = response.data.user.subseller.subsellerId   \r\n      setClient(user);\r\n      setAddress(response.data.user.addresses[0])\r\n      setBanks(response.data.user.banks[0])\r\n      setSales(response.data.user.store.orders);\r\n      setChargebacks(response.data.user.chargebacks);\r\n      setPlans(responsePlans.data);\r\n      response.data.user.type === \"pf\"? setIsCpf(true):setIsCpf(false)\r\n    }\r\n    loadingData();\r\n  },[getSelectedUserId, user_id])\r\n\r\n  const onSubmit = (data) => {\r\n    let {legalName, tradeName, document, stateFiscalDocument, phone, mobile, email,planId, number, neighborhood, city, state, postcode, complement, codeBank, agency, account, accountType, accountDigit } = data\r\n    let userData = { id:user_id,legalName, tradeName, document, stateFiscalDocument, phone, mobile, email,planId,type: isCpf ? \"pf\" : \"pj\" }\r\n    \r\n    let addresses = { id:address.id,name: \"Bussines Address\", address:data.address, number, neighborhood, city, state, postcode, complement }\r\n    \r\n    let bankAccounts = {\r\n      type_accounts: \"unique\",\r\n      unique_account: {id:banks.id, codeBank, agency, account, accountType, accountDigit }\r\n    }\r\n    userData.mobile = userData.mobile.replace(/\\D/g, \"\")\r\n    userData.document = client.document\r\n    userData.stateFiscalDocument = client.stateFiscalDocument\r\n    userData.phone = userData.phone.replace(/\\D/g, \"\")\r\n    addresses.postcode = addresses.postcode.replace(/\\D/g, \"\")\r\n    let dataSubmit = {\r\n      user: userData,\r\n      mailingAddressEquals: \"S\",\r\n      addresses: [addresses],\r\n      bankAccounts: bankAccounts,\r\n      subsellerId: client.subsellerId\r\n    }\r\n    api.put(\"/user/update\", dataSubmit)\r\n      .then((result) => {\r\n        console.log(result.data)\r\n      }).catch((err) => {\r\n        console.log(err)\r\n      });\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <UserHeader />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <Col className=\"order-xl-1\" xl=\"12\">\r\n            <Card className=\"bg-secondary shadow\">\r\n              <CardHeader className=\"bg-white border-0\">\r\n                <Row className=\"align-items-center\">\r\n                  <Col xs=\"8\">\r\n                    <h3 className=\"mb-0\">Cliente</h3>\r\n                  </Col>\r\n                  \r\n                </Row>\r\n              </CardHeader>\r\n              <CardBody>\r\n                {client && (\r\n                  <Form onSubmit={handleSubmit(onSubmit)}>                  \r\n                  \r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Informações\r\n                  </h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\" for=\"input-name\">{isCpf ? \"Nome\" : \"Razão Social\"}</Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"legalName\"\r\n                            id=\"input-name\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={client.legalName}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\" for='input-email'>Email</Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-email\"\r\n                            placeholder=\"exemplo@monetiz.com.br\"\r\n                            name=\"email\"\r\n                            type=\"email\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={client.email}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\" for=\"input-mobile\">\r\n                            Celular\r\n                                </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-mobile\"\r\n                            name=\"mobile\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={client.mobile}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\" for=\"input-phone\">\r\n                            Telefone Comercial\r\n                                </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-phone\"\r\n                            name=\"phone\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: false })}\r\n                            defaultValue={client.phone}\r\n                          />\r\n                        </FormGroup>\r\n\r\n                      </Col>\r\n                    </Row>\r\n                    {\r\n                      isCpf && (\r\n                        <>\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-cpf\">CPF</Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  id=\"input-cpf\"\r\n                                  name=\"document\"\r\n                                  type=\"text\"\r\n                                  disabled={true}\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={client.document}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-occupation\">\r\n                                  Ocupação/Profissão\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  id=\"input-occupation\"\r\n                                  name=\"occupation\"\r\n                                  type=\"text\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={client.occupation}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-mothername\">\r\n                                  Nome da Mãe\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  name=\"mothername\"\r\n                                  id=\"input-mothersName\"\r\n                                  type=\"text\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={client.motherName}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label className=\"form-control-Label\" for=\"input-birthday\">\r\n                                  Data de nascimento\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  defaultValue=\"\"\r\n                                  id=\"input-birthday\"\r\n                                  name=\"birthdate\"\r\n                                  type=\"date\"\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={client.birthdate}\r\n                                />\r\n\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                        </>\r\n                      )\r\n                    }\r\n\r\n                    {\r\n                      !isCpf && (\r\n                        <>\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <Label\r\n                                  className=\"form-control-Label\"\r\n                                  for=\"input-cnpj\"\r\n                                >\r\n                                  CNPJ\r\n                              </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  name=\"document\"\r\n                                  id=\"input-cnpj\"\r\n                                  type=\"text\"\r\n                                  disabled={true}\r\n                                  innerRef={register({ required: true })}\r\n                                  defaultValue={client.document}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n\r\n                                <Label\r\n                                  className=\"form-control-Label\"\r\n                                  for=\"input-state-fiscal\"\r\n                                >\r\n                                  Inscrição estadual\r\n                              </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  id=\"input-state-fiscal\"\r\n                                  name=\"stateFiscalDocument\"\r\n                                  innerRef={register({ required: true })}\r\n                                  type=\"text\"\r\n                                  disabled={true}\r\n                                  defaultValue={client.stateFiscalDocument}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                          <Row>\r\n\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n\r\n                                <Label\r\n                                  className=\"form-control-Label\"\r\n                                  for=\"input-tradename\"\r\n                                >\r\n                                  Nome fantasia\r\n                                </Label>\r\n                                <Input\r\n                                  className=\"form-control-alternative\"\r\n                                  id=\"input-tradename\"\r\n                                  name=\"tradeName\"\r\n                                  innerRef={register({ required: true })}\r\n                                  type=\"text\"\r\n                                  defaultValue={client.tradeName}\r\n                                />\r\n                              </FormGroup>\r\n                            </Col>\r\n                            <Col lg=\"6\"></Col>\r\n                          </Row>\r\n                        </>\r\n                      )\r\n                    }\r\n\r\n                  </div>\r\n                  <hr className=\"my-4\" />\r\n                  {/* Address */}\r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Endereço\r\n                  </h6>\r\n\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col md=\"12\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-address\"\r\n                          >\r\n                            Endereço\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"address\"\r\n                            id=\"input-address\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={address.address}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-number\"\r\n                          >\r\n                            Número\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"number\"\r\n                            id=\"input-number\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={address.number}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-neighborhood\"\r\n                          >\r\n                            Bairro\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"neighborhood\"\r\n                            id=\"input-neighborhood\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={address.neighborhood}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-complement\"\r\n                          >\r\n                            Complemento\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-complement\"\r\n                            name=\"complement\"\r\n                            type=\"text\"\r\n                            innerRef={register()}\r\n                            defaultValue={address.complement}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-city\"\r\n                          >\r\n                            Cidade\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"city\"\r\n                            id=\"input-city\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={address.city}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-state\"\r\n                          >\r\n                            Estado\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"state\"\r\n                            id=\"input-state\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={address.state}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"4\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                            for=\"input-postcode\"\r\n                          >\r\n                            CEP\r\n                          </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-postcode\"\r\n                            name=\"postcode\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={address.postcode}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n\r\n                  <hr className=\"my-4\" />\r\n                  <h6 className=\"heading-small text-muted mb-4\">Conta bancária</h6>\r\n                  <div className=\"pl-lg-4\">\r\n                  <Row>\r\n                      <Col>\r\n                        <Alert color=\"info\">\r\n                          <FontAwesomeIcon icon={faInfoCircle} color=\"info\" /> <strong>Regras Número da Conta</strong><br />\r\n                          <br />\r\n                          Deve conter somente digitos numéricos; Para contas com domicílio na Caixa Econômica Federal, o preenchimento deve seguir o seguinte modelo:<br />\r\n                          <br />\r\n                              São 3 dígitos para o tipo de conta, 8 dígitos para a conta, os tipos de conta são os seguintes:<br />\r\n                              001 – Conta Corrente de Pessoa Física;<br />\r\n                              003 – Conta Corrente de Pessoa Jurídica;<br />\r\n                              013 – Poupança de Pessoa Física;<br />\r\n                              022 – Poupança de Pessoa Jurídica.<br />\r\n                          <br />\r\n                              Exemplo: no campo de conta, será necessário colocar o tipo de conta (sem os zeros à esquerda) e o número da conta: 100000123.<br />\r\n                          <br />\r\n                          <FontAwesomeIcon icon={faInfoCircle} color=\"info\" /> <strong>Regras Dígito da Conta</strong><br />\r\n                          <br />\r\n                          Deve conter 1 digito numérico; Caso o dígito da conta seja X, substitua por 0.\r\n\r\n                        </Alert>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"2\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                          >\r\n                            Código do banco\r\n                                  </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            placeholder=\"Banco\"\r\n                            name=\"codeBank\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={banks.codeBank}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"2\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\">\r\n                            Agência\r\n                                  </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"agency\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={banks.agency}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"3\">\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                          >\r\n                            Número da conta\r\n                                  </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"account\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={banks.account}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"2\">\r\n                        <FormGroup>\r\n                          <Label className=\"form-control-Label\">\r\n                            Dígito da Conta\r\n                                  </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative .inputNumber\"\r\n                            name=\"accountDigit\"\r\n                            type=\"text\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={banks.accountDigit}\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"2\">\r\n\r\n                        <FormGroup>\r\n                          <Label\r\n                            className=\"form-control-Label\"\r\n                          >\r\n                            Tipo da conta\r\n                                  </Label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            name=\"accountType\"\r\n                            type=\"select\"\r\n                            innerRef={register({ required: true })}\r\n                            defaultValue={banks.accountType}\r\n                          >\r\n                            <option value=\"C\"  >Conta Corrente</option>\r\n                            <option value=\"P\" >Conta Poupança</option>\r\n                          </Input>\r\n                        </FormGroup>\r\n\r\n                      </Col>\r\n\r\n                    </Row>\r\n                  </div>\r\n\r\n                  <hr className=\"my-4\" />\r\n                  <h6 className=\"heading-small text-muted mb-4\">Plano</h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <FormGroup>\r\n                      <Label>Plano selecionado</Label>\r\n                      <Input\r\n                        type=\"select\"\r\n                        name=\"planId\"\r\n                        id=\"exampleSelect\"\r\n                        defaultValue={client.planId}\r\n                        innerRef={register({ required: true })}\r\n                      >\r\n                        {plans.map(plan => (\r\n                          <option value={plan.id} key={plan.id}>{plan.name}</option>\r\n                        ))}\r\n                      </Input>\r\n                    </FormGroup>\r\n                  </div>\r\n\r\n                  <Col className='d-flex justify-content-center'>\r\n                    <Button color=\"primary\" className='self-align-center' >\r\n                      Confirmar\r\n                    </Button>\r\n                  </Col>\r\n                </Form>\r\n                  \r\n                )}\r\n\r\n              \r\n              </CardBody>\r\n\r\n\r\n              <CardBody>\r\n                Vendas\r\n                \r\n                <Table className=\"align-items-center table-flush\" responsive>\r\n                <thead className=\"thead-light\">\r\n                  <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Valor</th>\r\n                    <th scope=\"col\">Data</th>\r\n                    {/* <th scope=\"col\">Status</th>\r\n                    {/* <th scope=\"col\">Users</th> \r\n                    <th scope=\"col\" /> */}\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  \r\n                    {sales.map(sale => (\r\n                      <tr key={sale.id}>\r\n                      <th scope=\"row\">\r\n\r\n\r\n                      <td>\r\n                      <span className=\"mb-0 text-sm\">\r\n                              {sale.valueTotal}\r\n                            </span>\r\n                      </td>\r\n     \r\n                      </th>\r\n                      <td>{sale.date}</td>\r\n                      <td>\r\n                        {format(sale.createdAt, 'dd/MM/YYYY')}\r\n                      </td>\r\n{/* \r\n                      <td>\r\n                        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n                          <i className={sale.active ? \"bg-success\" : \"bg-warning\"} />\r\n                          {sale.active ? \"Pago\": 'Inadimplente'}\r\n                        </Badge>\r\n                      </td>\r\n  \r\n                      <td className=\"text-right\">\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle\r\n                            className=\"btn-icon-only text-light\"\r\n                            href=\"#pablo\"\r\n                            role=\"button\"\r\n                            size=\"sm\"\r\n                            color=\"\"\r\n                            onClick={e => e.preventDefault()}\r\n                          >\r\n                            <i className=\"fas fa-ellipsis-v\" />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                            <DropdownItem\r\n                              onClick={(e) => e.preventDefault()}\r\n                            >\r\n                              Ver perfil\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              href=\"#pablo\"\r\n                              onClick={e => e.preventDefault()}\r\n                            >\r\n                              Another action\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              href=\"#pablo\"\r\n                              onClick={e => e.preventDefault()}\r\n                            >\r\n                              Something else here\r\n                            </DropdownItem>\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                      </td> */}\r\n                    </tr>\r\n                    ))}\r\n                </tbody>\r\n                </Table> \r\n              </CardBody>\r\n\r\n              <CardBody>\r\n                Chargebacks\r\n                \r\n                <Table className=\"align-items-center table-flush\" responsive>\r\n                <thead className=\"thead-light\">\r\n                  <tr>\r\n                    <th scope=\"col\">#</th>\r\n                    <th scope=\"col\">Valor</th>\r\n                    <th scope=\"col\">Data de requisição</th>\r\n                    <th scope=\"col\">Data de limite</th>\r\n                    <th scope=\"col\">Status pagamento</th>\r\n                    {/* <th scope=\"col\">Users</th> */}\r\n                    <th scope=\"col\" />\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  \r\n                     {chargebacks.map(chargeback => (\r\n                      <tr key={chargeback.id}>\r\n                     \r\n                      <td>{chargeback.id}</td>\r\n                      <th scope=\"row\">\r\n                        <td>\r\n                        <span className=\"mb-0 text-sm\">\r\n                                {formatPrice(chargeback.value)}\r\n                              </span>\r\n                        </td>\r\n                      </th>\r\n                      <td>{format(parseISO(chargeback.createdAt), 'dd/MM/yyyy')}</td>\r\n                      <td>{format(parseISO(chargeback.due_date), 'dd/MM/yyyy')}</td>\r\n                      <td>\r\n                        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n                          <i className={chargeback.status ? \"bg-success\" : \"bg-warning\"} />\r\n                          {chargeback.status ? \"Pago\": \"Aguardando\"}\r\n                        </Badge>\r\n                      </td>\r\n{/*   \r\n                      <td className=\"text-right\">\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle\r\n                            className=\"btn-icon-only text-light\"\r\n                            href=\"#pablo\"\r\n                            role=\"button\"\r\n                            size=\"sm\"\r\n                            color=\"\"\r\n                            onClick={e => e.preventDefault()}\r\n                          >\r\n                            <i className=\"fas fa-ellipsis-v\" />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                            <DropdownItem\r\n                              onClick={(e) => e.preventDefault()}\r\n                            >\r\n                              Ver perfil\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              href=\"#pablo\"\r\n                              onClick={e => e.preventDefault()}\r\n                            >\r\n                              Another action\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              href=\"#pablo\"\r\n                              onClick={e => e.preventDefault()}\r\n                            >\r\n                              Something else here\r\n                            </DropdownItem>\r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                      </td> */}\r\n                    </tr>\r\n                    ))} \r\n                </tbody>\r\n                </Table> \r\n              </CardBody>\r\n\r\n\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default ClientProfile;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\Clients.js",["204"],"import React, { useState, useEffect, useCallback } from \"react\";\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n// reactstrap components\r\nimport {\r\n  Badge,\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardFooter,\r\n  DropdownMenu,\r\n  DropdownItem,\r\n  UncontrolledDropdown,\r\n  DropdownToggle,\r\n  Media,\r\n  Pagination,\r\n  PaginationItem,\r\n  PaginationLink,\r\n  Table,\r\n  Container,\r\n  Row,\r\n  CardBody\r\n} from \"reactstrap\";\r\n// core components\r\n\r\nimport { useUsers } from '../../hooks/users'\r\nimport { useGateway } from '../../hooks/getnet'\r\n\r\nimport Header from \"components/Headers/Header.js\";\r\n\r\nimport api from '../../services/api';\r\n\r\nfunction Clients() {\r\n  const gateway = useGateway()\r\n  const history = useHistory();\r\n  const { saveSelectedUserId } = useUsers();\r\n\r\n  const [clients, setClients] = useState([]);\r\n  const [filter, setFilter] = useState(1)\r\n\r\n\r\n  useEffect(() => {\r\n    async function loadingClients() {\r\n      const response = await api.get(`/user?filter=${filter}`);\r\n      setClients(response.data);\r\n    }\r\n    loadingClients();\r\n  }, [filter])\r\n\r\n  const handleProfile = useCallback((client) => {\r\n    saveSelectedUserId(client.id);\r\n    history.push('/admin/client-profile')\r\n  }, [history, saveSelectedUserId])\r\n\r\n  const handleCallback = async (document, type, index) => {\r\n    let { status, data } = await gateway.callback(document, type)\r\n    console.log(status);\r\n    if (status) {\r\n      let newArr = [...clients]\r\n      newArr[index].subseller.enabled = data.enabled\r\n      newArr[index].subseller.status = data.status\r\n      console.log(newArr[index]);\r\n      setClients(newArr)\r\n    }\r\n  }\r\n\r\n  const handleFilter = async (filter) => {\r\n    setFilter(filter)\r\n  }\r\n\r\n  const handleNewClient = useCallback(() => {\r\n    history.push(`/admin/client-register`)\r\n  }, [history])\r\n\r\n  return (\r\n    <>\r\n      <Header />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        {/* Table */}\r\n        <Row>\r\n          <div className=\"col\">\r\n            <Card className=\"shadow\">\r\n              <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                <h3 className=\"mb-0\">Clientes</h3>\r\n                <div>\r\n                  <Button color='primary' onClick={handleNewClient}>Cadastrar</Button>\r\n                </div>\r\n              </CardHeader>\r\n              <CardBody>\r\n                <div className=\"status d-flex \">\r\n                  <a className={`order-status order-status-paid`} href=\"#mon\" onClick={e => { e.preventDefault(); handleFilter(1) }} >\r\n                    <strong>Clientes Ativos</strong>\r\n                  </a>\r\n                  <a className={`order-status order-status-waiting_payment`} href=\"#anc\" onClick={e => { e.preventDefault(); handleFilter(2) }}>\r\n                    <strong>Clientes Aguardando Liberação</strong>\r\n                  </a>\r\n                  <a className={`order-status order-status-cancelled`} href=\"#mon\" onClick={e => { e.preventDefault(); handleFilter(3) }}>\r\n                    <strong>Clientes Cancelados</strong>\r\n                  </a>\r\n                </div>\r\n              </CardBody>\r\n              <Table className=\"align-items-center table-flush\" responsive>\r\n                <thead className=\"thead-light\">\r\n                  <tr>\r\n                    <th scope=\"col\">Empresa</th>\r\n                    <th scope=\"col\">Plano</th>\r\n                    <th scope=\"col\">Pagamento</th>\r\n                    <th scope=\"col\">Status</th>\r\n                    <th scope=\"col\" />\r\n                  </tr>\r\n                </thead>\r\n                <tbody>\r\n                  {clients.map((client, index) => (\r\n                    <tr key={client.id}>\r\n                      <th scope=\"row\">\r\n                        <span className=\"mb-0 text-sm\">\r\n                          {client.name}\r\n                        </span>\r\n                      </th>\r\n                      <td>{client.plan ? client.plan.name : \"Sem Plano\"}</td>\r\n                      <td>\r\n                        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n                          <i className={client.paymentStatus === 'ok' ? \"bg-success\" : \"bg-warning\"} />\r\n                          {client.paymentStatus}\r\n                        </Badge>\r\n                      </td>\r\n\r\n                      <td>\r\n                        <Badge color=\"\" className=\"badge-dot mr-4\">\r\n                          <i className={client.subseller.enabled === \"S\" ? \"bg-success\" : \"bg-warning\"} />\r\n                          {client.subseller.status}\r\n                        </Badge>\r\n                      </td>\r\n\r\n                      <td className=\"text-right\">\r\n                        <UncontrolledDropdown>\r\n                          <DropdownToggle\r\n                            className=\"btn-icon-only text-light\"\r\n                            role=\"button\"\r\n                            size=\"sm\"\r\n                            color=\"\"\r\n                          >\r\n                            <i className=\"fas fa-ellipsis-v\" />\r\n                          </DropdownToggle>\r\n                          <DropdownMenu className=\"dropdown-menu-arrow\" right>\r\n                            <DropdownItem\r\n                              onClick={() => handleProfile(client)}\r\n                            >\r\n                              Ver perfil\r\n                            </DropdownItem>\r\n                            <DropdownItem\r\n                              onClick={\r\n                                e => {\r\n                                  e.preventDefault()\r\n                                  handleCallback(client.document, client.type, index)\r\n                                }\r\n                              }\r\n                            >\r\n                              Atualizar Situação\r\n                            </DropdownItem>\r\n                            \r\n                          </DropdownMenu>\r\n                        </UncontrolledDropdown>\r\n                      </td>\r\n                    </tr>\r\n\r\n                  ))}\r\n\r\n                </tbody>\r\n              </Table>\r\n              <CardFooter className=\"py-4\">\r\n                <nav aria-label=\"...\">\r\n                  <Pagination\r\n                    className=\"pagination justify-content-end mb-0\"\r\n                    listClassName=\"justify-content-end mb-0\"\r\n                  >\r\n                    <PaginationItem className=\"disabled\">\r\n                      <PaginationLink\r\n                        href=\"#\"\r\n                        onClick={e => e.preventDefault()}\r\n                        tabIndex=\"-1\"\r\n                      >\r\n                        <i className=\"fas fa-angle-left\" />\r\n                        <span className=\"sr-only\">Previous</span>\r\n                      </PaginationLink>\r\n                    </PaginationItem>\r\n                    <PaginationItem className=\"active\">\r\n                      <PaginationLink\r\n                        href=\"#\"\r\n                        onClick={e => e.preventDefault()}\r\n                      >\r\n                        1\r\n                      </PaginationLink>\r\n                    </PaginationItem>\r\n                   \r\n                    <PaginationItem>\r\n                      <PaginationLink\r\n                        href=\"#\"\r\n                        onClick={e => e.preventDefault()}\r\n                      >\r\n                        <i className=\"fas fa-angle-right\" />\r\n                        <span className=\"sr-only\">Next</span>\r\n                      </PaginationLink>\r\n                    </PaginationItem>\r\n                  </Pagination>\r\n                </nav>\r\n              </CardFooter>\r\n            </Card>\r\n          </div>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\n\r\n\r\nexport default Clients;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\clients\\ClientRegister.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\Plans.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\PlanRegister.js",["205","206","207","208","209","210","211","212","213","214","215"],"\r\nimport React, { useState, useCallback, useEffect } from \"react\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Container,\r\n  Row,\r\n  Col,\r\n  Label,\r\n  InputGroup,\r\n  InputGroupAddon,\r\n  Collapse,\r\n} from \"reactstrap\";\r\n\r\n// core components\r\nimport UserHeader from \"components/Headers/Header\";\r\n\r\nimport { usePlans } from '../../hooks/plans'\r\n\r\nimport american_express from '../../assets/img/bandeiras/american_express.png';\r\nimport dinners_club from '../../assets/img/bandeiras/dinners_club.png';\r\nimport cabal from '../../assets/img/bandeiras/cabal.png';\r\nimport cred_system from '../../assets/img/bandeiras/cred_system.png';\r\nimport credz from '../../assets/img/bandeiras/credz.png';\r\nimport hiper from '../../assets/img/bandeiras/hiper.png';\r\nimport soro_cred from '../../assets/img/bandeiras/soro_cred.png';\r\nimport visa from '../../assets/img/bandeiras/visa.svg';\r\nimport hiper_card from '../../assets/img/bandeiras/hiper_card.svg';\r\nimport master_card from '../../assets/img/bandeiras/master_card.svg';\r\nimport elo from '../../assets/img/bandeiras/elo.svg';\r\n\r\nfunction PlanMonetizPaySettings(){\r\n\r\n  const { savePlans } = usePlans();\r\n\r\n  const [planName, setPlanName]= useState('');\r\n  const [statusPlan, setStatusPlan] = useState(true);\r\n  \r\n  const [collapse, setCollpase] = useState(false);\r\n  \r\n  const [taxMonetizStatus, setTaxMonetizStatus] = useState(false);\r\n  const [paymentMonetizTaxType, setPaymentMonetizTaxType] = useState('percentage');\r\n  const [taxMonetizValue, setTaxMonetizValue] = useState(0)\r\n  \r\n  const [taxBoletoStatus, setTaxBoletoStatus] = useState(false);\r\n  const [paymentBoletoBuyerTaxType, setPaymentBoletoBuyerTaxType] = useState('percentage');\r\n  const [paymentBoletoBuyerTaxValue, setPaymentBoletoBuyerTaxValue] = useState(0);\r\n\r\n  const [paymentBoletoMonetizTaxType, setPaymentBoletoMonetizTaxType] = useState('percentage');\r\n  const [paymentBoletoMonetizTaxValue, setPaymentBoletoMonetizTaxValue] = useState(0);\r\n\r\n  const [taxCreditCardStatus, setTaxCreditCardStatus ] = useState(false);\r\n  const [paymentCreditCardBuyerTaxType, setPaymentCreditCardBuyerTaxType] = useState('percentage');\r\n  const [paymentCreditCardBuyerTaxValue, setPaymentCreditCardBuyerTaxValue ] = useState(0);\r\n\r\n  const [paymentCreditCardMonetizTaxType, setPaymentCreditCardMonetizTaxType] = useState('percentage');\r\n  const [paymentCreditCardMonetizTaxValue, setPaymentCreditCardMonetizTaxValue ] = useState(0);\r\n\r\n  const [paymentAnticipationBuyerTaxType, setPaymentAnticipationBuyerTaxType] = useState('percentage');\r\n  const [paymentAnticipationBuyerTaxValue, setPaymentAnticipationBuyerTaxValue ] = useState(0);\r\n\r\n  const [paymentAnticipationMonetizTaxType, setPaymentAnticipationMonetizTaxType] = useState('percentage');\r\n  const [paymentAnticipationMonetizTaxValue, setPaymentAnticipationMonetizTaxValue ] = useState(0);\r\n    \r\n\r\n  const [installments, setInstallments] = useState([]);\r\n  const [installmentsCreditCardFields, setInstallmentsCreditCardFields] = useState([]);\r\n  const [installmentsCreditCard, setInstallmentsCreditCard] = useState(16);\r\n  const [installmentsCreditCardSelected, setInstallmentsCreditCardSelected] = useState(12);\r\n\r\n  \r\n\r\n  const [installmentsCreditCardArea, setInstallmentsCreditCardArea] = useState([])\r\n  const [installmentsInputValues, setInstallmentsInputValues] = useState([]);\r\n  const [update, setUpdate ] = useState(false);\r\n\r\n  \r\n  \r\n  const [creditCards, setCreditCards] = useState([\r\n    {\r\n      name: 'American Express',\r\n      img: american_express,\r\n    },\r\n    {\r\n      name: \"Dinner's Club\",\r\n      img: dinners_club\r\n    },\r\n    {\r\n      name: \"Cabal\",\r\n      img: cabal\r\n    },\r\n    {\r\n      name: \"Cred System\",\r\n      img: cred_system\r\n    },\r\n    {\r\n      name: \"Credz\",\r\n      img: credz\r\n    },\r\n    {\r\n      name: \"Hiper\",\r\n      img: hiper\r\n    },\r\n    {\r\n      name: \"Soro Cred\",\r\n      img: soro_cred\r\n    },\r\n    {\r\n      name: \"Visa\",\r\n      img: visa\r\n    },\r\n    {\r\n      name: \"Hiper Card\",\r\n      img: hiper_card\r\n    },\r\n    {\r\n      name: \"Master Card\",\r\n      img: master_card\r\n    },\r\n    {\r\n      name: \"Elo\",\r\n      img: elo\r\n    },\r\n  ])\r\n\r\n  useEffect(() => {\r\n    const auxCreditCard = creditCards.map( creditCard => ({\r\n      ...creditCard,\r\n      installmentsMonetiz: new Array( installmentsCreditCard).fill(0),\r\n      installmentsBuyer: new Array(installmentsCreditCard).fill(0)\r\n    }))\r\n\r\n    setInstallmentsInputValues(auxCreditCard);\r\n  }, [creditCards, installmentsCreditCard, installmentsCreditCard.length])\r\n\r\n  useEffect(() => {\r\n    const auxInstallments = [];\r\n    for(let i = 1; i <= installmentsCreditCard; i++){\r\n      auxInstallments.push(i);\r\n    }\r\n    setInstallments(auxInstallments);\r\n\r\n  }, [creditCards, installmentsCreditCard])\r\n\r\n  useEffect(() => {\r\n    const auxInstallments = [];\r\n    for(let i = 1; i <= installmentsCreditCardSelected; i++){\r\n      auxInstallments.push(i);\r\n    }\r\n\r\n    setInstallmentsCreditCardFields(auxInstallments);\r\n\r\n  }, [installmentsCreditCard, installmentsCreditCardSelected])\r\n\r\n  useEffect(() => {\r\n    const length = creditCards.length;\r\n\r\n    const auxInstallmentsCreditCardArea = [];\r\n\r\n    for(let i = 0; i < length; i ++){\r\n      auxInstallmentsCreditCardArea.push(false);\r\n    }\r\n\r\n    setUpdate( state => !state)\r\n\r\n  },[creditCards])\r\n\r\n  const handleInstallmentsArea = useCallback((index) => {\r\n    console.log(index);\r\n    const auxInstallmentsCreditCardArea = installmentsCreditCardArea;\r\n    auxInstallmentsCreditCardArea[index] = !auxInstallmentsCreditCardArea[index];\r\n\r\n    setInstallmentsCreditCardArea(auxInstallmentsCreditCardArea);\r\n\r\n    console.log(auxInstallmentsCreditCardArea)\r\n    setUpdate(state => !state);\r\n  }, [installmentsCreditCardArea])\r\n\r\n  const handleValueInputBuyer = useCallback((value, creditCard,index) => {\r\n\r\n    const auxInstallmentsInputValues = installmentsInputValues;\r\n\r\n    const installmentsInputValueIndex = auxInstallmentsInputValues.findIndex( item => item.name === creditCard);\r\n    auxInstallmentsInputValues[installmentsInputValueIndex].installmentsBuyer[index] = value;\r\n\r\n    setInstallmentsInputValues(auxInstallmentsInputValues);\r\n    \r\n    setUpdate(state => !state)\r\n  }, [installmentsInputValues])\r\n\r\n\r\n  const handleValueInputMonetiz = useCallback((value, creditCard,index) => {\r\n    const auxInstallmentsInputValues = installmentsInputValues;\r\n\r\n    const installmentsInputValueIndex = auxInstallmentsInputValues.findIndex( item => item.name === creditCard);\r\n    auxInstallmentsInputValues[installmentsInputValueIndex].installmentsMonetiz[index] = Number(value);\r\n\r\n    setInstallmentsInputValues(auxInstallmentsInputValues);\r\n\r\n    \r\n    setUpdate(state => !state)\r\n  }, [installmentsInputValues])\r\n\r\n\r\n  const handleResumeInstallment = useCallback((creditCard,index) => {\r\n    const auxInstallmentsInputValues = installmentsInputValues;\r\n\r\n    const installmentsInputValueIndex = auxInstallmentsInputValues.findIndex( item => item.name === creditCard);\r\n\r\n    return `\r\n      ${auxInstallmentsInputValues[installmentsInputValueIndex].installmentsBuyer[index]/100}% \r\n    + ${auxInstallmentsInputValues[installmentsInputValueIndex].installmentsMonetiz[index]/100}% \r\n    = ${auxInstallmentsInputValues[installmentsInputValueIndex].installmentsBuyer[index]/100 \r\n      + auxInstallmentsInputValues[installmentsInputValueIndex].installmentsMonetiz[index]/100}%\r\n    `\r\n\r\n  },[installmentsInputValues])\r\n\r\n  const handleSubmit = async(e) => {\r\n    e.preventDefault();\r\n    \r\n    const data = {\r\n      name: planName,\r\n      status: statusPlan,\r\n      monetiz_tax_status: taxMonetizStatus,\r\n      monetiz_tax_method: paymentBoletoBuyerTaxType,\r\n      monetiz_tax: paymentBoletoBuyerTaxValue,\r\n      boleto_tax_status: taxBoletoStatus,\r\n      boleto_tax_buyer_method: paymentBoletoBuyerTaxType,\r\n      boleto_tax_buyer: paymentBoletoBuyerTaxValue,\r\n      boleto_tax_monetiz_method: paymentBoletoMonetizTaxType,\r\n      boleto_tax_monetiz: paymentBoletoMonetizTaxValue,\r\n      credit_card_tax_status: taxCreditCardStatus,\r\n      credit_card_tax_buyer_method: paymentCreditCardBuyerTaxType,\r\n      credit_card_tax_buyer: paymentCreditCardBuyerTaxValue,\r\n      credit_card_tax_monetiz_method: paymentCreditCardMonetizTaxType,\r\n      credit_card_tax_monetiz: paymentCreditCardMonetizTaxValue,\r\n    }\r\n\r\n    await savePlans(data);\r\n\r\n    console.log(data);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <UserHeader />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <Col className=\"order-xl-1\" xl=\"12\">\r\n            <Card className=\"bg-secondary shadow\">\r\n              <CardHeader className=\"bg-white border-0\">\r\n                <Row className=\"align-items-center\">\r\n                  <Col xs=\"8\">\r\n                    <h3 className=\"mb-0\">Plano Monetiz Pay</h3>\r\n                  </Col>\r\n                </Row>\r\n              </CardHeader>\r\n              <CardBody>\r\n              <Form onSubmit={(e) => handleSubmit(e)} id='form'>\r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Informações\r\n                  </h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-username\"\r\n                          >\r\n                            Nome\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            onChange={(e) => setPlanName(e.target.value)}\r\n                            id=\"input-username\"\r\n                            type=\"text\"\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"12\">\r\n                      <FormGroup className='d-flex flex-column'>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-first-name\"\r\n                          >\r\n                            Status\r\n                          </label>\r\n                          <FormGroup className='d-flex flex-column'>\r\n                            <Label onClick={() => setStatusPlan(true)}>\r\n                              <Input type='radio' name='statusPlan' checked={statusPlan}/>\r\n                                Ativo\r\n                            </Label>\r\n\r\n                            <Label onClick={() => setStatusPlan(false)}>\r\n                              <Input type='radio' name='statusPlan' checked={!statusPlan}/>\r\n                                Inativo\r\n                            </Label>\r\n\r\n                          </FormGroup>\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Taxas\r\n                  </h6>\r\n\r\n                  <Card style={{padding: '40px 40px 0 40px', marginBottom: '20px', backgroundColor: '#f8f8f8'}}> \r\n                  \r\n                    <Row >\r\n                      <Col lg=\"6\">\r\n                        <FormGroup className='d-flex flex-column'>\r\n                          {/* <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-first-name\"\r\n                          >\r\n                            Monetiz\r\n                          </label> */}\r\n                          <CardHeader>\r\n                            Monetiz\r\n                          </CardHeader>\r\n                          <FormGroup className='d-flex flex-column'>\r\n                            <Label onClick={() => setTaxMonetizStatus(true)}>\r\n                              <Input type='radio' name='taxMonetizStatus' checked={taxMonetizStatus}/>\r\n                                Ativo\r\n                            </Label>\r\n\r\n                            <Label onClick={() => setTaxMonetizStatus(false)}>\r\n                              <Input type='radio' name='taxMonetizStatus' checked={!taxMonetizStatus}/>\r\n                                Inativo\r\n                            </Label>\r\n\r\n                          </FormGroup>\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                      <Collapse isOpen={taxMonetizStatus}>\r\n                       <CardBody>\r\n                        <Row>\r\n                          <Col lg=\"6\">\r\n                            <FormGroup className='d-flex flex-column'>\r\n                              <label\r\n                                className=\"form-control-label\"\r\n                                htmlFor=\"input-first-name\"\r\n                              >\r\n                                Tipo de taxa Monetiz\r\n                              </label>\r\n                              <FormGroup className='d-flex flex-column'>\r\n                                <Label onClick={() => setPaymentMonetizTaxType('percentage')}>\r\n                                  <Input type='radio' name='paymentMonetizTaxType' checked={ paymentMonetizTaxType === 'percentage'}/>\r\n                                    Porcentagem (%)\r\n                                </Label>\r\n\r\n                                <Label onClick={() => setPaymentMonetizTaxType('fixed')}>\r\n                                  <Input type='radio' name='paymentMonetizTaxType' checked={ paymentMonetizTaxType === 'fixed'}/>\r\n                                    Fixa (R$)\r\n                                </Label>\r\n\r\n                              </FormGroup>\r\n                            </FormGroup>\r\n                          </Col>\r\n\r\n                          <Col lg=\"6\">\r\n                            <FormGroup>\r\n                              <label\r\n                                className=\"form-control-label\"\r\n                                htmlFor=\"input-last-name\"\r\n                              >\r\n                                Valor\r\n                              </label>\r\n                              <InputGroup>\r\n                                <InputGroupAddon addonType=\"prepend\">{paymentMonetizTaxType === 'percentage' ? '%' : 'R$'}</InputGroupAddon>\r\n                                <Input placeholder=\"Valor\" min={0} max={100} type=\"text\" step=\"1\" onChange={(e) => setTaxMonetizValue(e.target.value)}/>\r\n                              </InputGroup>\r\n                            </FormGroup>\r\n                          </Col>\r\n                        </Row>\r\n                        </CardBody>\r\n                      </Collapse>\r\n\r\n                    </Card>\r\n\r\n                    <Card style={{padding: '40px 40px 0 40px', marginBottom: '20px', backgroundColor: '#f8f8f8'}}>\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup className='d-flex flex-column'>\r\n                          <CardHeader>\r\n                            Boleto\r\n                          </CardHeader>\r\n                            <FormGroup className='d-flex flex-column'>\r\n                              <Label onClick={() => setTaxBoletoStatus(true)}>\r\n                                <Input type='radio' name='taxBoletoStatus' checked={taxBoletoStatus}/>\r\n                                  Ativo\r\n                              </Label>\r\n\r\n                              <Label onClick={() => setTaxBoletoStatus(false)}>\r\n                                <Input type='radio' name='taxBoletoStatus' checked={!taxBoletoStatus}/>\r\n                                  Inativo\r\n                              </Label>\r\n\r\n                            </FormGroup>\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n\r\n                      <Collapse isOpen={taxBoletoStatus}>\r\n                        <CardBody>\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup className='d-flex flex-column'>\r\n                                <label\r\n                                  className=\"form-control-label\"\r\n                                  htmlFor=\"input-first-name\"\r\n                                >\r\n                                  Tipo de taxa no Boleto (Adquirente)\r\n                                </label>\r\n                                  <FormGroup className='d-flex flex-column'>\r\n                                    <Label onClick={() => setPaymentBoletoBuyerTaxType('percentage')}>\r\n                                      <Input type='radio' name='paymentBoletoBuyerTaxType' checked={ paymentBoletoBuyerTaxType === 'percentage'}/>\r\n                                        Porcentagem (%)\r\n                                    </Label>\r\n\r\n                                    <Label onClick={() => setPaymentBoletoBuyerTaxType('fixed')}>\r\n                                      <Input type='radio' name='paymentBoletoBuyerTaxType' checked={ paymentBoletoBuyerTaxType === 'fixed'}/>\r\n                                        Fixa (R$)\r\n                                    </Label>\r\n\r\n                                </FormGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                              <label\r\n                                className=\"form-control-label\"\r\n                                htmlFor=\"input-last-name\"\r\n                              >\r\n                                Valor\r\n                              </label>\r\n                              <InputGroup>\r\n                                <InputGroupAddon addonType=\"prepend\">{paymentBoletoBuyerTaxType === 'percentage' ? '%' : 'R$'}</InputGroupAddon>\r\n                                <Input placeholder=\"Valor\" min={0} max={100} type=\"text\" step=\"1\" onChange={(e) => setPaymentBoletoBuyerTaxValue(e.target.value)} />\r\n                              </InputGroup>\r\n                            </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup className='d-flex flex-column'>\r\n                                <label\r\n                                  className=\"form-control-label\"\r\n                                  htmlFor=\"input-first-name\"\r\n                                >\r\n                                  Tipo de taxa no Boleto (Monetiz)\r\n                                </label>\r\n                                <FormGroup className='d-flex flex-column'>\r\n                                  <Label onClick={() => setPaymentBoletoMonetizTaxType('percentage')}>\r\n                                    <Input type='radio' name='paymentBoletoMonetizTaxType' checked={ paymentBoletoMonetizTaxType === 'percentage'}/>\r\n                                      Porcentagem (%)\r\n                                  </Label>\r\n\r\n                                  <Label onClick={() => setPaymentBoletoMonetizTaxType('fixed')}>\r\n                                    <Input type='radio' name='paymentBoletoMonetizTaxType' checked={ paymentBoletoMonetizTaxType === 'fixed'}/>\r\n                                      Fixa (R$)\r\n                                  </Label>\r\n\r\n                                </FormGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <label\r\n                                  className=\"form-control-label\"\r\n                                  htmlFor=\"input-last-name\"\r\n                                >\r\n                                  Valor\r\n                                </label>\r\n                                <InputGroup>\r\n                                  <InputGroupAddon addonType=\"prepend\">{paymentBoletoMonetizTaxType === 'percentage' ? '%' : 'R$'}</InputGroupAddon>\r\n                                  <Input placeholder=\"Valor\" min={0} max={100} type=\"text\" step=\"1\" onChange={(e) => setPaymentBoletoMonetizTaxValue(e.target.value)}/>\r\n                                </InputGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n                        </CardBody>\r\n                        \r\n                      </Collapse>\r\n                    </Card>\r\n\r\n                    <Card style={{padding: '40px 40px 0 40px', marginBottom: '20px', backgroundColor: '#f8f8f8'}}>\r\n                      <Row>\r\n                        <Col lg=\"6\">\r\n                          <FormGroup className='d-flex flex-column'>\r\n                            <CardHeader>Cartão de Crédito</CardHeader>\r\n                              <FormGroup className='d-flex flex-column'>\r\n                              <Label onClick={() => setTaxCreditCardStatus(true)}>\r\n                                <Input type='radio' name='taxCreditCard' checked={taxCreditCardStatus}/>\r\n                                  Ativo\r\n                              </Label>\r\n\r\n                              <Label onClick={() => setTaxCreditCardStatus(false)}>\r\n                                <Input type='radio' name='taxCreditCard' checked={!taxCreditCardStatus}/>\r\n                                  Inativo\r\n                              </Label>\r\n\r\n                            </FormGroup>\r\n                          </FormGroup>\r\n                        </Col>\r\n                      </Row>\r\n\r\n                      <Collapse isOpen={taxCreditCardStatus}>\r\n                        <CardBody>\r\n\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup className='d-flex flex-column'>\r\n                                <label\r\n                                  className=\"form-control-label\"\r\n                                  htmlFor=\"input-first-name\"\r\n                                >\r\n                                  Tipo de taxa no Cartão de Crédito à vista (Adquirente)\r\n                                </label>\r\n                                <FormGroup className='d-flex flex-column'>\r\n                                  <Label onClick={() => setPaymentCreditCardBuyerTaxType('percentage')}>\r\n                                    <Input type='radio' name='paymentCreditCardBuyerTaxType' checked={ paymentCreditCardBuyerTaxType === 'percentage'}/>\r\n                                      Porcentagem (%)\r\n                                  </Label>\r\n\r\n                                  <Label onClick={() => setPaymentCreditCardBuyerTaxType('fixed')}>\r\n                                    <Input type='radio' name='paymentCreditCardBuyerTaxType' checked={ paymentCreditCardBuyerTaxType === 'fixed'}/>\r\n                                      Fixa (R$)\r\n                                  </Label>\r\n\r\n                                </FormGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n                            \r\n\r\n\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <label\r\n                                  className=\"form-control-label\"\r\n                                  htmlFor=\"input-last-name\"\r\n                                >\r\n                                  Valor\r\n                                </label>\r\n                                <InputGroup>\r\n                                  <InputGroupAddon addonType=\"prepend\">{paymentCreditCardBuyerTaxType === 'percentage' ? '%' : 'R$'}</InputGroupAddon>\r\n                                  <Input placeholder=\"Valor\" min={0} max={100} type=\"text\" step=\"1\" onChange={(e) => setPaymentCreditCardBuyerTaxValue(e.target.value)}/>\r\n                                </InputGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup className='d-flex flex-column'>\r\n                                <label\r\n                                  className=\"form-control-label\"\r\n                                  htmlFor=\"input-first-name\"\r\n                                >\r\n                                  Tipo de taxa no Cartão de Crédito à vista (Monetiz)\r\n                                </label>\r\n                                <FormGroup className='d-flex flex-column'>\r\n                                  <Label onClick={() => setPaymentCreditCardMonetizTaxType('percentage')}>\r\n                                    <Input type='radio' name='paymentCreditCardMonetizTaxType' checked={ paymentCreditCardMonetizTaxType === 'percentage'}/>\r\n                                      Porcentagem (%)\r\n                                  </Label>\r\n\r\n                                  <Label onClick={() => setPaymentCreditCardMonetizTaxType('fixed')}>\r\n                                    <Input type='radio' name='paymentCreditCardMonetizTaxType' checked={ paymentCreditCardMonetizTaxType === 'fixed'}/>\r\n                                      Fixa (R$)\r\n                                  </Label>\r\n\r\n                                </FormGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n                            \r\n\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <label\r\n                                  className=\"form-control-label\"\r\n                                  htmlFor=\"input-last-name\"\r\n                                >\r\n                                  Valor\r\n                                </label>\r\n                                <InputGroup>\r\n                                  <InputGroupAddon addonType=\"prepend\">{paymentCreditCardMonetizTaxType === 'percentage' ? '%' : 'R$'}</InputGroupAddon>\r\n                                  <Input placeholder=\"Valor\" min={0} max={100} type=\"text\" step=\"1\" onChange={(e) => setPaymentCreditCardMonetizTaxValue(e.target.value)}/>\r\n                                </InputGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup className='d-flex flex-column'>\r\n                                <label\r\n                                  className=\"form-control-label\"\r\n                                  htmlFor=\"input-first-name\"\r\n                                >\r\n                                  Cartão de Crédito\r\n                                </label>\r\n\r\n                                <FormGroup>\r\n                                  <Label for=\"exampleSelect\">Número de parcelas limite</Label>\r\n                                  <Input type=\"select\" name=\"select\" id=\"exampleSelect\" onChange={(e) => setInstallmentsCreditCardSelected(e.target.value)}>\r\n                                    {\r\n                                      installments.map(item => (\r\n                                        <option key={item} value={item} selected>{item}</option>\r\n                                      ))\r\n                                    }\r\n                                  </Input>\r\n                                </FormGroup>\r\n\r\n                              </FormGroup>\r\n                            </Col>\r\n\r\n                          </Row>\r\n\r\n                        </CardBody>\r\n\r\n                      </Collapse>\r\n\r\n                    {\r\n                      taxCreditCardStatus && creditCards.map((creditCard, index) => (\r\n                        <>\r\n                          <Row>\r\n                            <Col lg='4' style={{margin:'5px 0'}}>\r\n                              <Button \r\n                                color = 'primary'\r\n                                className='mb-2'\r\n                                onClick={() => handleInstallmentsArea(index)}\r\n                                style={{width: '300px', display: 'flex', alignItems: 'center'}}\r\n                                \r\n                              >\r\n                                <img style={{width: '60px'}}src={creditCard.img}/>\r\n\r\n                                {creditCard.name}\r\n                              </Button>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                          <Collapse isOpen={installmentsCreditCardArea[index]}>\r\n          \r\n                              <Col lg='12' >\r\n                                {installmentsCreditCardFields.map((item, index) => (\r\n                                  <>\r\n                                  <Col className='d-flex align-items-center' style={{margin: 0}}>\r\n                                  <Col lg='6'>\r\n                                    <FormGroup>\r\n                                      <label\r\n                                        className=\"form-control-label\"\r\n                                        htmlFor=\"input-last-name\"\r\n                                      >\r\n                                      {`${item} Parcela (ADQUIRENTE)`}\r\n                                      </label>\r\n                                      <InputGroup>\r\n                                        <InputGroupAddon addonType=\"prepend\">%</InputGroupAddon>\r\n                                        <Input placeholder=\"Valor\" type=\"text\" placeholder='0,00' onChange={(e) => handleValueInputBuyer(e.target.value, creditCard.name, index)}/>\r\n                                      </InputGroup>\r\n                                    </FormGroup>\r\n                                  </Col>\r\n\r\n                                    <Col lg='6'>\r\n                                    <FormGroup>\r\n                                      <label\r\n                                        className=\"form-control-label\"\r\n                                        htmlFor=\"input-last-name\"\r\n                                      >\r\n                                      {`${item} Parcela (MONETIZ)`}\r\n                                      </label>\r\n                                      <InputGroup>\r\n                                        <InputGroupAddon addonType=\"prepend\">%</InputGroupAddon>\r\n                                        <Input placeholder=\"Valor\" type=\"text\" placeholder='0' onChange={(e) => handleValueInputMonetiz(e.target.value, creditCard.name ,index)}/>\r\n                                      </InputGroup>\r\n                                    </FormGroup>\r\n                                    </Col>\r\n                                  </Col>\r\n                                      <Row style={{marginTop: '-20px', display:'flex', justifyContent: 'center'}}>\r\n                                        <small style={{marginBottom: '20px'}}>{`Resumo: ${handleResumeInstallment(creditCard.name, index)}`}</small>\r\n                                      </Row>\r\n                                  </>\r\n                                ))} \r\n                    \r\n                            </Col>\r\n\r\n                            \r\n                          </Collapse>\r\n                        </>\r\n                      ))\r\n                    }\r\n\r\n<Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup className='d-flex flex-column'>\r\n                                <label\r\n                                  className=\"form-control-label\"\r\n                                  htmlFor=\"input-first-name\"\r\n                                >\r\n                                  Tipo de taxa de Antecipação do Cartão de Crédito (Adquirente)\r\n                                </label>\r\n                                <FormGroup className='d-flex flex-column'>\r\n                                  <Label onClick={() => setPaymentAnticipationBuyerTaxType('percentage')}>\r\n                                    <Input type='radio' name='paymentAnticipationBuyerTaxType' checked={ paymentAnticipationBuyerTaxType === 'percentage'}/>\r\n                                      Porcentagem (%)\r\n                                  </Label>\r\n\r\n                                  <Label onClick={() => setPaymentAnticipationBuyerTaxType('fixed')}>\r\n                                    <Input type='radio' name='paymentAnticipationBuyerTaxType' checked={ paymentAnticipationBuyerTaxType === 'fixed'}/>\r\n                                      Fixa (R$)\r\n                                  </Label>\r\n\r\n                                </FormGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n                            \r\n\r\n\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <label\r\n                                  className=\"form-control-label\"\r\n                                  htmlFor=\"input-last-name\"\r\n                                >\r\n                                  Valor\r\n                                </label>\r\n                                <InputGroup>\r\n                                  <InputGroupAddon addonType=\"prepend\">{paymentAnticipationBuyerTaxType === 'percentage' ? '%' : 'R$'}</InputGroupAddon>\r\n                                  <Input placeholder=\"Valor\" min={0} max={100} type=\"text\" step=\"1\" onChange={(e) => setPaymentAnticipationBuyerTaxValue(e.target.value)}/>\r\n                                </InputGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                          <Row>\r\n                            <Col lg=\"6\">\r\n                              <FormGroup className='d-flex flex-column'>\r\n                                <label\r\n                                  className=\"form-control-label\"\r\n                                  htmlFor=\"input-first-name\"\r\n                                >\r\n                                  Tipo de taxa de Antecipação do Cartão de Crédito (Monetiz)\r\n                                </label>\r\n                                <FormGroup className='d-flex flex-column'>\r\n                                  <Label onClick={() => setPaymentAnticipationMonetizTaxType('percentage')}>\r\n                                    <Input type='radio' name='paymentAnticipationMonetizTaxType' checked={ paymentAnticipationMonetizTaxType === 'percentage'}/>\r\n                                      Porcentagem (%)\r\n                                  </Label>\r\n\r\n                                  <Label onClick={() => setPaymentAnticipationMonetizTaxType('fixed')}>\r\n                                    <Input type='radio' name='paymentAnticipationMonetizTaxType' checked={ paymentAnticipationMonetizTaxType === 'fixed'}/>\r\n                                      Fixa (R$)\r\n                                  </Label>\r\n\r\n                                </FormGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n                            \r\n\r\n                            <Col lg=\"6\">\r\n                              <FormGroup>\r\n                                <label\r\n                                  className=\"form-control-label\"\r\n                                  htmlFor=\"input-last-name\"\r\n                                >\r\n                                  Valor\r\n                                </label>\r\n                                <InputGroup>\r\n                                  <InputGroupAddon addonType=\"prepend\">{paymentAnticipationMonetizTaxType === 'percentage' ? '%' : 'R$'}</InputGroupAddon>\r\n                                  <Input placeholder=\"Valor\" min={0} max={100} type=\"text\" step=\"1\" onChange={(e) => setPaymentAnticipationMonetizTaxValue(e.target.value)}/>\r\n                                </InputGroup>\r\n                              </FormGroup>\r\n                            </Col>\r\n                          </Row>\r\n\r\n                    \r\n                    </Card>\r\n                    \r\n                  </div>\r\n                  <Col className='d-flex justify-content-center'>\r\n                    <Button color=\"primary\" className='self-align-center' type='submit' form='form'>\r\n                      Confirmar\r\n                    </Button>\r\n                  </Col>\r\n\r\n                </Form>\r\n              </CardBody>\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default PlanMonetizPaySettings;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\plans\\PlanSettings.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\chargebacks\\ChargebackSettings.js",["216","217","218","219"],"\r\nimport React, { useState, useCallback, useEffect } from \"react\";\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  Container,\r\n  Row,\r\n  Col,\r\n\r\n} from \"reactstrap\";\r\n\r\nimport { format, parseISO } from 'date-fns';\r\nimport { formatPrice } from '../../utils/format';\r\n\r\nimport { useChargebacks } from '../../hooks/chargebacks';\r\n// core components\r\nimport UserHeader from \"components/Headers/Header\";\r\nimport api from \"services/api\";\r\n\r\nfunction ChargebackSettings(){\r\n\r\n  const {getSelectedChargeback  } = useChargebacks();\r\n\r\n\r\n  const [client, setClient] = useState({});\r\n  const [chargeback, setChargeback] = useState({});\r\n\r\n  const [plans, setPlans] = useState([]);\r\n  const [planSelected, setPlanSelected] = useState(null);\r\n  const chargeback_id = getSelectedChargeback();\r\n\r\n\r\n\r\n  useEffect(() => {\r\n    async function loadingData(){\r\n      const response = await api.get(`/chargebacks/show/${chargeback_id}`);\r\n\r\n\r\n    \r\n      setClient(response.data.user);\r\n      setChargeback(response.data);\r\n    }\r\n    loadingData();\r\n  },[chargeback_id])\r\n\r\n  const handleSubmit = useCallback((e) => {\r\n    e.preventDefault();\r\n\r\n    // const data = {\r\n    //   id:client.id,\r\n    //   name,\r\n    //   email,\r\n    //   cpf,\r\n    //   celular,\r\n    //   status,\r\n    //   plan_id: planSelected\r\n    // }\r\n    // updateUser(data)\r\n  },[])\r\n\r\n  return (\r\n    <>\r\n      <UserHeader />\r\n      {/* Page content */}\r\n      <Container className=\"mt--7\" fluid>\r\n        <Row>\r\n          <Col className=\"order-xl-1\" xl=\"12\">\r\n            <Card className=\"bg-secondary shadow\">\r\n              <CardHeader className=\"bg-white border-0\">\r\n                <Row className=\"align-items-center\">\r\n                  <Col xs=\"8\">\r\n                    <h3 className=\"mb-0\">Chargeback</h3>\r\n                  </Col>\r\n                </Row>\r\n              </CardHeader>\r\n              <CardBody>\r\n                {client && (\r\n                  <Form onSubmit={(e) => handleSubmit(e)} id=\"form\">\r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Informações do cliente\r\n                  </h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-username\"\r\n                          >\r\n                            Cliente\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-username\"\r\n                            value={client.name}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-email\"\r\n                          >\r\n                            E-mail\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-email\"\r\n                            value={client.email}\r\n                            type=\"email\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-first-name\"\r\n                          >\r\n                            CPF\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-first-name\"\r\n                            value={client.cpf}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-last-name\"\r\n                          >\r\n                            celular\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-last-name\"\r\n                            value={client.celular}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                  </div>\r\n\r\n                  <h6 className=\"heading-small text-muted mb-4\">\r\n                    Informações do Chargeback\r\n                  </h6>\r\n                  <div className=\"pl-lg-4\">\r\n                    <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-username\"\r\n                          >\r\n                            Valor\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-username\"\r\n                            value={formatPrice(chargeback.value)}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-email\"\r\n                          >\r\n                            Status\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-email\"\r\n                            value={chargeback.status ? \"Pago\" : \"Inadimplente\"}\r\n                            type=\"email\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    { chargeback && chargeback.createdAt && (\r\n                      <Row>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-first-name\"\r\n                          >\r\n                            Data requerido\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-first-name\"\r\n                            value={format(parseISO(chargeback.createdAt), 'dd/MM/yyyy')}\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                      <Col lg=\"6\">\r\n                        <FormGroup>\r\n                          <label\r\n                            className=\"form-control-label\"\r\n                            htmlFor=\"input-last-name\"\r\n                          >\r\n                            Data limite\r\n                          </label>\r\n                          <Input\r\n                            className=\"form-control-alternative\"\r\n                            id=\"input-last-name\"\r\n                            value={format(parseISO(chargeback.due_date), 'dd/MM/yyyy')}\r\n                            type=\"text\"\r\n                            disabled\r\n                          />\r\n                        </FormGroup>\r\n                      </Col>\r\n                    </Row>\r\n                    )}\r\n                  </div>\r\n\r\n                \r\n                </Form>\r\n                )}\r\n\r\n              <Col className='d-flex justify-content-center'>\r\n                    {\r\n                      client.status \r\n                      ? (                    \r\n                        <Button color=\"warning\" outline className='self-align-center' type='submit' form='form'>\r\n                          Bloquear Conta\r\n                        </Button>\r\n                      )\r\n                      : (                    \r\n                        <Button color=\"success\" outline className='self-align-center' type='submit' form='form'>\r\n                          Desbloquear Conta\r\n                        </Button>\r\n                      )\r\n                    }\r\n              </Col>\r\n              </CardBody>\r\n\r\n            </Card>\r\n          </Col>\r\n        </Row>\r\n      </Container>\r\n    </>\r\n  );\r\n}\r\nexport default ChargebackSettings;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\chargebacks\\Chargebacks.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\GroupsCreate.js",["220","221","222","223"],"import React, { useEffect, useState } from 'react'\r\nimport Header from \"components/Headers/Header.js\";\r\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, CustomInput, Form, FormGroup, Input, Label, Row, Table } from 'reactstrap';\r\nimport api from 'services/api';\r\nimport { useHistory } from 'react-router-dom';\r\nfunction GroupsCreate() {\r\n    const [resources, setResources] = useState([])\r\n    const [select, setSelect] = useState([])\r\n    const [allChecked, setAllChecked] = useState(false)\r\n    const [group, setGroup] = useState(\"\")\r\n    const history = useHistory()\r\n\r\n    useEffect(() => {\r\n        let fetchResources = async () => {\r\n            api.get(\"/admin/resource\")\r\n                .then(result => {\r\n                    let data = result.data\r\n                    data.map(item => {\r\n                        setSelect(oldArray => [...oldArray, { id: item.id, isChecked: false }])\r\n                    })\r\n                    setResources(result.data)\r\n                })\r\n        }\r\n        fetchResources()\r\n\r\n    }, [])\r\n    \r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n       let data = {group:group, resources:select}\r\n       api.post(\"/admin/groups\",data)\r\n       .then(data=>{\r\n           console.log(data.data.id);\r\n           history.push(`user-group-update/${data.data.id}`)\r\n       })\r\n    }\r\n\r\n    const handleAllChecked = (event) => {\r\n        let allChecked = false\r\n        let array = select.map(item => {\r\n            return { ...item, isChecked: event.target.checked }\r\n        })\r\n        setAllChecked(event.target.checked)\r\n        setSelect(select => array)\r\n    }\r\n\r\n    const handleCheckChieldElement = (event) => {\r\n\r\n        let array = select.map(item => {\r\n            if (item.id === parseInt(event.target.value)) {\r\n                console.log(`item: ${item.id}`);\r\n                return { ...item, isChecked: event.target.checked }\r\n            }\r\n\r\n            return item\r\n        })\r\n        let slt = array.filter(obj => { return obj.isChecked === true })\r\n        if (slt.length === select.length) {\r\n            setAllChecked(true)\r\n        } else {\r\n            setAllChecked(false)\r\n        }\r\n        setSelect(array)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            {/* Page content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xs=\"12\" md=\"9\">\r\n                                        <Card className=\"border-0\">\r\n                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                <h3 className=\"mb-0\">Grupos</h3>\r\n                                            </CardHeader>\r\n                                            <CardBody>\r\n                                                <Row>\r\n                                                    <Col sm=\"4\">\r\n                                                        <h2>Grupos</h2>\r\n                                                        <p>\r\n                                                            Crie grupos de trabalho e gerencie as permissões de acesso de cada grupo.\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                    <Col sm=\"8\">\r\n                                                        <Card className=\"shadow\">\r\n                                                            <Form onSubmit={handleSubmit}>\r\n                                                                <CardBody>\r\n\r\n                                                                    <FormGroup className=\"border-bottom-1\">\r\n                                                                        <Label>Nome<span className=\"text-red\">*</span></Label>\r\n                                                                        <Input name=\"name\" id=\"name\" type=\"text\" required={true}  onChange={e=>setGroup(e.target.value)}/>\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <div className=\"custom-control custom-checkbox mb-3\">\r\n                                                                        <input\r\n                                                                            className=\"custom-control-input\"\r\n                                                                            id=\"checkAll\"\r\n                                                                            name=\"checkAll\"\r\n                                                                            type=\"checkbox\"\r\n                                                                            checked={allChecked}\r\n                                                                            onChange={handleAllChecked}\r\n                                                                        />\r\n                                                                        <label className=\"custom-control-label\" htmlFor=\"checkAll\">\r\n                                                                            Este grupo terá permissão total\r\n                                                                        </label>\r\n                                                                    </div>\r\n\r\n                                                                    <ul style={{ listStyleType: \"none\" }}>\r\n                                                                        {resources?.map(item => {\r\n                                                                            let slt = select.filter(obj => { return obj.id === item.id })\r\n                                                                            let checked = slt[0].isChecked ? \"checked\" : \"\"\r\n                                                                            return (\r\n                                                                                <li key={item.id}>\r\n                                                                                    <div className=\"custom-control custom-checkbox mb-3\">\r\n                                                                                        <input\r\n                                                                                            className=\"custom-control-input\"\r\n                                                                                            id={item.alias}\r\n                                                                                            name={item.name}\r\n                                                                                            type=\"checkbox\"\r\n                                                                                            checked={checked}\r\n                                                                                            onChange={handleCheckChieldElement}\r\n                                                                                            label={item.name}\r\n                                                                                            value={item.id}\r\n                                                                                        />\r\n                                                                                        <label className=\"custom-control-label\" htmlFor={item.alias}>\r\n                                                                                            {item.name}\r\n                                                                                        </label>\r\n                                                                                    </div>\r\n                                                                                </li>\r\n                                                                            )\r\n                                                                        })}\r\n                                                                    </ul>\r\n\r\n                                                                </CardBody>\r\n                                                                <CardFooter>\r\n                                                                <Button  type=\"reset\">Cancelar</Button>\r\n                                                                    <Button color=\"primary\" type=\"submit\">Salvar</Button>\r\n                                                                </CardFooter>\r\n                                                            </Form>\r\n\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </CardBody>\r\n\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default GroupsCreate","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Users.js",["224","225","226","227","228","229"],"import React, { useEffect, useState } from 'react'\r\nimport Header from \"components/Headers/Header.js\";\r\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, Row, Table } from 'reactstrap';\r\nimport BootstrapTable from 'react-bootstrap-table-next';\r\nimport { Link } from 'react-router-dom';\r\nimport api from 'services/api';\r\n\r\nfunction Users() {\r\n    const [selectGroup, setSelectGroup] = useState([])\r\n    const [deleteGroup, setDeleteGroup] = useState(false)\r\n    const [groups, setGroups] = useState([])\r\n    const [delectedGroup, setDeletedG] = useState(false)\r\n\r\n    const [selectUser, setSelectUser] = useState([])\r\n    const [deleteUser, setDeleteUser] = useState(false)\r\n    const [users, setUsers] = useState([])\r\n\r\n    useEffect(() => {\r\n        if (selectGroup.length > 0) {\r\n            setDeleteGroup(true)\r\n        } else {\r\n            setDeleteGroup(false)\r\n        }\r\n    }, [selectGroup])\r\n    useEffect(() => {\r\n        let fetchGroups = async () => {\r\n            await api.get(\"/admin/groups\")\r\n                .then(result => {\r\n                    let data = result.data\r\n                    setGroups(data)\r\n                })\r\n        }\r\n        let fetchUsers = async () => {\r\n            await api.get(\"/admin/users\")\r\n                .then(result => {\r\n                    let data = result.data\r\n                    setUsers(result.data)\r\n                })\r\n        }\r\n        fetchGroups()\r\n        fetchUsers()\r\n\r\n    }, [delectedGroup])\r\n    const buttonEditGroup = (cell, row) => {\r\n        return (\r\n            <Link to={`user-group-update/${cell}`} className=\"btn btn-sm btn-primary\" color=\"primary\" >Editar</Link>\r\n        )\r\n    }\r\n    const columnsGroups = [\r\n        {\r\n            dataField: 'name',\r\n            text: 'Nome'\r\n        },\r\n        {\r\n            dataField: 'id',\r\n            text: '',\r\n            formatter: buttonEditGroup\r\n        }];\r\n    const columnsUsers = [\r\n        {\r\n            dataField: 'id',\r\n            text: 'Id',\r\n            hidden: true\r\n        },\r\n        {\r\n            dataField: 'name',\r\n            text: 'Nome'\r\n        },\r\n        {\r\n            dataField: 'group',\r\n            text: 'Grupo'\r\n        },\r\n        {\r\n            dataField: 'action',\r\n            text: ''\r\n        }];\r\n\r\n    const selectRowGroups = {\r\n        mode: 'checkbox',\r\n        clickToSelect: true,\r\n        bgColor: '#fefce7',\r\n        onSelect: (row, isSelect, rowIndex, e) => {\r\n            if (isSelect) {\r\n                setSelectGroup(old => [...old, row.id])\r\n            } else {\r\n                setSelectGroup(selectGroup.filter(item => item !== row.id))\r\n            }\r\n        },\r\n        onSelectAll: (isSelect, rows, e) => {\r\n            if (isSelect) {\r\n                rows.map(row => {\r\n                    setSelectGroup(old => [...old, row.id])\r\n                })\r\n            } else {\r\n                setSelectGroup([])\r\n            }\r\n        },\r\n    };\r\n    const selectRowUsers = {\r\n        mode: 'checkbox',\r\n        clickToSelect: true,\r\n        bgColor: '#fefce7',\r\n        onSelect: (row, isSelect, rowIndex, e) => {\r\n            if (isSelect) {\r\n                setSelectUser(old => [...old, row.id])\r\n            } else {\r\n                setSelectUser(selectUser.filter(item => item !== row.id))\r\n            }\r\n        },\r\n        onSelectAll: (isSelect, rows, e) => {\r\n            if (isSelect) {\r\n                rows.map(row => {\r\n                    setSelectUser(old => [...old, row.id])\r\n                })\r\n            } else {\r\n                setSelectUser([])\r\n            }\r\n        },\r\n    };\r\n\r\n    const onDeleteGroups = (e) => {\r\n        e.preventDefault()\r\n        api.delete('/admin/group', { data: selectGroup })\r\n            .then((result) => {\r\n                let data = result.data\r\n                setDeletedG(false)\r\n                setSelectGroup(old=>[])\r\n                setDeleteGroup(false)\r\n\r\n            }).catch((err) => {\r\n                \r\n\r\n            });\r\n    }\r\n\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            {/* Page content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xs=\"12\" md=\"9\">\r\n                                        <Card className=\"border-0\">\r\n                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                <h3 className=\"mb-0\">Usuários</h3>\r\n                                            </CardHeader>\r\n                                            <CardBody>\r\n                                                <Row>\r\n                                                    <Col sm=\"4\">\r\n                                                        <h2>Grupos</h2>\r\n                                                        <p>\r\n                                                            Crie grupos de trabalho e gerencie as permissões de acesso de cada grupo.\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                    <Col sm=\"8\">\r\n                                                        <Card className=\"shadow\">\r\n                                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                                <p>Você tem {groups.length} grupos</p>\r\n                                                                <Link to=\"user-group\" className=\"btn btn-primary btn-sm\">+Novo grupo</Link>\r\n                                                            </CardHeader>\r\n                                                            <CardBody>\r\n                                                                <BootstrapTable\r\n                                                                    keyField='id'\r\n                                                                    data={[...groups]}\r\n                                                                    columns={columnsGroups}\r\n                                                                    selectRow={selectRowGroups}\r\n                                                                    bootstrap4={true}\r\n                                                                    bordered={false}\r\n                                                                />\r\n                                                            </CardBody>\r\n                                                            <CardFooter>\r\n                                                                <div><Button color=\"danger\" size=\"sm\" disabled={!deleteGroup} onClick={e=>onDeleteGroups(e)}> Excluir Selecionados</Button></div>\r\n                                                            </CardFooter>\r\n                                                        </Card>\r\n                                                        <Card className=\"shadow mt-3\">\r\n                                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                                <p>Você tem {users.length} usuários</p>\r\n                                                                <Link to=\"user-create\" className=\"btn btn-primary btn-sm\">+Novo Usuário</Link>\r\n                                                            </CardHeader>\r\n                                                            <CardBody>\r\n                                                                <BootstrapTable\r\n                                                                    keyField='id'\r\n                                                                    data={users}\r\n                                                                    columns={columnsUsers}\r\n                                                                    selectRow={selectRowUsers}\r\n                                                                    bootstrap4={true}\r\n                                                                    bordered={false}\r\n                                                                />\r\n                                                            </CardBody>\r\n                                                            <CardFooter>\r\n                                                                <div><Button color=\"danger\" size=\"sm\" disabled={!deleteUser} > Excluir Selecionados</Button></div>\r\n                                                            </CardFooter>\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </CardBody>\r\n\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default Users","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\GroupsUpdate.js",["230","231","232","233","234"],"import React, { useEffect, useState } from 'react'\r\nimport Header from \"components/Headers/Header\";\r\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, CustomInput, Form, FormGroup, Input, Label, Row, Table } from 'reactstrap';\r\nimport api from 'services/api';\r\nimport { useParams } from 'react-router-dom';\r\n\r\n\r\nfunction GroupsUpdate() {\r\n    const [resources, setResources] = useState([])\r\n    const [select, setSelect] = useState([])\r\n    const [allChecked, setAllChecked] = useState(false)\r\n    const [group, setGroup] = useState(\"\")\r\n    const {id} = useParams()\r\n\r\n    useEffect(() => {\r\n        let groupResources = [] \r\n        let fetchGroup = async () => {\r\n            await api.get(`/admin/group?id=${id}`).then(e=>{\r\n                let data = e.data\r\n                groupResources = data.resources\r\n                setGroup(data.name)\r\n            })\r\n        }\r\n        fetchGroup()        \r\n        let fetchResources = async () => {\r\n            await api.get(\"/admin/resource\")\r\n                .then(result => {\r\n                    let data = result.data                    \r\n                    data.map(item => {\r\n                        let filter = groupResources.filter(obj => {                          \r\n                           return  obj.id === item.id\r\n                        })\r\n                        let checked = filter.length > 0\r\n                        setSelect(oldArray => [...oldArray, { id: item.id, isChecked: checked }])\r\n                    })\r\n                    setResources(result.data)\r\n                })\r\n        }\r\n        fetchResources()\r\n    }, [])\r\n    \r\n    const handleSubmit = (e)=>{\r\n        e.preventDefault()\r\n       let data = {group:group, resources:select}\r\n       api.post(`/admin/group?id=${id}`,data)\r\n       .then(data=>{\r\n           console.log(data.data);\r\n       })\r\n    }\r\n\r\n    const handleAllChecked = (event) => {\r\n        let allChecked = false\r\n        let array = select.map(item => {\r\n            return { ...item, isChecked: event.target.checked }\r\n        })\r\n        setAllChecked(event.target.checked)\r\n        setSelect(select => array)\r\n    }\r\n\r\n    const handleCheckChieldElement = (event) => {\r\n\r\n        let array = select.map(item => {\r\n            if (item.id === parseInt(event.target.value)) {\r\n                console.log(`item: ${item.id}`);\r\n                return { ...item, isChecked: event.target.checked }\r\n            }\r\n\r\n            return item\r\n        })\r\n        let slt = array.filter(obj => { return obj.isChecked === true })\r\n        if (slt.length === select.length) {\r\n            setAllChecked(true)\r\n        } else {\r\n            setAllChecked(false)\r\n        }\r\n        setSelect(array)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Header />\r\n            {/* Page content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xs=\"12\" md=\"9\">\r\n                                        <Card className=\"border-0\">\r\n                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                <h3 className=\"mb-0\">Grupos</h3>\r\n                                            </CardHeader>\r\n                                            <CardBody>\r\n                                                <Row>\r\n                                                    <Col sm=\"4\">\r\n                                                        <h2>Grupos</h2>\r\n                                                        <p>\r\n                                                            Crie grupos de trabalho e gerencie as permissões de acesso de cada grupo.\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                    <Col sm=\"8\">\r\n                                                        <Card className=\"shadow\">\r\n                                                            <Form onSubmit={handleSubmit}>\r\n                                                                <CardBody>\r\n\r\n                                                                    <FormGroup className=\"border-bottom-1\">\r\n                                                                        <Label>Nome<span className=\"text-red\">*</span></Label>\r\n                                                                        <Input name=\"name\" id=\"name\" type=\"text\" defaultValue={group} required={true}  onChange={e=>setGroup(e.target.value)}/>\r\n                                                                    </FormGroup>\r\n\r\n                                                                    <div className=\"custom-control custom-checkbox mb-3\">\r\n                                                                        <input\r\n                                                                            className=\"custom-control-input\"\r\n                                                                            id=\"checkAll\"\r\n                                                                            name=\"checkAll\"\r\n                                                                            type=\"checkbox\"\r\n                                                                            checked={allChecked}\r\n                                                                            onChange={handleAllChecked}\r\n                                                                        />\r\n                                                                        <label className=\"custom-control-label\" htmlFor=\"checkAll\">\r\n                                                                            Este grupo terá permissão total\r\n                                                                        </label>\r\n                                                                    </div>\r\n\r\n                                                                    <ul style={{ listStyleType: \"none\" }}>\r\n                                                                        {resources?.map(item => {\r\n                                                                            let slt = select.filter(obj => { return obj.id === item.id })\r\n                                                                            let checked = slt[0].isChecked ? \"checked\" : \"\"\r\n                                                                            return (\r\n                                                                                <li key={item.id}>\r\n                                                                                    <div className=\"custom-control custom-checkbox mb-3\">\r\n                                                                                        <input\r\n                                                                                            className=\"custom-control-input\"\r\n                                                                                            id={item.alias}\r\n                                                                                            name={item.name}\r\n                                                                                            type=\"checkbox\"\r\n                                                                                            checked={checked}\r\n                                                                                            onChange={handleCheckChieldElement}\r\n                                                                                            label={item.name}\r\n                                                                                            value={item.id}\r\n                                                                                        />\r\n                                                                                        <label className=\"custom-control-label\" htmlFor={item.alias}>\r\n                                                                                            {item.name}\r\n                                                                                        </label>\r\n                                                                                    </div>\r\n                                                                                </li>\r\n                                                                            )\r\n                                                                        })}\r\n                                                                    </ul>\r\n\r\n                                                                </CardBody>\r\n                                                                <CardFooter>\r\n                                                                <Button  type=\"reset\">Cancelar</Button>\r\n                                                                    <Button color=\"primary\" type=\"submit\">Salvar</Button>\r\n                                                                </CardFooter>\r\n                                                            </Form>\r\n\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </CardBody>\r\n\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default GroupsUpdate","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\UserCreate.js",["235","236","237","238","239","240"],"import React, { useEffect, useState } from 'react'\r\nimport Header from \"components/Headers/Header.js\";\r\nimport { Button, Card, CardBody, CardFooter, CardHeader, Col, Container, CustomInput, Form, FormFeedback, FormGroup, Input, Label, Row, Table } from 'reactstrap';\r\nimport api from 'services/api';\r\nimport {useForm} from \"react-hook-form\"\r\nimport { useHistory } from 'react-router-dom'\r\n\r\n\r\nconst UserCreate = () => {\r\n    const history = useHistory();\r\n    const { register, handleSubmit, watch, errors } = useForm();\r\n    const [groups, setGroups] = useState()\r\n    useEffect(() => {\r\n        let fetchGroups = async () => {\r\n            await api.get(\"/admin/groups\")\r\n                .then(result => {\r\n                    let data = result.data\r\n                    setGroups(data)\r\n                })\r\n        }\r\n        fetchGroups()\r\n    }, [])\r\n\r\n    const onSubmit = async data => {\r\n        await api.post(\"/admin/user\",data)\r\n        .then((result) => {\r\n            console.log(result);\r\n            \r\n        }).catch((err) => {\r\n            console.log(err);\r\n        });\r\n    }\r\n    return (\r\n        <>\r\n            <Header />\r\n            {/* Page content */}\r\n            <Container className=\"mt--7\" fluid>\r\n                <Row>\r\n                    <Col>\r\n                        <Card className=\"shadow\">\r\n                            <CardBody>\r\n                                <Row className=\"justify-content-center\">\r\n                                    <Col xs=\"12\" md=\"9\">\r\n                                        <Card className=\"border-0\">\r\n                                            <CardHeader className=\"border-0 d-flex align-items-center justify-content-between\" >\r\n                                                <h3 className=\"mb-0\">Usuários</h3>\r\n                                            </CardHeader>\r\n                                            <CardBody>\r\n                                                <Row>\r\n                                                    <Col sm=\"4\">\r\n                                                        <h2>Grupos</h2>\r\n                                                        <p>\r\n                                                            Gerencie os usuários ativos\r\n                                                            e vincule-os em grupos de\r\n                                                            trabalho.\r\n                                                        </p>\r\n                                                    </Col>\r\n                                                    <Col sm=\"8\">\r\n                                                        <Card className=\"shadow\">\r\n                                                            <Form onSubmit={handleSubmit(onSubmit)}>\r\n                                                                <CardBody>                                                                \r\n                                                                    <FormGroup>\r\n                                                                        <Label>Email<span className=\"text-red\">*</span></Label>\r\n                                                                        <Input type=\"email\" name=\"email\" innerRef={register({ required: true })} />                                                                        \r\n                                                                    </FormGroup>\r\n                                                                    <FormGroup>\r\n                                                                        <Label>Grupo<span className=\"text-red\">*</span></Label>\r\n                                                                        <Input type=\"select\" name=\"groupid\" innerRef={register({ required: true })} >\r\n                                                                            {groups?.map(group => {\r\n                                                                                return(<option key={group.id} value={group.id}>{group.name}</option>)\r\n                                                                            })}\r\n                                                                        </Input>                                                                        \r\n                                                                    </FormGroup>\r\n                                                                </CardBody>\r\n                                                                <CardFooter>\r\n                                                                    <Button color=\"primary\" type=\"submit\">Salvar</Button>\r\n                                                                </CardFooter>\r\n                                                            </Form>\r\n                                                        </Card>\r\n                                                    </Col>\r\n                                                </Row>\r\n                                            </CardBody>\r\n                                        </Card>\r\n                                    </Col>\r\n                                </Row>\r\n                            </CardBody>\r\n                        </Card>\r\n                    </Col>\r\n                </Row>\r\n            </Container>\r\n        </>\r\n    )\r\n}\r\nexport default UserCreate","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Login.js",["241"],"import React from \"react\";\r\nimport logo from \"assets/img/brand/logo.svg\"\r\nimport { useForm } from \"react-hook-form\"\r\n\r\nimport { useAuth } from \"hooks/auth\"\r\n\r\n\r\n\r\n// reactstrap components\r\nimport {\r\n  Button,\r\n  Card,\r\n  CardHeader,\r\n  CardBody,\r\n  FormGroup,\r\n  Form,\r\n  Input,\r\n  InputGroupAddon,\r\n  InputGroupText,\r\n  InputGroup,\r\n  Row,\r\n  Col\r\n} from \"reactstrap\";\r\n\r\nconst Login = () => {\r\n  const { register, handleSubmit, errors } = useForm();\r\n  const auth = useAuth()\r\n\r\n  const onSubmit = async(data) => {\r\n    auth.signIn(data)\r\n  }\r\n\r\n  return (\r\n    <>\r\n      <Col lg=\"5\" md=\"7\">\r\n        <Card className=\"bg-secondary shadow border-0\">\r\n          <CardHeader className=\"bg-transparent pb-5\">\r\n            <div className=\"text-muted text-center mt-2 mb-3\">\r\n              <small>Login</small>\r\n            </div>\r\n            <div className=\"btn-wrapper text-center\">\r\n              <img className=\"logo\" style={{ maxWidth: \"200px\" }} src={logo} alt=\"Monetiz Pay\" />\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody className=\"px-lg-5 py-lg-5\">\r\n            <div className=\"text-center text-muted mb-4\">\r\n              <small>Digite seu Email e Senha</small>\r\n            </div>\r\n            <Form role=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n              <FormGroup className=\"mb-3\">\r\n                <InputGroup className=\"input-group-alternative\">\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <InputGroupText>\r\n                      <i className=\"ni ni-email-83\" />\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input placeholder=\"Email\" type=\"email\" name=\"email\" innerRef={register} />\r\n                </InputGroup>\r\n              </FormGroup>\r\n              <FormGroup>\r\n                <InputGroup className=\"input-group-alternative\">\r\n                  <InputGroupAddon addonType=\"prepend\">\r\n                    <InputGroupText>\r\n                      <i className=\"ni ni-lock-circle-open\" />\r\n                    </InputGroupText>\r\n                  </InputGroupAddon>\r\n                  <Input placeholder=\"Password\" type=\"password\" name=\"password\" innerRef={register} />\r\n                </InputGroup>\r\n              </FormGroup>\r\n              <div className=\"text-center\">\r\n                <Button className=\"my-4\" color=\"primary\" type=\"submit\">\r\n                  Login\r\n                  </Button>\r\n              </div>\r\n            </Form>\r\n          </CardBody>\r\n        </Card>\r\n        <Row className=\"mt-3\">\r\n          <Col xs=\"6\">\r\n            <a\r\n              className=\"text-light\"\r\n              href=\"/auth/reset-password\"\r\n            >\r\n              <small>Esqueceu a Senha?</small>\r\n            </a>\r\n          </Col>\r\n\r\n        </Row>\r\n      </Col>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Login;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\ResetPassword.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\Register.js",["242"],"/*!\r\n\r\n=========================================================\r\n* Argon Dashboard React - v1.1.0\r\n=========================================================\r\n\r\n* Product Page: https://www.creative-tim.com/product/argon-dashboard-react\r\n* Copyright 2019 Creative Tim (https://www.creative-tim.com)\r\n* Licensed under MIT (https://github.com/creativetimofficial/argon-dashboard-react/blob/master/LICENSE.md)\r\n\r\n* Coded by Creative Tim\r\n\r\n=========================================================\r\n\r\n* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.\r\n\r\n*/\r\nimport React, { useEffect, useState } from \"react\";\r\nimport { useLocation, useHistory } from \"react-router-dom\";\r\nimport api from 'services/api';\r\nimport { useForm } from \"react-hook-form\"\r\nimport { cpf } from \"cpf-cnpj-validator\"\r\nimport { yupResolver } from '@hookform/resolvers/yup';\r\nimport * as Yup from \"yup\";\r\n\r\n// reactstrap components\r\nimport { Button, Card, CardHeader, CardBody, FormGroup, Form, Input, InputGroupAddon, InputGroupText, InputGroup, Row, Col, FormFeedback } from \"reactstrap\";\r\n\r\nimport logo from \"assets/img/brand/logo.svg\"\r\nfunction useQuery() {\r\n  return new URLSearchParams(useLocation().search);\r\n}\r\nconst schema = Yup.object().shape({\r\n  name: Yup.string().required(\"Nome é um campo obrigatório.\").min(8),\r\n  cpf: Yup.string().test('Valida CPF', 'CPF Inválido', value => cpf.isValid(value)),\r\n  mobile: Yup.string().min(11).required(\"Telefone é um campo obrigatório.\"),\r\n  password: Yup.string().min(8).required('Password é um campo obrigatório'),\r\n  confirmPassword: Yup.string()\r\n    .oneOf([Yup.ref('password'), null], 'Passwords must match')\r\n});\r\nconst Register = () => {\r\n  const { register, handleSubmit, errors } = useForm({ resolver: yupResolver(schema) });\r\n  const history = useHistory()\r\n  const query = useQuery();\r\n  const invitationToken = query.get(\"invitation_token\");\r\n  const [isValid, setIsValid] = useState();\r\n  const [decodeToken, setDecodeToken] = useState()\r\n\r\n  useEffect(() => {\r\n    let validateToken = async () => {\r\n      api.defaults.headers.authorization = `Bearer ${invitationToken}`;\r\n      await api.post(\"/session/validate-invitation\", { token: invitationToken })\r\n        .then(result => {\r\n          let data = result.data\r\n          setIsValid(data.validate)\r\n          setDecodeToken(data.decoded)\r\n        })\r\n        .catch(err => console.log(err))\r\n    }\r\n    validateToken()\r\n  }, [invitationToken])\r\n\r\n  const onSubmit = async (data) => {\r\n    api.defaults.headers.authorization = `Bearer ${invitationToken}`;\r\n    await api.post(\"/session/register\", data)\r\n      .then(result => {\r\n        history.push('/auth/login')\r\n      })\r\n      .catch(err => console.log(err))\r\n\r\n  }\r\n\r\n\r\n  return (\r\n    <>\r\n      <Col lg=\"6\" md=\"8\">\r\n        <Card className=\"bg-secondary shadow border-0\">\r\n          <CardHeader className=\"bg-transparent pb-3\">\r\n            <div className=\"text-center\">\r\n              <img className=\"logo\" style={{ maxWidth: \"200px\" }} src={logo} alt=\"Monetiz Pay\" />\r\n            </div>\r\n          </CardHeader>\r\n          <CardBody className=\"px-lg-5 py-lg-5\">\r\n            <div className=\"text-center text-muted mb-4\">\r\n              <h2>Criar Conta</h2>\r\n            </div>\r\n            {isValid &&\r\n              <Form role=\"form\" onSubmit={handleSubmit(onSubmit)}>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-email-83\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Email\" type=\"email\" autoComplete=\"new-email\" innerRef={register} defaultValue={decodeToken?.email} disabled={true} name=\"email\" />\r\n                  </InputGroup>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-hat-3\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Nome\" type=\"text\" name=\"name\" innerRef={register} invalid={errors.name ? true : false} />\r\n                    <FormFeedback invalid=\"\" className=\"pl-2\">{errors.name?.message}</FormFeedback>\r\n                  </InputGroup>\r\n\r\n                </FormGroup>\r\n\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-paper-diploma\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"CPF\" type=\"text\" name=\"cpf\" innerRef={register} invalid={errors.cpf ? true : false} />\r\n                    <FormFeedback invalid=\"\">{errors.cpf?.message}</FormFeedback>\r\n                  </InputGroup>\r\n\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative mb-3\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"fas fa-mobile\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Celular\" type=\"text\" name=\"mobile\" innerRef={register} invalid={errors.mobile ? true : false} />\r\n                    <FormFeedback invalid=\"\">{errors.mobile?.message}</FormFeedback>\r\n                  </InputGroup>\r\n\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-lock-circle-open\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Senha\" type=\"password\" name=\"password\" innerRef={register} invalid={errors.password ? true : false} />\r\n                    <FormFeedback invalid=\"\">{errors.password?.message}</FormFeedback>\r\n                  </InputGroup>\r\n                </FormGroup>\r\n                <FormGroup>\r\n                  <InputGroup className=\"input-group-alternative\">\r\n                    <InputGroupAddon addonType=\"prepend\">\r\n                      <InputGroupText>\r\n                        <i className=\"ni ni-lock-circle-open\" />\r\n                      </InputGroupText>\r\n                    </InputGroupAddon>\r\n                    <Input placeholder=\"Repetir Senha\" type=\"password\" name=\"confirmPassword\" invalid={errors.confirmPassword ? true : false} innerRef={register} />\r\n                    <FormFeedback invalid=\"\">{errors.confirmPassword?.message}</FormFeedback>\r\n                  </InputGroup>\r\n\r\n                </FormGroup>\r\n\r\n                <div className=\"text-center\">\r\n                  <Button className=\"mt-4\" color=\"primary\" type=\"submit\">\r\n                    Criar Conta\r\n                  </Button>\r\n                </div>\r\n              </Form>\r\n            }\r\n          </CardBody>\r\n        </Card>\r\n      </Col>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Register;\r\n","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\views\\users\\RePassword.js",["243"],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\format.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\FormateUtils.js",["244","245","246"],"import React from 'react'\r\nimport { func } from 'prop-types';\r\nexport function formatCPF(cpf) {\r\n    cpf = cpf.replace(/[^\\d]/g, \"\");\r\n    return cpf.replace(/(\\d{3})(\\d{3})(\\d{3})(\\d{2})/, \"$1.$2.$3-$4\");\r\n}\r\n\r\nexport function formatPhone(v) {\r\n    v = v.replace(/\\D/g, \"\");             //Remove tudo o que não é dígito\r\n    v = v.replace(/^(\\d{2})(\\d)/g, \"($1) $2\"); //Coloca parênteses em volta dos dois primeiros dígitos\r\n    v = v.replace(/(\\d)(\\d{4})$/, \"$1-$2\");    //Coloca hífen entre o quarto e o quinto dígitos\r\n    return v;\r\n}\r\n\r\nexport function formatarCEP(str) {\r\n    var re = /^([\\d]{2})\\.*([\\d]{3})-*([\\d]{3})/;\r\n\r\n    if (re.test(str)) {\r\n        return str.replace(re, \"$1.$2-$3\");\r\n    } else {\r\n        alert(\"CEP inválido!\");\r\n    }\r\n\r\n    return \"\";\r\n}\r\nexport function formatCurrency(value) {\r\n    let formatter = new Intl.NumberFormat('pt-BR', {\r\n        style: 'currency',\r\n        currency: 'BRL'\r\n    });\r\n\r\n    let formatted = formatter.format(value);\r\n    return formatted\r\n}\r\nexport function formatPercentage(value) {\r\n    let v = value / 100\r\n    v = v.toLocaleString('pt-BR', {\r\n        style: 'percent',\r\n        minimumFractionDigits: 2,\r\n        maximumFractionDigits: 2\r\n    })\r\n    \r\n    return v\r\n}\r\n\r\n\r\nexport function formatDate(date) {\r\n    let ds = new Date(date)\r\n    let options = { year: 'numeric', month: '2-digit', day: '2-digit', hour: \"2-digit\", minute: \"2-digit\" };\r\n    let dtFmt = ds.toLocaleString(\"pt-BR\", options)\r\n    return dtFmt\r\n}\r\n\r\nfunction formatReal(int) {\r\n    var tmp = int + '';\r\n    tmp = tmp.replace(/([0-9]{2})$/g, \",$1\");\r\n    if (tmp.length > 6)\r\n        tmp = tmp.replace(/([0-9]{3}),([0-9]{2}$)/g, \".$1,$2\");\r\n\r\n    return tmp;\r\n}","C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Headers\\Header.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\hooks\\Alert.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\variables\\charts.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\components\\Plans\\EditTable.js",[],"C:\\wamp64\\www\\Monetiz\\Dashboard\\src\\utils\\masks.js",[],{"ruleId":"247","replacedBy":"248"},{"ruleId":"249","replacedBy":"250"},{"ruleId":"251","severity":1,"message":"252","line":21,"column":26,"nodeType":"253","messageId":"254","endLine":21,"endColumn":29},{"ruleId":"251","severity":1,"message":"255","line":24,"column":8,"nodeType":"253","messageId":"254","endLine":24,"endColumn":18},{"ruleId":"251","severity":1,"message":"256","line":25,"column":8,"nodeType":"253","messageId":"254","endLine":25,"endColumn":18},{"ruleId":"251","severity":1,"message":"257","line":46,"column":13,"nodeType":"253","messageId":"254","endLine":46,"endColumn":21},{"ruleId":"251","severity":1,"message":"258","line":2,"column":8,"nodeType":"253","messageId":"254","endLine":2,"endColumn":11},{"ruleId":"251","severity":1,"message":"259","line":1,"column":57,"nodeType":"253","messageId":"254","endLine":1,"endColumn":65},{"ruleId":"251","severity":1,"message":"260","line":10,"column":9,"nodeType":"253","messageId":"254","endLine":10,"endColumn":13},{"ruleId":"261","severity":1,"message":"262","line":54,"column":35,"nodeType":"263","messageId":"264","endLine":54,"endColumn":37},{"ruleId":"251","severity":1,"message":"265","line":11,"column":3,"nodeType":"253","messageId":"254","endLine":11,"endColumn":9},{"ruleId":"251","severity":1,"message":"266","line":18,"column":3,"nodeType":"253","messageId":"254","endLine":18,"endColumn":11},{"ruleId":"251","severity":1,"message":"267","line":19,"column":3,"nodeType":"253","messageId":"254","endLine":19,"endColumn":8},{"ruleId":"251","severity":1,"message":"268","line":2,"column":27,"nodeType":"253","messageId":"254","endLine":2,"endColumn":38},{"ruleId":"251","severity":1,"message":"269","line":22,"column":28,"nodeType":"253","messageId":"254","endLine":22,"endColumn":35},{"ruleId":"251","severity":1,"message":"270","line":35,"column":29,"nodeType":"253","messageId":"254","endLine":35,"endColumn":39},{"ruleId":"271","severity":1,"message":"272","line":240,"column":35,"nodeType":"273","endLine":240,"endColumn":66},{"ruleId":"251","severity":1,"message":"274","line":15,"column":3,"nodeType":"253","messageId":"254","endLine":15,"endColumn":8},{"ruleId":"251","severity":1,"message":"275","line":46,"column":10,"nodeType":"253","messageId":"254","endLine":46,"endColumn":18},{"ruleId":"251","severity":1,"message":"276","line":46,"column":20,"nodeType":"253","messageId":"254","endLine":46,"endColumn":31},{"ruleId":"251","severity":1,"message":"277","line":50,"column":10,"nodeType":"253","messageId":"254","endLine":50,"endColumn":25},{"ruleId":"251","severity":1,"message":"278","line":67,"column":10,"nodeType":"253","messageId":"254","endLine":67,"endColumn":42},{"ruleId":"251","severity":1,"message":"279","line":70,"column":10,"nodeType":"253","messageId":"254","endLine":70,"endColumn":44},{"ruleId":"251","severity":1,"message":"280","line":75,"column":34,"nodeType":"253","messageId":"254","endLine":75,"endColumn":59},{"ruleId":"251","severity":1,"message":"281","line":82,"column":10,"nodeType":"253","messageId":"254","endLine":82,"endColumn":16},{"ruleId":"251","severity":1,"message":"282","line":86,"column":23,"nodeType":"253","messageId":"254","endLine":86,"endColumn":37},{"ruleId":"283","severity":1,"message":"284","line":652,"column":33,"nodeType":"285","endLine":652,"endColumn":83},{"ruleId":"271","severity":1,"message":"272","line":675,"column":80,"nodeType":"273","endLine":675,"endColumn":98},{"ruleId":"271","severity":1,"message":"272","line":690,"column":80,"nodeType":"273","endLine":690,"endColumn":95},{"ruleId":"251","severity":1,"message":"286","line":35,"column":10,"nodeType":"253","messageId":"254","endLine":35,"endColumn":15},{"ruleId":"251","severity":1,"message":"287","line":35,"column":17,"nodeType":"253","messageId":"254","endLine":35,"endColumn":25},{"ruleId":"251","severity":1,"message":"288","line":36,"column":10,"nodeType":"253","messageId":"254","endLine":36,"endColumn":22},{"ruleId":"251","severity":1,"message":"289","line":36,"column":24,"nodeType":"253","messageId":"254","endLine":36,"endColumn":39},{"ruleId":"251","severity":1,"message":"290","line":3,"column":74,"nodeType":"253","messageId":"254","endLine":3,"endColumn":85},{"ruleId":"251","severity":1,"message":"267","line":3,"column":123,"nodeType":"253","messageId":"254","endLine":3,"endColumn":128},{"ruleId":"261","severity":1,"message":"291","line":18,"column":35,"nodeType":"263","messageId":"292","endLine":18,"endColumn":37},{"ruleId":"251","severity":1,"message":"293","line":39,"column":13,"nodeType":"253","messageId":"254","endLine":39,"endColumn":23},{"ruleId":"251","severity":1,"message":"267","line":3,"column":79,"nodeType":"253","messageId":"254","endLine":3,"endColumn":84},{"ruleId":"251","severity":1,"message":"294","line":15,"column":24,"nodeType":"253","messageId":"254","endLine":15,"endColumn":37},{"ruleId":"251","severity":1,"message":"295","line":36,"column":25,"nodeType":"253","messageId":"254","endLine":36,"endColumn":29},{"ruleId":"261","severity":1,"message":"291","line":91,"column":30,"nodeType":"263","messageId":"292","endLine":91,"endColumn":32},{"ruleId":"261","severity":1,"message":"291","line":112,"column":30,"nodeType":"263","messageId":"292","endLine":112,"endColumn":32},{"ruleId":"251","severity":1,"message":"295","line":125,"column":21,"nodeType":"253","messageId":"254","endLine":125,"endColumn":25},{"ruleId":"251","severity":1,"message":"290","line":3,"column":74,"nodeType":"253","messageId":"254","endLine":3,"endColumn":85},{"ruleId":"251","severity":1,"message":"267","line":3,"column":123,"nodeType":"253","messageId":"254","endLine":3,"endColumn":128},{"ruleId":"261","severity":1,"message":"291","line":29,"column":35,"nodeType":"263","messageId":"292","endLine":29,"endColumn":37},{"ruleId":"296","severity":1,"message":"297","line":40,"column":8,"nodeType":"298","endLine":40,"endColumn":10,"suggestions":"299"},{"ruleId":"251","severity":1,"message":"293","line":52,"column":13,"nodeType":"253","messageId":"254","endLine":52,"endColumn":23},{"ruleId":"251","severity":1,"message":"290","line":3,"column":74,"nodeType":"253","messageId":"254","endLine":3,"endColumn":85},{"ruleId":"251","severity":1,"message":"300","line":3,"column":93,"nodeType":"253","messageId":"254","endLine":3,"endColumn":105},{"ruleId":"251","severity":1,"message":"267","line":3,"column":137,"nodeType":"253","messageId":"254","endLine":3,"endColumn":142},{"ruleId":"251","severity":1,"message":"301","line":10,"column":11,"nodeType":"253","messageId":"254","endLine":10,"endColumn":18},{"ruleId":"251","severity":1,"message":"302","line":11,"column":37,"nodeType":"253","messageId":"254","endLine":11,"endColumn":42},{"ruleId":"251","severity":1,"message":"303","line":11,"column":44,"nodeType":"253","messageId":"254","endLine":11,"endColumn":50},{"ruleId":"251","severity":1,"message":"303","line":26,"column":35,"nodeType":"253","messageId":"254","endLine":26,"endColumn":41},{"ruleId":"251","severity":1,"message":"304","line":27,"column":115,"nodeType":"253","messageId":"254","endLine":27,"endColumn":118},{"ruleId":"251","severity":1,"message":"305","line":38,"column":12,"nodeType":"253","messageId":"254","endLine":38,"endColumn":16},{"ruleId":"251","severity":1,"message":"306","line":1,"column":8,"nodeType":"253","messageId":"254","endLine":1,"endColumn":13},{"ruleId":"251","severity":1,"message":"307","line":2,"column":10,"nodeType":"253","messageId":"254","endLine":2,"endColumn":14},{"ruleId":"251","severity":1,"message":"308","line":54,"column":10,"nodeType":"253","messageId":"254","endLine":54,"endColumn":20},"no-native-reassign",["309"],"no-negated-in-lhs",["310"],"no-unused-vars","'Col' is defined but never used.","Identifier","unusedVar","'AuthNavbar' is defined but never used.","'AuthFooter' is defined but never used.","'response' is assigned a value but never used.","'api' is defined but never used.","'useState' is defined but never used.","'auth' is assigned a value but never used.","array-callback-return","Array.prototype.map() expects a value to be returned at the end of arrow function.","ArrowFunctionExpression","expectedAtEnd","'Button' is defined but never used.","'Progress' is defined but never used.","'Table' is defined but never used.","'useCallback' is defined but never used.","'isAfter' is defined but never used.","'updateUser' is assigned a value but never used.","react/jsx-no-duplicate-props","No duplicate props allowed","JSXAttribute","'Media' is defined but never used.","'collapse' is assigned a value but never used.","'setCollpase' is assigned a value but never used.","'taxMonetizValue' is assigned a value but never used.","'paymentAnticipationBuyerTaxValue' is assigned a value but never used.","'paymentAnticipationMonetizTaxValue' is assigned a value but never used.","'setInstallmentsCreditCard' is assigned a value but never used.","'update' is assigned a value but never used.","'setCreditCards' is assigned a value but never used.","jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","'plans' is assigned a value but never used.","'setPlans' is assigned a value but never used.","'planSelected' is assigned a value but never used.","'setPlanSelected' is assigned a value but never used.","'CustomInput' is defined but never used.","Array.prototype.map() expects a return value from arrow function.","expectedInside","'allChecked' is assigned a value but never used.","'setDeleteUser' is assigned a value but never used.","'data' is assigned a value but never used.","react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'id'. Either include it or remove the dependency array.","ArrayExpression",["311"],"'FormFeedback' is defined but never used.","'history' is assigned a value but never used.","'watch' is assigned a value but never used.","'errors' is assigned a value but never used.","'Row' is defined but never used.","'user' is assigned a value but never used.","'React' is defined but never used.","'func' is defined but never used.","'formatReal' is defined but never used.","no-global-assign","no-unsafe-negation",{"desc":"312","fix":"313"},"Update the dependencies array to be: [id]",{"range":"314","text":"315"},[1628,1630],"[id]"]